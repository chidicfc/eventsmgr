
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pt.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	88, 93, 100, 105, 107, 108, 110, 111, 
	112, 113, 114, 115, 116, 117, 131, 133, 
	135, 137, 139, 141, 143, 145, 147, 149, 
	151, 153, 155, 157, 159, 161, 177, 178, 
	179, 180, 184, 185, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 202, 203, 204, 205, 206, 207, 
	208, 209, 223, 225, 227, 229, 231, 233, 
	235, 237, 239, 241, 243, 245, 247, 249, 
	251, 253, 255, 257, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 279, 281, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 323, 324, 325, 326, 327, 
	328, 329, 330, 331, 338, 340, 342, 344, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 367, 368, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 382, 392, 394, 396, 398, 400, 
	402, 404, 406, 408, 410, 412, 414, 416, 
	418, 420, 423, 425, 428, 430, 432, 434, 
	436, 438, 440, 442, 444, 446, 448, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 512, 513, 
	514, 515, 516, 520, 526, 529, 531, 537, 
	553, 556, 558, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 591, 593, 596, 598, 600, 602, 604, 
	606, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 656, 657, 658, 659, 660, 661, 662, 
	663, 664, 665, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 716, 718, 720, 
	722, 724, 726, 728, 730, 732, 736, 738, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 765, 767, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 800, 801
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 101, 111, 110, -61, 97, -95, 114, 
	105, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 67, 68, 69, 70, 77, 
	81, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 97, 100, 111, 32, 110, 115, 120, 
	116, -61, 97, -93, 113, 117, 101, 109, 
	97, 32, 100, 111, 32, 67, 101, 110, 
	-61, 97, -95, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 97, 
	10, 100, 10, 111, 10, 32, 110, 10, 
	116, -61, 10, 97, -93, 10, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 100, 10, 97, 10, 100, 10, 101, 
	10, 97, 10, 115, 10, 117, 10, 97, 
	10, 110, 101, 109, 112, 108, 111, 115, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 117, 10, 110, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 100, 10, 97, 
	10, 100, 10, 101, 10, 58, 117, 110, 
	99, 105, 111, 110, 97, 108, 105, 100, 
	97, 100, 101, 58, 10, 10, 10, 32, 
	35, 37, 64, 67, 69, 70, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 101, 111, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 110, 
	10, 116, 10, 101, 10, 120, 10, 116, 
	10, 115, 120, 10, 113, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 101, 10, 109, 10, 112, 10, 
	108, 10, 111, 10, 115, 10, 117, 10, 
	110, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	100, 10, 97, 10, 100, 10, 101, 97, 
	115, 117, 97, 110, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 10, 101, 111, 10, 110, -61, 10, 
	97, -95, 10, 10, 114, 10, 105, 10, 
	111, 10, 58, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 97, 10, 
	100, 10, 111, 10, 32, 110, 115, 10, 
	116, -61, 10, 97, -93, 10, 10, 113, 
	10, 117, 10, 101, 10, 109, 10, 97, 
	10, 32, 10, 100, 10, 111, 10, 32, 
	10, 67, 10, 101, 10, 117, 10, 110, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 100, 
	10, 97, 10, 100, 10, 101, 10, 97, 
	10, 115, 10, 117, 10, 97, 10, 110, 
	110, 116, 101, 120, 116, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	110, -61, 10, 97, -95, 10, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 97, 
	10, 100, 10, 111, 10, 32, 110, 115, 
	10, 116, -61, 10, 97, -93, 10, 10, 
	113, 10, 117, 10, 101, 10, 109, 10, 
	97, 10, 32, 10, 100, 10, 111, 10, 
	32, 10, 67, 10, 117, 10, 110, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 100, 10, 
	97, 10, 100, 10, 101, 10, 97, 10, 
	115, 10, 117, 10, 97, 10, 110, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 2, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 14, 1, 1, 
	1, 4, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 14, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	111, 116, 123, 128, 131, 133, 136, 138, 
	140, 142, 144, 146, 148, 150, 164, 167, 
	170, 173, 176, 179, 182, 185, 188, 191, 
	194, 197, 200, 203, 206, 209, 225, 227, 
	229, 231, 236, 238, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 270, 272, 274, 276, 278, 280, 
	282, 284, 298, 301, 304, 307, 310, 313, 
	316, 319, 322, 325, 328, 331, 334, 337, 
	340, 343, 346, 349, 353, 356, 359, 362, 
	365, 368, 371, 374, 377, 381, 384, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	439, 442, 445, 447, 449, 451, 453, 455, 
	457, 459, 461, 463, 470, 473, 476, 479, 
	482, 485, 488, 491, 494, 497, 500, 503, 
	506, 509, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 
	540, 542, 544, 554, 557, 560, 563, 566, 
	569, 572, 575, 578, 581, 584, 587, 590, 
	593, 596, 600, 603, 607, 610, 613, 616, 
	619, 622, 625, 628, 631, 634, 637, 641, 
	644, 647, 650, 653, 656, 659, 662, 665, 
	668, 671, 674, 677, 680, 683, 686, 689, 
	692, 695, 698, 701, 704, 707, 710, 713, 
	716, 719, 722, 725, 728, 731, 733, 735, 
	737, 739, 741, 745, 751, 755, 758, 764, 
	780, 784, 787, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 835, 838, 842, 845, 848, 851, 854, 
	857, 860, 863, 866, 869, 872, 875, 878, 
	881, 884, 887, 890, 893, 896, 899, 902, 
	905, 908, 911, 914, 917, 920, 923, 926, 
	929, 932, 934, 936, 938, 940, 942, 944, 
	946, 948, 950, 964, 967, 970, 973, 976, 
	979, 982, 985, 988, 991, 994, 997, 1000, 
	1003, 1006, 1009, 1012, 1015, 1019, 1022, 1025, 
	1028, 1031, 1034, 1037, 1040, 1043, 1048, 1051, 
	1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 
	1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 
	1127, 1130, 1133, 1136, 1139, 1142, 1144, 1146
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 0, 55, 57, 58, 56, 0, 
	0, 0, 0, 59, 60, 61, 60, 60, 
	63, 62, 59, 2, 64, 7, 64, 0, 
	65, 66, 0, 67, 0, 68, 69, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 75, 74, 77, 76, 77, 78, 
	79, 80, 81, 79, 82, 83, 84, 85, 
	86, 87, 78, 76, 77, 88, 76, 77, 
	89, 76, 77, 90, 76, 77, 91, 76, 
	77, 92, 76, 77, 93, 76, 77, 94, 
	76, 77, 95, 76, 77, 96, 76, 77, 
	97, 76, 77, 98, 76, 77, 99, 76, 
	77, 100, 76, 77, 101, 76, 77, 102, 
	76, 104, 103, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 103, 
	0, 117, 0, 118, 0, 119, 0, 54, 
	120, 121, 122, 0, 123, 0, 124, 118, 
	0, 118, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 135, 
	0, 136, 0, 137, 138, 0, 138, 0, 
	139, 0, 140, 0, 141, 0, 142, 0, 
	144, 143, 146, 145, 146, 147, 148, 149, 
	150, 148, 151, 152, 153, 154, 155, 156, 
	147, 145, 146, 157, 145, 146, 158, 145, 
	146, 159, 145, 146, 160, 145, 146, 161, 
	145, 146, 162, 145, 146, 163, 145, 146, 
	164, 145, 146, 165, 145, 146, 166, 145, 
	146, 167, 145, 146, 168, 145, 146, 169, 
	145, 146, 170, 145, 146, 171, 145, 146, 
	172, 145, 146, 173, 145, 174, 146, 175, 
	145, 175, 146, 145, 146, 176, 145, 146, 
	177, 145, 146, 178, 145, 146, 171, 145, 
	146, 179, 145, 146, 180, 145, 146, 181, 
	145, 146, 171, 182, 145, 146, 183, 145, 
	184, 146, 180, 145, 180, 146, 145, 146, 
	185, 145, 146, 186, 145, 146, 187, 145, 
	146, 188, 145, 146, 189, 145, 146, 190, 
	145, 146, 191, 145, 146, 192, 145, 146, 
	193, 145, 146, 194, 145, 146, 195, 145, 
	146, 196, 145, 146, 178, 145, 146, 197, 
	145, 146, 181, 145, 146, 198, 145, 146, 
	199, 145, 146, 179, 145, 200, 0, 201, 
	0, 202, 0, 203, 0, 204, 0, 205, 
	0, 206, 0, 208, 207, 210, 209, 210, 
	211, 212, 213, 212, 211, 209, 210, 214, 
	209, 210, 215, 209, 210, 216, 209, 210, 
	217, 209, 210, 218, 209, 210, 219, 209, 
	210, 220, 209, 210, 221, 209, 210, 222, 
	209, 210, 223, 209, 210, 224, 209, 210, 
	225, 209, 210, 226, 209, 210, 227, 209, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	232, 0, 233, 0, 234, 0, 235, 0, 
	236, 0, 237, 0, 238, 0, 239, 0, 
	240, 0, 241, 0, 243, 242, 245, 244, 
	245, 246, 247, 248, 247, 249, 250, 251, 
	246, 244, 245, 252, 244, 245, 253, 244, 
	245, 254, 244, 245, 255, 244, 245, 256, 
	244, 245, 257, 244, 245, 258, 244, 245, 
	259, 244, 245, 260, 244, 245, 261, 244, 
	245, 262, 244, 245, 263, 244, 245, 264, 
	244, 245, 265, 244, 245, 266, 267, 244, 
	245, 268, 244, 269, 245, 270, 244, 270, 
	245, 244, 245, 271, 244, 245, 272, 244, 
	245, 273, 244, 245, 274, 244, 245, 275, 
	244, 245, 276, 244, 245, 277, 244, 245, 
	278, 244, 245, 272, 244, 245, 279, 280, 
	244, 245, 281, 244, 245, 282, 244, 245, 
	283, 244, 245, 284, 244, 245, 285, 244, 
	245, 286, 244, 245, 287, 244, 245, 288, 
	244, 245, 289, 244, 245, 290, 244, 245, 
	266, 244, 245, 291, 244, 245, 292, 244, 
	245, 293, 244, 245, 294, 244, 245, 295, 
	244, 245, 273, 244, 245, 296, 244, 245, 
	297, 244, 245, 298, 244, 245, 299, 244, 
	245, 300, 244, 245, 301, 244, 245, 302, 
	244, 245, 303, 244, 245, 304, 244, 245, 
	305, 244, 245, 306, 244, 245, 307, 244, 
	245, 273, 244, 308, 0, 119, 0, 309, 
	0, 310, 0, 117, 0, 311, 312, 311, 
	0, 315, 314, 316, 317, 314, 313, 0, 
	319, 320, 318, 0, 319, 318, 315, 321, 
	319, 320, 321, 318, 315, 322, 323, 324, 
	325, 326, 327, 328, 329, 330, 331, 332, 
	333, 334, 322, 0, 77, 335, 336, 76, 
	77, 337, 76, 338, 77, 339, 76, 339, 
	77, 76, 77, 340, 76, 77, 341, 76, 
	77, 342, 76, 77, 102, 76, 77, 343, 
	76, 77, 344, 76, 77, 345, 76, 77, 
	346, 76, 77, 341, 76, 77, 347, 76, 
	77, 348, 76, 77, 349, 76, 77, 102, 
	350, 351, 76, 77, 352, 76, 353, 77, 
	348, 76, 348, 77, 76, 77, 354, 76, 
	77, 355, 76, 77, 356, 76, 77, 357, 
	76, 77, 358, 76, 77, 359, 76, 77, 
	360, 76, 77, 361, 76, 77, 362, 76, 
	77, 363, 76, 77, 335, 76, 77, 364, 
	76, 77, 365, 76, 77, 366, 76, 77, 
	367, 76, 77, 368, 76, 77, 369, 76, 
	77, 370, 76, 77, 371, 76, 77, 372, 
	76, 77, 373, 76, 77, 374, 76, 77, 
	375, 76, 77, 342, 76, 77, 376, 76, 
	77, 349, 76, 77, 377, 76, 77, 378, 
	76, 77, 347, 76, 379, 0, 380, 0, 
	381, 0, 382, 0, 383, 0, 384, 0, 
	385, 0, 387, 386, 389, 388, 389, 390, 
	391, 392, 393, 391, 394, 395, 396, 397, 
	398, 399, 390, 388, 389, 400, 388, 389, 
	401, 388, 389, 402, 388, 389, 403, 388, 
	389, 404, 388, 389, 405, 388, 389, 406, 
	388, 389, 407, 388, 389, 408, 388, 389, 
	409, 388, 389, 410, 388, 389, 411, 388, 
	389, 412, 388, 389, 413, 388, 389, 414, 
	388, 389, 415, 388, 389, 416, 388, 417, 
	389, 418, 388, 418, 389, 388, 389, 419, 
	388, 389, 420, 388, 389, 421, 388, 389, 
	414, 388, 389, 422, 388, 389, 423, 388, 
	389, 424, 388, 389, 414, 425, 426, 388, 
	389, 427, 388, 428, 389, 423, 388, 423, 
	389, 388, 389, 429, 388, 389, 430, 388, 
	389, 431, 388, 389, 432, 388, 389, 433, 
	388, 389, 434, 388, 389, 435, 388, 389, 
	436, 388, 389, 437, 388, 389, 438, 388, 
	389, 439, 388, 389, 440, 388, 389, 441, 
	388, 389, 442, 388, 389, 443, 388, 389, 
	444, 388, 389, 445, 388, 389, 446, 388, 
	389, 447, 388, 389, 448, 388, 389, 449, 
	388, 389, 450, 388, 389, 421, 388, 389, 
	451, 388, 389, 424, 388, 389, 452, 388, 
	389, 453, 388, 389, 422, 388, 454, 0, 
	1, 0, 455, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 62, 65, 162, 237, 239, 242, 365, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 367, 30, 31, 
	31, 2, 14, 33, 34, 2, 33, 32, 
	34, 36, 297, 37, 38, 39, 40, 41, 
	42, 43, 44, 45, 44, 45, 45, 2, 
	46, 60, 248, 261, 264, 279, 292, 294, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 59, 2, 61, 2, 
	2, 3, 13, 15, 29, 32, 35, 62, 
	65, 162, 237, 239, 242, 63, 64, 29, 
	66, 69, 138, 67, 68, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 88, 89, 89, 2, 90, 104, 105, 
	113, 116, 120, 133, 135, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 2, 61, 106, 107, 108, 109, 
	110, 111, 112, 114, 115, 104, 117, 118, 
	119, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 134, 136, 137, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 146, 147, 147, 2, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 61, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 172, 173, 174, 
	175, 176, 177, 178, 177, 178, 178, 2, 
	179, 193, 206, 224, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 2, 194, 201, 195, 196, 197, 198, 
	199, 200, 61, 202, 203, 204, 205, 207, 
	218, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 219, 220, 221, 222, 223, 
	225, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 235, 236, 238, 240, 241, 242, 
	243, 244, 246, 247, 245, 243, 244, 245, 
	243, 246, 247, 3, 13, 15, 29, 32, 
	35, 62, 65, 162, 237, 239, 242, 249, 
	256, 250, 251, 252, 253, 254, 255, 257, 
	258, 259, 260, 262, 263, 60, 265, 268, 
	266, 267, 269, 270, 271, 272, 273, 274, 
	275, 276, 277, 278, 280, 281, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	293, 295, 296, 298, 299, 300, 301, 302, 
	303, 304, 305, 306, 305, 306, 306, 2, 
	307, 321, 322, 330, 333, 347, 360, 362, 
	308, 309, 310, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 2, 61, 323, 
	324, 325, 326, 327, 328, 329, 331, 332, 
	321, 334, 337, 335, 336, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 322, 348, 
	349, 350, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 361, 363, 364, 366, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 135, 48, 0, 102, 9, 
	5, 45, 130, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	0, 110, 23, 0, 27, 118, 27, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 31, 
	126, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 69, 
	33, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 367;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 693 "js/lib/gherkin/lexer/pt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
  
/* line 700 "js/lib/gherkin/lexer/pt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 927 "js/lib/gherkin/lexer/pt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 966 "js/lib/gherkin/lexer/pt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/pt', [], function() {return Lexer});
}

})();
