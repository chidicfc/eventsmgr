
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ca.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	94, 99, 106, 111, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 169, 171, 173, 175, 177, 179, 
	198, 199, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	272, 274, 276, 278, 280, 282, 284, 286, 
	288, 290, 292, 294, 296, 298, 300, 302, 
	304, 306, 309, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 332, 334, 336, 
	338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 362, 364, 366, 368, 
	370, 372, 374, 376, 378, 380, 382, 384, 
	386, 388, 390, 392, 394, 395, 396, 397, 
	399, 400, 402, 404, 405, 406, 407, 408, 
	409, 410, 411, 412, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 500, 502, 
	504, 506, 508, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 544, 546, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 636, 637, 638, 639, 640, 641, 642, 
	643, 644, 645, 646, 647, 648, 649, 650, 
	651, 652, 653, 654, 655, 656, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 705, 707, 
	709, 711, 713, 715, 717, 719, 722, 724, 
	726, 728, 730, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 768, 770, 772, 774, 
	776, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 821, 
	822, 823, 824, 825, 826, 827, 828, 829, 
	837, 839, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 892, 893, 894, 895, 
	896, 897, 898, 899, 900, 901, 902, 903, 
	904, 905, 906, 907, 908, 909, 910, 911, 
	912, 913, 914, 915, 916, 920, 926, 929, 
	931, 937, 956, 959, 961, 963, 965, 967, 
	969, 971, 973, 976, 978, 980, 982, 984, 
	987, 989, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 
	1019, 1022, 1024, 1027, 1029, 1031, 1033, 1035, 
	1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 
	1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 
	1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1104, 1105, 1106, 1107
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 68, 69, 70, 73, 80, 81, 82, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	73, 80, 81, 82, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	110, 116, 101, 115, 104, 111, 114, 101, 
	115, 116, 101, 99, 101, 100, 101, 110, 
	116, 115, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	73, 80, 81, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 73, 
	80, 81, 82, 124, 9, 13, 97, 108, 
	114, 97, 99, 116, 101, 114, -61, -83, 
	115, 116, 105, 99, 97, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 67, 69, 
	70, 82, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 110, 10, 116, 10, 101, 10, 99, 
	10, 101, 10, 100, 10, 101, 10, 110, 
	10, 116, 10, 115, 10, 58, 10, 97, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, -83, 10, 
	10, 115, 10, 116, 10, 105, 10, 99, 
	10, 97, 10, 115, 120, 10, 99, 113, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 117, 10, 101, 10, 109, 
	10, 97, 10, 32, 10, 100, 10, 101, 
	10, 32, 10, 108, 10, 39, 10, 101, 
	10, 115, 10, 99, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 101, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, 10, 97, 10, 116, 10, 101, 
	10, 114, 10, 101, 10, 102, 10, 111, 
	10, 110, 111, 110, 97, 100, 116, 97, 
	115, 120, 99, 113, 101, 110, 97, 114, 
	105, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 73, 
	80, 81, 82, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 110, 116, 10, 
	101, 10, 115, 10, 104, 10, 111, 10, 
	114, 10, 101, 10, 115, 10, 116, 10, 
	101, 10, 99, 10, 101, 10, 100, 10, 
	101, 10, 110, 10, 116, 10, 115, 10, 
	58, -61, 10, 101, -88, 10, 10, 115, 
	10, 97, 10, 97, 10, 108, 114, 10, 
	97, 10, 99, 10, 116, 10, 101, 10, 
	114, -61, 10, -83, 10, 10, 115, 10, 
	116, 10, 105, 10, 99, 10, 97, 10, 
	111, 10, 110, 10, 97, 10, 100, 116, 
	10, 115, 10, 99, 113, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 101, 10, 109, 10, 97, 10, 
	32, 10, 100, 10, 101, 10, 32, 10, 
	108, 10, 39, 10, 101, 10, 115, 10, 
	99, 10, 117, 10, 110, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, 10, 97, 10, 
	116, 10, 101, 10, 114, -61, 10, -78, 
	10, 10, 117, 10, 97, 10, 110, 10, 
	101, 10, 114, 10, 101, 10, 102, 10, 
	111, 10, 110, 117, 101, 109, 97, 32, 
	100, 101, 32, 108, 39, 101, 115, 99, 
	101, 110, 97, 114, 105, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 67, 
	68, 69, 70, 73, 80, 81, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 108, 
	116, 10, 101, 10, 115, 10, 104, 10, 
	111, 10, 114, 10, 101, 10, 115, -61, 
	10, 101, -88, 10, 10, 115, 10, 97, 
	10, 97, 10, 108, 114, 10, 97, 10, 
	99, 10, 116, 10, 101, 10, 114, -61, 
	10, -83, 10, 10, 115, 10, 116, 10, 
	105, 10, 99, 10, 97, 10, 58, 10, 
	111, 10, 110, 10, 97, 10, 100, 116, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, 10, 97, 10, 116, 10, 101, 
	10, 114, -61, 10, -78, 10, 10, 117, 
	10, 97, 10, 110, 101, 109, 112, 108, 
	101, 115, 58, 10, 10, 10, 32, 35, 
	67, 70, 124, 9, 13, 10, 97, 10, 
	114, 10, 97, 10, 99, 10, 116, 10, 
	101, 10, 114, -61, 10, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 117, 10, 110, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 116, 10, 
	97, 10, 116, 117, 110, 99, 105, 111, 
	110, 97, 108, 105, 116, 97, 116, 101, 
	114, -61, -78, 117, 97, 110, 101, 114, 
	101, 102, 111, 110, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 70, 73, 80, 81, 
	82, 124, 9, 13, 10, 108, 116, 10, 
	101, 10, 115, 10, 104, 10, 111, 10, 
	114, 10, 101, 10, 115, -61, 10, 101, 
	-88, 10, 10, 115, 10, 97, 10, 97, 
	10, 108, 114, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 111, 10, 
	110, 10, 97, 10, 100, 116, 10, 115, 
	10, 99, 113, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 101, 10, 32, 10, 108, 10, 
	39, 10, 101, 10, 115, 10, 99, 10, 
	117, 10, 110, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 114, -61, 10, -78, 10, 10, 
	117, 10, 97, 10, 110, -61, 101, -88, 
	115, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 17, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 4, 3, 2, 
	4, 17, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	117, 122, 129, 134, 138, 140, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 219, 222, 225, 228, 231, 234, 237, 
	256, 258, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 303, 306, 309, 312, 315, 318, 
	321, 324, 327, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 411, 414, 
	417, 420, 424, 428, 431, 434, 437, 440, 
	443, 446, 449, 452, 455, 458, 461, 464, 
	467, 470, 473, 476, 479, 482, 485, 488, 
	491, 494, 497, 500, 503, 506, 509, 512, 
	515, 518, 521, 524, 527, 530, 533, 536, 
	539, 542, 545, 548, 551, 553, 555, 557, 
	560, 562, 565, 568, 570, 572, 574, 576, 
	578, 580, 582, 584, 601, 604, 607, 610, 
	613, 616, 619, 622, 625, 628, 631, 634, 
	637, 640, 643, 646, 651, 654, 657, 660, 
	663, 666, 669, 672, 675, 678, 681, 684, 
	687, 690, 693, 696, 699, 702, 706, 709, 
	712, 715, 718, 722, 725, 728, 731, 734, 
	737, 740, 743, 746, 749, 752, 755, 758, 
	761, 764, 767, 771, 774, 778, 781, 784, 
	787, 790, 793, 796, 799, 802, 805, 808, 
	811, 814, 817, 820, 823, 826, 829, 832, 
	835, 838, 841, 844, 847, 850, 853, 856, 
	859, 862, 865, 868, 871, 874, 877, 880, 
	883, 886, 889, 892, 895, 898, 901, 904, 
	907, 909, 911, 913, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 947, 949, 965, 968, 
	971, 974, 977, 980, 983, 986, 989, 992, 
	995, 998, 1001, 1004, 1007, 1010, 1014, 1017, 
	1020, 1023, 1026, 1029, 1032, 1035, 1039, 1042, 
	1045, 1048, 1051, 1055, 1058, 1061, 1064, 1067, 
	1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091, 
	1094, 1097, 1100, 1103, 1107, 1110, 1113, 1116, 
	1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1182, 1185, 1187, 
	1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 
	1211, 1214, 1217, 1220, 1223, 1226, 1229, 1232, 
	1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256, 
	1259, 1262, 1265, 1268, 1271, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1294, 1296, 1298, 1300, 
	1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 
	1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 
	1334, 1336, 1338, 1340, 1342, 1346, 1352, 1356, 
	1359, 1365, 1384, 1388, 1391, 1394, 1397, 1400, 
	1403, 1406, 1409, 1413, 1416, 1419, 1422, 1425, 
	1429, 1432, 1435, 1438, 1441, 1444, 1447, 1450, 
	1453, 1456, 1459, 1462, 1465, 1468, 1471, 1474, 
	1477, 1481, 1484, 1488, 1491, 1494, 1497, 1500, 
	1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524, 
	1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 
	1551, 1554, 1557, 1560, 1563, 1566, 1569, 1572, 
	1575, 1578, 1581, 1584, 1587, 1590, 1593, 1596, 
	1599, 1602, 1604, 1606, 1608, 1610
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 6, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	6, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	0, 57, 59, 60, 58, 0, 0, 0, 
	0, 61, 62, 63, 62, 62, 65, 64, 
	61, 2, 66, 7, 66, 0, 67, 68, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	85, 0, 86, 0, 88, 87, 90, 89, 
	90, 91, 92, 93, 94, 92, 95, 96, 
	97, 98, 99, 94, 100, 101, 91, 89, 
	90, 102, 89, 90, 103, 89, 90, 104, 
	89, 90, 105, 89, 90, 106, 89, 90, 
	107, 89, 90, 108, 89, 90, 109, 89, 
	90, 110, 89, 90, 111, 89, 90, 112, 
	89, 90, 113, 89, 90, 114, 89, 90, 
	115, 89, 90, 116, 89, 118, 117, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 122, 129, 130, 131, 132, 117, 0, 
	133, 0, 76, 134, 0, 135, 0, 136, 
	0, 137, 0, 138, 0, 139, 0, 140, 
	0, 141, 0, 142, 0, 143, 0, 144, 
	0, 145, 0, 146, 0, 147, 0, 149, 
	148, 151, 150, 151, 152, 153, 154, 153, 
	155, 156, 157, 158, 159, 152, 150, 151, 
	160, 150, 151, 161, 150, 151, 162, 150, 
	151, 163, 150, 151, 164, 150, 151, 165, 
	150, 151, 166, 150, 151, 167, 150, 151, 
	168, 150, 151, 169, 150, 151, 170, 150, 
	151, 171, 150, 151, 172, 150, 151, 173, 
	150, 151, 174, 150, 151, 175, 150, 151, 
	176, 150, 151, 177, 150, 151, 178, 150, 
	151, 179, 150, 151, 180, 150, 151, 181, 
	150, 151, 182, 150, 151, 183, 150, 151, 
	184, 150, 151, 185, 150, 151, 186, 150, 
	151, 187, 150, 151, 188, 150, 151, 189, 
	150, 151, 190, 150, 151, 191, 150, 192, 
	151, 150, 193, 151, 150, 151, 194, 150, 
	151, 195, 150, 151, 196, 150, 151, 197, 
	150, 151, 183, 150, 151, 198, 199, 150, 
	151, 200, 201, 150, 151, 202, 150, 151, 
	203, 150, 151, 204, 150, 151, 205, 150, 
	151, 183, 150, 151, 206, 150, 151, 207, 
	150, 151, 208, 150, 151, 209, 150, 151, 
	210, 150, 151, 211, 150, 151, 212, 150, 
	151, 213, 150, 151, 214, 150, 151, 215, 
	150, 151, 216, 150, 151, 217, 150, 151, 
	200, 150, 151, 218, 150, 151, 219, 150, 
	151, 220, 150, 151, 221, 150, 151, 182, 
	150, 151, 222, 150, 151, 223, 150, 151, 
	224, 150, 151, 225, 150, 151, 226, 150, 
	151, 227, 150, 151, 228, 150, 151, 229, 
	150, 151, 230, 150, 151, 231, 150, 151, 
	232, 150, 151, 183, 150, 151, 233, 150, 
	151, 234, 150, 151, 235, 150, 151, 236, 
	150, 151, 237, 150, 151, 182, 150, 238, 
	0, 239, 0, 240, 0, 241, 76, 0, 
	76, 0, 242, 243, 0, 244, 245, 0, 
	246, 0, 247, 0, 248, 0, 249, 0, 
	250, 0, 251, 0, 253, 252, 255, 254, 
	255, 256, 257, 258, 259, 257, 260, 261, 
	262, 263, 264, 259, 265, 266, 267, 256, 
	254, 255, 268, 254, 255, 269, 254, 255, 
	270, 254, 255, 271, 254, 255, 272, 254, 
	255, 273, 254, 255, 274, 254, 255, 275, 
	254, 255, 276, 254, 255, 277, 254, 255, 
	278, 254, 255, 279, 254, 255, 280, 254, 
	255, 281, 254, 255, 282, 254, 255, 283, 
	284, 285, 254, 255, 286, 254, 255, 287, 
	254, 255, 288, 254, 255, 289, 254, 255, 
	290, 254, 255, 291, 254, 255, 292, 254, 
	255, 293, 254, 255, 294, 254, 255, 295, 
	254, 255, 296, 254, 255, 297, 254, 255, 
	298, 254, 255, 299, 254, 255, 300, 254, 
	255, 301, 254, 255, 282, 254, 302, 255, 
	303, 254, 291, 255, 254, 255, 304, 254, 
	255, 292, 254, 255, 305, 254, 255, 292, 
	306, 254, 255, 307, 254, 255, 308, 254, 
	255, 309, 254, 255, 310, 254, 255, 311, 
	254, 312, 255, 254, 313, 255, 254, 255, 
	314, 254, 255, 315, 254, 255, 316, 254, 
	255, 317, 254, 255, 301, 254, 255, 318, 
	254, 255, 319, 254, 255, 320, 254, 255, 
	304, 292, 254, 255, 321, 254, 255, 322, 
	323, 254, 255, 324, 254, 255, 325, 254, 
	255, 326, 254, 255, 327, 254, 255, 301, 
	254, 255, 328, 254, 255, 329, 254, 255, 
	330, 254, 255, 331, 254, 255, 332, 254, 
	255, 333, 254, 255, 334, 254, 255, 335, 
	254, 255, 336, 254, 255, 337, 254, 255, 
	338, 254, 255, 339, 254, 255, 322, 254, 
	255, 340, 254, 255, 341, 254, 255, 342, 
	254, 255, 343, 254, 255, 344, 254, 255, 
	345, 254, 255, 346, 254, 255, 347, 254, 
	255, 348, 254, 255, 349, 254, 255, 350, 
	254, 255, 301, 254, 255, 351, 254, 255, 
	352, 254, 353, 255, 254, 292, 255, 254, 
	255, 354, 254, 255, 355, 254, 255, 292, 
	254, 255, 356, 254, 255, 357, 254, 255, 
	358, 254, 255, 359, 254, 255, 360, 254, 
	255, 300, 254, 361, 0, 362, 0, 363, 
	0, 364, 0, 365, 0, 366, 0, 367, 
	0, 368, 0, 369, 0, 370, 0, 371, 
	0, 372, 0, 373, 0, 374, 0, 375, 
	0, 376, 0, 377, 0, 378, 0, 379, 
	0, 381, 380, 383, 382, 383, 384, 385, 
	386, 387, 385, 388, 389, 390, 391, 392, 
	387, 393, 394, 384, 382, 383, 395, 382, 
	383, 396, 382, 383, 397, 382, 383, 398, 
	382, 383, 399, 382, 383, 400, 382, 383, 
	401, 382, 383, 402, 382, 383, 403, 382, 
	383, 404, 382, 383, 405, 382, 383, 406, 
	382, 383, 407, 382, 383, 408, 382, 383, 
	409, 382, 383, 410, 411, 382, 383, 412, 
	382, 383, 413, 382, 383, 414, 382, 383, 
	415, 382, 383, 416, 382, 383, 417, 382, 
	383, 418, 382, 419, 383, 420, 382, 417, 
	383, 382, 383, 421, 382, 383, 418, 382, 
	383, 422, 382, 383, 418, 423, 382, 383, 
	424, 382, 383, 425, 382, 383, 426, 382, 
	383, 427, 382, 383, 428, 382, 429, 383, 
	382, 430, 383, 382, 383, 431, 382, 383, 
	432, 382, 383, 433, 382, 383, 434, 382, 
	383, 435, 382, 383, 409, 382, 383, 436, 
	382, 383, 437, 382, 383, 438, 382, 383, 
	421, 418, 382, 383, 439, 382, 383, 440, 
	382, 383, 441, 382, 383, 442, 382, 383, 
	443, 382, 383, 444, 382, 383, 435, 382, 
	383, 445, 382, 383, 446, 382, 383, 447, 
	382, 383, 448, 382, 383, 449, 382, 383, 
	450, 382, 383, 451, 382, 383, 452, 382, 
	383, 453, 382, 383, 454, 382, 383, 455, 
	382, 383, 435, 382, 383, 456, 382, 383, 
	457, 382, 458, 383, 382, 418, 383, 382, 
	383, 459, 382, 383, 460, 382, 383, 418, 
	382, 461, 0, 462, 0, 463, 0, 464, 
	0, 465, 0, 466, 0, 467, 0, 469, 
	468, 471, 470, 471, 472, 473, 474, 475, 
	473, 472, 470, 471, 476, 470, 471, 477, 
	470, 471, 478, 470, 471, 479, 470, 471, 
	480, 470, 471, 481, 470, 471, 482, 470, 
	483, 471, 470, 484, 471, 470, 471, 485, 
	470, 471, 486, 470, 471, 487, 470, 471, 
	488, 470, 471, 489, 470, 471, 490, 470, 
	471, 491, 470, 471, 492, 470, 471, 493, 
	470, 471, 494, 470, 471, 495, 470, 471, 
	496, 470, 471, 497, 470, 471, 498, 470, 
	471, 499, 470, 471, 500, 470, 471, 501, 
	470, 471, 489, 470, 502, 0, 503, 0, 
	504, 0, 505, 0, 506, 0, 507, 0, 
	508, 0, 509, 0, 510, 0, 511, 0, 
	512, 0, 146, 0, 513, 0, 514, 0, 
	515, 0, 76, 0, 516, 0, 517, 0, 
	76, 0, 518, 0, 519, 0, 520, 0, 
	521, 0, 522, 0, 84, 0, 523, 524, 
	523, 0, 527, 526, 528, 529, 526, 525, 
	0, 531, 532, 530, 0, 531, 530, 527, 
	533, 531, 532, 533, 530, 527, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 543, 
	544, 538, 545, 546, 547, 548, 534, 0, 
	90, 549, 550, 89, 90, 551, 89, 90, 
	552, 89, 90, 553, 89, 90, 554, 89, 
	90, 555, 89, 90, 556, 89, 90, 557, 
	89, 558, 90, 559, 89, 556, 90, 89, 
	90, 560, 89, 90, 557, 89, 90, 561, 
	89, 90, 557, 562, 89, 90, 563, 89, 
	90, 564, 89, 90, 565, 89, 90, 566, 
	89, 90, 567, 89, 568, 90, 89, 569, 
	90, 89, 90, 570, 89, 90, 571, 89, 
	90, 572, 89, 90, 573, 89, 90, 574, 
	89, 90, 116, 89, 90, 575, 89, 90, 
	576, 89, 90, 577, 89, 90, 560, 557, 
	89, 90, 578, 89, 90, 579, 580, 89, 
	90, 581, 89, 90, 582, 89, 90, 583, 
	89, 90, 584, 89, 90, 574, 89, 90, 
	585, 89, 90, 586, 89, 90, 587, 89, 
	90, 588, 89, 90, 589, 89, 90, 590, 
	89, 90, 591, 89, 90, 592, 89, 90, 
	593, 89, 90, 594, 89, 90, 595, 89, 
	90, 596, 89, 90, 579, 89, 90, 597, 
	89, 90, 598, 89, 90, 599, 89, 90, 
	600, 89, 90, 601, 89, 90, 602, 89, 
	90, 603, 89, 90, 604, 89, 90, 605, 
	89, 90, 606, 89, 90, 607, 89, 90, 
	574, 89, 90, 608, 89, 90, 609, 89, 
	610, 90, 89, 557, 90, 89, 90, 611, 
	89, 90, 612, 89, 90, 557, 89, 613, 
	614, 0, 75, 0, 241, 0, 615, 0, 
	1, 0, 616, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 72, 172, 177, 419, 431, 435, 438, 
	444, 523, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 525, 
	30, 31, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 43, 520, 37, 38, 
	39, 40, 41, 42, 29, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 54, 55, 55, 2, 56, 70, 450, 
	462, 477, 481, 501, 513, 517, 57, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 2, 71, 2, 2, 3, 
	13, 15, 29, 32, 35, 72, 172, 177, 
	419, 431, 435, 438, 444, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 88, 89, 
	89, 2, 90, 104, 115, 129, 154, 166, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 2, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	71, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 130, 149, 
	131, 136, 132, 133, 134, 135, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 150, 151, 152, 153, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	165, 167, 168, 169, 170, 171, 173, 174, 
	175, 176, 178, 382, 179, 288, 180, 181, 
	182, 183, 184, 185, 186, 187, 186, 187, 
	187, 2, 188, 202, 203, 225, 239, 243, 
	263, 275, 279, 282, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 2, 71, 204, 211, 221, 205, 206, 
	207, 208, 209, 210, 202, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 222, 223, 
	224, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 235, 236, 237, 238, 240, 241, 
	242, 244, 245, 250, 246, 247, 248, 249, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 264, 265, 266, 267, 
	268, 269, 270, 271, 272, 273, 274, 276, 
	277, 278, 280, 281, 283, 284, 285, 286, 
	287, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 300, 301, 302, 303, 
	304, 305, 306, 307, 308, 309, 308, 309, 
	309, 2, 310, 324, 325, 337, 352, 356, 
	363, 375, 379, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	2, 71, 326, 333, 327, 328, 329, 330, 
	331, 332, 324, 334, 335, 336, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 347, 
	348, 349, 350, 351, 353, 354, 355, 357, 
	358, 359, 360, 361, 362, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 373, 374, 
	376, 377, 378, 380, 381, 383, 384, 385, 
	386, 387, 388, 389, 390, 391, 390, 391, 
	391, 2, 392, 407, 393, 394, 395, 396, 
	397, 398, 399, 400, 401, 402, 403, 404, 
	405, 406, 71, 408, 409, 410, 411, 412, 
	413, 414, 415, 416, 417, 418, 420, 421, 
	422, 423, 424, 425, 426, 427, 428, 429, 
	430, 432, 433, 434, 436, 437, 439, 440, 
	441, 442, 443, 444, 445, 446, 448, 449, 
	447, 445, 446, 447, 445, 448, 449, 3, 
	13, 15, 29, 32, 35, 72, 172, 177, 
	419, 431, 435, 438, 444, 451, 458, 452, 
	453, 454, 455, 456, 457, 70, 459, 460, 
	461, 463, 464, 465, 466, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 478, 
	479, 480, 482, 483, 488, 484, 485, 486, 
	487, 489, 490, 491, 492, 493, 494, 495, 
	496, 497, 498, 499, 500, 502, 503, 504, 
	505, 506, 507, 508, 509, 510, 511, 512, 
	514, 515, 516, 518, 519, 521, 522, 524, 
	0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 31, 126, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 81, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 525;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 931 "js/lib/gherkin/lexer/ca.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */
  
/* line 938 "js/lib/gherkin/lexer/ca.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1165 "js/lib/gherkin/lexer/ca.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1204 "js/lib/gherkin/lexer/ca.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ca.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/ca', [], function() {return Lexer});
}

})();
