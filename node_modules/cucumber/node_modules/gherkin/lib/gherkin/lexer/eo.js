
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */



/* line 11 "js/lib/gherkin/lexer/eo.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	88, 93, 100, 105, 106, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 132, 
	134, 136, 138, 140, 142, 144, 160, 161, 
	162, 163, 164, 165, 166, 178, 180, 182, 
	184, 186, 188, 190, 192, 194, 196, 198, 
	200, 202, 204, 206, 208, 210, 213, 215, 
	217, 219, 221, 223, 225, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 273, 276, 278, 280, 282, 
	284, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 304, 305, 306, 307, 308, 
	309, 321, 323, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 375, 377, 379, 381, 383, 
	385, 387, 390, 392, 394, 396, 398, 400, 
	401, 402, 403, 404, 405, 406, 407, 408, 
	421, 423, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	520, 523, 525, 527, 529, 531, 533, 534, 
	535, 536, 537, 538, 539, 540, 541, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 655, 661, 664, 666, 672, 688, 689, 
	690
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	68, 69, 70, 75, 83, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 111, 32, 110, 105, 116, 97, -60, 
	-75, 111, 107, 122, 101, 109, 112, 108, 
	111, 106, 58, 10, 10, 10, 32, 35, 
	84, 124, 9, 13, 10, 114, 10, 97, 
	10, 106, 10, 116, 10, 111, 10, 58, 
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 9, 13, 
	111, 110, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 68, 75, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 111, 10, 32, 110, 10, 105, 10, 
	116, 10, 97, -60, 10, -75, 10, 10, 
	111, 10, 97, 111, 10, 106, 10, 110, 
	10, 116, 10, 117, 10, 114, 10, 111, 
	10, 32, 10, 100, 10, 101, 10, 32, 
	10, 108, 10, 97, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 111, 10, 58, 10, 99, 
	101, 10, 32, 100, 10, 114, 10, 97, 
	10, 106, 10, 116, 97, 111, 106, 110, 
	116, 117, 114, 111, 32, 100, 101, 32, 
	108, 97, 32, 115, 99, 101, 110, 97, 
	114, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 68, 75, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	111, 10, 32, 110, 10, 105, 10, 116, 
	10, 97, -60, 10, -75, 10, 10, 111, 
	10, 97, 10, 106, 10, 99, 101, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	111, 10, 58, 10, 32, 100, 10, 114, 
	10, 97, 10, 106, 10, 116, 99, 101, 
	101, 110, 97, 114, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 68, 70, 
	75, 83, 84, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 111, 10, 32, 110, 
	10, 105, 10, 116, 10, 97, -60, 10, 
	-75, 10, 10, 111, 10, 111, 10, 110, 
	10, 111, 10, 58, 10, 97, 111, 10, 
	106, 10, 110, 10, 116, 10, 117, 10, 
	114, 10, 111, 10, 32, 10, 100, 10, 
	101, 10, 32, 10, 108, 10, 97, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 99, 101, 
	10, 32, 100, 10, 114, 10, 97, 10, 
	106, 10, 116, 32, 100, 114, 97, 106, 
	116, 111, 58, 10, 10, 10, 32, 35, 
	37, 64, 69, 70, 75, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 107, 10, 
	122, 10, 101, 10, 109, 10, 112, 10, 
	108, 10, 111, 10, 106, 10, 58, 10, 
	111, 10, 110, 10, 111, 10, 111, 10, 
	110, 10, 116, 10, 117, 10, 114, 10, 
	111, 10, 32, 10, 100, 10, 101, 10, 
	32, 10, 108, 10, 97, 10, 32, 10, 
	115, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 114, 10, 97, 10, 
	106, 10, 116, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 9, 13, 
	187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 14, 1, 1, 
	1, 1, 1, 1, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 2, 4, 14, 1, 1, 
	0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	111, 116, 123, 128, 130, 133, 135, 137, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 167, 174, 
	177, 180, 183, 186, 189, 192, 208, 210, 
	212, 214, 216, 218, 220, 232, 235, 238, 
	241, 244, 247, 250, 253, 256, 259, 262, 
	265, 268, 271, 274, 277, 280, 284, 287, 
	290, 293, 296, 299, 302, 306, 309, 312, 
	315, 318, 321, 324, 327, 330, 333, 336, 
	339, 342, 345, 348, 351, 354, 357, 360, 
	363, 366, 369, 373, 377, 380, 383, 386, 
	389, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 450, 453, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 498, 502, 505, 508, 511, 514, 517, 
	520, 523, 526, 530, 533, 536, 539, 542, 
	545, 548, 552, 555, 558, 561, 564, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	596, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 638, 641, 
	644, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	743, 747, 750, 753, 756, 759, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 790, 
	793, 796, 799, 802, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 907, 910, 
	913, 916, 919, 922, 925, 928, 931, 934, 
	937, 941, 947, 951, 954, 960, 976, 978, 
	980
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 0, 55, 57, 58, 56, 0, 
	0, 0, 0, 59, 60, 61, 60, 60, 
	63, 62, 59, 2, 64, 7, 64, 0, 
	65, 0, 54, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 72, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 79, 0, 80, 
	0, 81, 0, 83, 82, 85, 84, 85, 
	86, 87, 88, 87, 86, 84, 85, 89, 
	84, 85, 90, 84, 85, 91, 84, 85, 
	92, 84, 85, 93, 84, 85, 94, 84, 
	96, 95, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 95, 0, 
	109, 0, 110, 0, 111, 0, 112, 0, 
	114, 113, 116, 115, 116, 117, 118, 119, 
	120, 118, 121, 122, 123, 124, 117, 115, 
	116, 125, 115, 116, 126, 115, 116, 127, 
	115, 116, 128, 115, 116, 129, 115, 116, 
	130, 115, 116, 131, 115, 116, 132, 115, 
	116, 133, 115, 116, 134, 115, 116, 135, 
	115, 116, 136, 115, 116, 137, 115, 116, 
	138, 115, 116, 139, 115, 116, 140, 115, 
	116, 139, 141, 115, 116, 142, 115, 116, 
	143, 115, 116, 144, 115, 145, 116, 115, 
	146, 116, 115, 116, 147, 115, 116, 148, 
	149, 115, 116, 147, 115, 116, 150, 115, 
	116, 151, 115, 116, 152, 115, 116, 153, 
	115, 116, 154, 115, 116, 155, 115, 116, 
	156, 115, 116, 157, 115, 116, 158, 115, 
	116, 159, 115, 116, 160, 115, 116, 161, 
	115, 116, 162, 115, 116, 163, 115, 116, 
	164, 115, 116, 165, 115, 116, 166, 115, 
	116, 167, 115, 116, 168, 115, 116, 139, 
	115, 116, 163, 169, 115, 116, 139, 147, 
	115, 116, 170, 115, 116, 171, 115, 116, 
	172, 115, 116, 167, 115, 173, 174, 0, 
	72, 0, 175, 0, 176, 0, 177, 0, 
	178, 0, 179, 0, 180, 0, 181, 0, 
	182, 0, 183, 0, 184, 0, 185, 0, 
	186, 0, 187, 0, 188, 0, 189, 0, 
	190, 0, 191, 0, 192, 0, 193, 0, 
	194, 0, 196, 195, 198, 197, 198, 199, 
	200, 201, 202, 200, 203, 204, 205, 206, 
	199, 197, 198, 207, 197, 198, 208, 197, 
	198, 209, 197, 198, 210, 197, 198, 211, 
	197, 198, 212, 197, 198, 213, 197, 198, 
	214, 197, 198, 215, 197, 198, 216, 197, 
	198, 217, 197, 198, 218, 197, 198, 219, 
	197, 198, 220, 197, 198, 221, 197, 198, 
	222, 197, 198, 221, 223, 197, 198, 224, 
	197, 198, 225, 197, 198, 226, 197, 227, 
	198, 197, 228, 198, 197, 198, 229, 197, 
	198, 230, 197, 198, 229, 197, 198, 231, 
	232, 197, 198, 233, 197, 198, 234, 197, 
	198, 235, 197, 198, 236, 197, 198, 237, 
	197, 198, 221, 197, 198, 221, 229, 197, 
	198, 238, 197, 198, 239, 197, 198, 240, 
	197, 198, 236, 197, 241, 242, 0, 243, 
	0, 244, 0, 245, 0, 246, 0, 247, 
	0, 248, 0, 250, 249, 252, 251, 252, 
	253, 254, 255, 256, 254, 257, 258, 259, 
	260, 261, 253, 251, 252, 262, 251, 252, 
	263, 251, 252, 264, 251, 252, 265, 251, 
	252, 266, 251, 252, 267, 251, 252, 268, 
	251, 252, 269, 251, 252, 270, 251, 252, 
	271, 251, 252, 272, 251, 252, 273, 251, 
	252, 274, 251, 252, 275, 251, 252, 276, 
	251, 252, 277, 251, 252, 276, 278, 251, 
	252, 279, 251, 252, 280, 251, 252, 281, 
	251, 282, 252, 251, 283, 252, 251, 252, 
	284, 251, 252, 285, 251, 252, 286, 251, 
	252, 287, 251, 252, 276, 251, 252, 288, 
	289, 251, 252, 284, 251, 252, 290, 251, 
	252, 291, 251, 252, 292, 251, 252, 293, 
	251, 252, 294, 251, 252, 295, 251, 252, 
	296, 251, 252, 297, 251, 252, 298, 251, 
	252, 299, 251, 252, 300, 251, 252, 301, 
	251, 252, 302, 251, 252, 303, 251, 252, 
	304, 251, 252, 305, 251, 252, 306, 251, 
	252, 286, 251, 252, 303, 307, 251, 252, 
	276, 284, 251, 252, 308, 251, 252, 309, 
	251, 252, 310, 251, 252, 286, 251, 54, 
	72, 0, 311, 0, 312, 0, 313, 0, 
	314, 0, 315, 0, 316, 0, 318, 317, 
	320, 319, 320, 321, 322, 323, 322, 324, 
	325, 326, 327, 328, 321, 319, 320, 329, 
	319, 320, 330, 319, 320, 331, 319, 320, 
	332, 319, 320, 333, 319, 320, 334, 319, 
	320, 335, 319, 320, 336, 319, 320, 337, 
	319, 320, 338, 319, 320, 339, 319, 320, 
	340, 319, 320, 341, 319, 320, 342, 319, 
	320, 343, 319, 320, 344, 319, 320, 345, 
	319, 320, 346, 319, 320, 347, 319, 320, 
	348, 319, 320, 349, 319, 320, 350, 319, 
	320, 351, 319, 320, 352, 319, 320, 353, 
	319, 320, 350, 319, 320, 354, 319, 320, 
	355, 319, 320, 356, 319, 320, 357, 319, 
	320, 358, 319, 320, 359, 319, 320, 360, 
	319, 320, 361, 319, 320, 362, 319, 320, 
	363, 319, 320, 364, 319, 320, 365, 319, 
	320, 366, 319, 320, 367, 319, 320, 368, 
	319, 320, 369, 319, 320, 370, 319, 320, 
	371, 319, 320, 353, 319, 320, 372, 319, 
	320, 373, 319, 320, 374, 319, 320, 353, 
	319, 375, 376, 375, 0, 379, 378, 380, 
	381, 378, 377, 0, 383, 384, 382, 0, 
	383, 382, 379, 385, 383, 384, 385, 382, 
	379, 386, 387, 388, 389, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 386, 0, 
	399, 0, 1, 0, 400, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 43, 62, 120, 182, 246, 304, 310, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 312, 30, 31, 
	31, 2, 14, 33, 34, 2, 33, 32, 
	34, 36, 37, 38, 39, 40, 41, 42, 
	29, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 53, 54, 54, 2, 
	55, 56, 57, 58, 59, 60, 61, 2, 
	2, 3, 13, 15, 29, 32, 35, 43, 
	62, 120, 182, 246, 304, 63, 64, 65, 
	66, 67, 68, 67, 68, 68, 2, 69, 
	83, 84, 92, 114, 116, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 2, 61, 85, 86, 87, 88, 
	89, 90, 91, 83, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 115, 117, 118, 119, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 144, 143, 144, 144, 
	2, 145, 159, 160, 168, 170, 178, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 2, 61, 161, 162, 
	163, 164, 165, 166, 167, 159, 169, 171, 
	177, 172, 173, 174, 175, 176, 179, 180, 
	181, 183, 245, 184, 185, 186, 187, 188, 
	189, 190, 191, 190, 191, 191, 2, 192, 
	206, 207, 215, 219, 239, 241, 193, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 2, 61, 208, 209, 210, 
	211, 212, 213, 214, 206, 216, 217, 218, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 240, 242, 243, 244, 247, 
	248, 249, 250, 251, 252, 253, 254, 253, 
	254, 254, 2, 255, 269, 278, 281, 295, 
	300, 256, 257, 258, 259, 260, 261, 262, 
	263, 264, 265, 266, 267, 268, 2, 270, 
	271, 272, 273, 274, 275, 276, 277, 61, 
	279, 280, 282, 283, 284, 285, 286, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 301, 302, 303, 304, 
	305, 306, 308, 309, 307, 305, 306, 307, 
	305, 308, 309, 3, 13, 15, 29, 32, 
	35, 43, 62, 120, 182, 246, 304, 311, 
	0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 135, 48, 0, 102, 9, 
	5, 45, 130, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	0, 110, 23, 0, 27, 118, 27, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 21, 31, 
	126, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	78, 33, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

const lexer_start = 1;
const lexer_first_final = 312;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 616 "js/lib/gherkin/lexer/eo.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
  
/* line 623 "js/lib/gherkin/lexer/eo.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 850 "js/lib/gherkin/lexer/eo.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 889 "js/lib/gherkin/lexer/eo.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/eo.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/eo', [], function() {return Lexer});
}

})();
