
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_latn.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	94, 99, 106, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 217, 219, 220, 222, 223, 
	225, 226, 227, 228, 229, 230, 231, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 317, 319, 321, 323, 326, 328, 331, 
	333, 335, 337, 339, 341, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 374, 376, 378, 381, 
	383, 385, 386, 387, 388, 389, 390, 391, 
	392, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 474, 476, 479, 481, 483, 485, 487, 
	489, 491, 493, 496, 498, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	523, 525, 529, 531, 533, 535, 537, 539, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 582, 584, 586, 589, 
	591, 593, 594, 595, 596, 598, 599, 601, 
	602, 603, 605, 606, 607, 608, 609, 610, 
	611, 612, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 625, 626, 627, 644, 
	646, 648, 650, 652, 654, 656, 658, 660, 
	662, 664, 666, 668, 670, 672, 674, 676, 
	678, 680, 682, 684, 686, 688, 690, 692, 
	694, 696, 698, 700, 702, 704, 706, 709, 
	711, 714, 716, 719, 721, 723, 725, 727, 
	729, 731, 733, 736, 738, 741, 743, 745, 
	748, 750, 752, 754, 756, 758, 760, 763, 
	765, 767, 769, 771, 773, 775, 777, 781, 
	783, 785, 787, 789, 791, 793, 795, 797, 
	799, 801, 803, 805, 807, 809, 811, 813, 
	815, 817, 819, 821, 823, 825, 827, 829, 
	831, 834, 836, 838, 841, 843, 845, 846, 
	847, 848, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 894, 896, 898, 900, 
	902, 904, 906, 908, 911, 912, 913, 914, 
	915, 916, 918, 919, 920, 921, 922, 923, 
	924, 925, 926, 927, 928, 929, 930, 931, 
	932, 933, 934, 935, 936, 937, 938, 939, 
	940, 942, 943, 944, 946, 947, 948, 952, 
	958, 961, 963, 969, 988, 990, 992, 995, 
	997, 999, 1001, 1003, 1005, 1007, 1009, 1012, 
	1014, 1016, 1019, 1021, 1023, 1025, 1027, 1029, 
	1031, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1048, 1051, 1055, 1057, 1059, 1061, 1063, 1065, 
	1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 
	1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 
	1100, 1102, 1104, 1106, 1107, 1108
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 73, 75, 77, 
	79, 80, 83, 90, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	105, 117, 110, 107, 99, 105, 111, 110, 
	97, 108, 110, 111, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 64, 70, 75, 
	77, 79, 80, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 65, 70, 73, 
	75, 77, 79, 80, 83, 90, 124, 9, 
	13, 97, 111, 100, 32, 97, 110, 99, 
	116, 101, 112, 116, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 70, 73, 
	75, 77, 79, 80, 83, 90, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 108, 
	10, 105, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 97, 
	10, 100, 10, 32, 97, 10, 111, 10, 
	103, 10, 117, -60, 10, 99, -121, 10, 
	10, 110, 115, 10, 100, 10, 97, 10, 
	111, 10, 98, 10, 105, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 109, 10, 
	101, 10, 114, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 97, 10, 100, 116, 10, 97, 
	10, 116, 10, 101, 111, 10, 97, 10, 
	116, 101, 107, 115, 116, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	97, 111, 10, 100, 10, 32, 97, 10, 
	110, 10, 99, 10, 101, 10, 112, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 115, 10, 100, 10, 
	97, 10, 111, 10, 98, 10, 105, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 114, 10, 99, 107, 
	116, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 105, 10, 
	99, 10, 114, 10, 117, 10, 107, 10, 
	116, 10, 117, 10, 114, 10, 97, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	106, 10, 97, 10, 100, 116, 10, 97, 
	10, 116, 10, 101, 111, 10, 97, 10, 
	116, 111, 103, 117, -60, 99, -121, 110, 
	115, 100, 97, 110, 111, 111, 118, 97, 
	98, 105, 110, 97, 111, 114, 122, 97, 
	100, 105, 110, 105, 109, 101, 114, 58, 
	105, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 70, 73, 75, 77, 79, 80, 
	83, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 10, 105, 10, 117, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 110, 10, 111, 10, 115, 10, 116, 
	10, 58, 10, 97, 111, 10, 100, 10, 
	32, 97, 10, 110, 10, 99, 116, 10, 
	101, 10, 112, 10, 101, 10, 107, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 115, 10, 100, 10, 
	97, 10, 110, 111, 10, 111, 10, 118, 
	10, 97, 10, 98, 10, 105, 10, 110, 
	10, 111, 114, 10, 122, 10, 97, 10, 
	100, 10, 105, 10, 109, 10, 101, 10, 
	114, 10, 99, 107, 116, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 105, 10, 99, 10, 114, 10, 
	117, 10, 107, 10, 116, 10, 117, 10, 
	114, 10, 97, 10, 32, 10, 115, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 97, 10, 
	100, 116, 10, 97, 10, 116, 10, 101, 
	111, 10, 97, 10, 116, 58, 10, 10, 
	10, 32, 35, 70, 77, 79, 124, 9, 
	13, 10, 117, 10, 110, 10, 107, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 110, 10, 111, 10, 
	115, 10, 116, 10, 58, 10, 111, 10, 
	103, 10, 117, -60, 10, 99, -121, 10, 
	10, 115, 10, 111, 10, 98, 10, 105, 
	10, 110, 10, 97, 99, 107, 116, 101, 
	110, 97, 114, 105, 106, 111, 105, 58, 
	105, 99, 97, 114, 117, 107, 116, 117, 
	114, 97, 32, 115, 99, 101, 110, 97, 
	114, 105, 106, 97, 100, 116, 97, 116, 
	101, 111, 97, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 70, 73, 75, 77, 79, 80, 83, 
	90, 124, 9, 13, 10, 111, 10, 110, 
	10, 99, 116, 10, 101, 10, 112, 10, 
	101, 10, 107, 10, 111, 10, 103, 10, 
	117, -60, 10, 99, -121, 10, 10, 115, 
	10, 110, 111, 10, 111, 10, 118, 10, 
	97, 10, 98, 10, 105, 10, 110, 10, 
	111, 114, 10, 122, 10, 97, 10, 100, 
	10, 105, 10, 109, 10, 101, 10, 114, 
	10, 58, 105, 10, 99, 107, 116, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 106, 111, 10, 105, 10, 105, 
	10, 99, 10, 114, 10, 117, 10, 107, 
	10, 116, 10, 117, 10, 114, 10, 97, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 106, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 11, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 2, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 2, 1, 2, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 1, 1, 
	1, 7, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 3, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 2, 1, 1, 2, 4, 
	3, 2, 4, 17, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	3, 4, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	117, 122, 129, 134, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 183, 186, 
	189, 192, 195, 198, 201, 204, 207, 210, 
	213, 216, 219, 222, 225, 228, 231, 234, 
	237, 240, 243, 246, 249, 252, 255, 258, 
	261, 264, 267, 286, 289, 291, 294, 296, 
	299, 301, 303, 305, 307, 309, 311, 328, 
	331, 334, 337, 340, 343, 346, 349, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 382, 385, 388, 391, 394, 397, 400, 
	403, 406, 409, 412, 415, 418, 421, 424, 
	427, 431, 434, 437, 440, 444, 447, 451, 
	454, 457, 460, 463, 466, 469, 472, 475, 
	478, 481, 484, 487, 490, 493, 496, 499, 
	502, 505, 508, 511, 515, 518, 521, 525, 
	528, 531, 533, 535, 537, 539, 541, 543, 
	545, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 595, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 628, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 659, 662, 666, 669, 672, 675, 678, 
	681, 684, 687, 691, 694, 698, 701, 704, 
	707, 710, 713, 716, 719, 722, 725, 728, 
	731, 734, 739, 742, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 772, 775, 778, 
	781, 784, 787, 790, 793, 796, 799, 802, 
	805, 808, 811, 814, 818, 821, 824, 828, 
	831, 834, 836, 838, 840, 843, 845, 848, 
	850, 852, 855, 857, 859, 861, 863, 865, 
	867, 869, 872, 874, 876, 878, 880, 882, 
	884, 886, 888, 890, 893, 895, 897, 914, 
	917, 920, 923, 926, 929, 932, 935, 938, 
	941, 944, 947, 950, 953, 956, 959, 962, 
	965, 968, 971, 974, 977, 980, 983, 986, 
	989, 992, 995, 998, 1001, 1004, 1007, 1011, 
	1014, 1018, 1021, 1025, 1028, 1031, 1034, 1037, 
	1040, 1043, 1046, 1050, 1053, 1057, 1060, 1063, 
	1067, 1070, 1073, 1076, 1079, 1082, 1085, 1089, 
	1092, 1095, 1098, 1101, 1104, 1107, 1110, 1115, 
	1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 
	1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 
	1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 
	1190, 1194, 1197, 1200, 1204, 1207, 1210, 1212, 
	1214, 1216, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 
	1267, 1270, 1273, 1276, 1280, 1283, 1286, 1289, 
	1292, 1295, 1298, 1301, 1305, 1307, 1309, 1311, 
	1313, 1315, 1318, 1320, 1322, 1324, 1326, 1328, 
	1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 
	1346, 1348, 1350, 1352, 1354, 1356, 1358, 1360, 
	1362, 1365, 1367, 1369, 1372, 1374, 1376, 1380, 
	1386, 1390, 1393, 1399, 1418, 1421, 1424, 1428, 
	1431, 1434, 1437, 1440, 1443, 1446, 1449, 1453, 
	1456, 1459, 1463, 1466, 1469, 1472, 1475, 1478, 
	1481, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1506, 1510, 1515, 1518, 1521, 1524, 1527, 1530, 
	1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 
	1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 
	1582, 1585, 1588, 1591, 1593, 1595
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 6, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 6, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	0, 57, 59, 60, 58, 0, 0, 0, 
	0, 61, 62, 63, 62, 62, 65, 64, 
	61, 2, 66, 7, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	72, 0, 73, 0, 74, 0, 75, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	80, 0, 81, 0, 82, 0, 84, 83, 
	86, 85, 86, 87, 88, 89, 88, 90, 
	91, 92, 93, 94, 95, 87, 85, 86, 
	96, 85, 86, 97, 85, 86, 98, 85, 
	86, 99, 85, 86, 100, 85, 86, 101, 
	85, 86, 102, 85, 86, 103, 85, 86, 
	104, 85, 86, 105, 85, 86, 106, 85, 
	86, 107, 85, 86, 108, 85, 86, 109, 
	85, 86, 110, 85, 86, 111, 85, 86, 
	112, 85, 86, 113, 85, 86, 114, 85, 
	86, 115, 85, 86, 116, 85, 86, 117, 
	85, 86, 118, 85, 86, 119, 85, 86, 
	120, 85, 86, 121, 85, 86, 122, 85, 
	86, 123, 85, 125, 124, 126, 127, 128, 
	129, 130, 131, 132, 129, 133, 134, 135, 
	136, 137, 138, 139, 124, 0, 140, 141, 
	0, 142, 0, 56, 68, 0, 143, 0, 
	144, 145, 0, 146, 0, 147, 0, 148, 
	0, 149, 0, 151, 150, 153, 152, 153, 
	154, 155, 156, 157, 155, 158, 159, 157, 
	160, 161, 162, 163, 164, 165, 154, 152, 
	153, 166, 152, 153, 167, 152, 153, 168, 
	152, 153, 169, 152, 153, 170, 152, 153, 
	171, 152, 153, 172, 152, 153, 173, 152, 
	153, 174, 152, 153, 175, 152, 153, 176, 
	152, 153, 177, 152, 153, 178, 152, 153, 
	179, 152, 153, 180, 152, 153, 181, 152, 
	153, 182, 152, 153, 183, 152, 153, 184, 
	152, 153, 185, 152, 153, 186, 152, 153, 
	187, 152, 153, 188, 152, 153, 189, 152, 
	153, 190, 152, 153, 191, 152, 153, 192, 
	152, 153, 193, 152, 153, 194, 152, 153, 
	195, 152, 153, 180, 152, 153, 196, 152, 
	153, 197, 152, 153, 180, 182, 152, 153, 
	198, 152, 153, 199, 152, 153, 200, 152, 
	201, 153, 191, 152, 191, 153, 152, 153, 
	202, 203, 152, 153, 204, 152, 153, 182, 
	152, 153, 205, 152, 153, 206, 152, 153, 
	207, 152, 153, 208, 152, 153, 195, 152, 
	153, 209, 152, 153, 210, 152, 153, 211, 
	152, 153, 212, 152, 153, 195, 152, 153, 
	213, 152, 153, 214, 152, 153, 215, 152, 
	153, 216, 152, 153, 217, 152, 153, 218, 
	152, 153, 195, 152, 153, 219, 152, 153, 
	220, 221, 152, 153, 222, 152, 153, 223, 
	152, 153, 182, 182, 152, 153, 224, 152, 
	153, 181, 152, 225, 0, 226, 0, 227, 
	0, 228, 0, 229, 0, 231, 230, 233, 
	232, 233, 234, 235, 236, 237, 235, 238, 
	239, 237, 240, 241, 242, 243, 244, 245, 
	234, 232, 233, 246, 232, 233, 247, 232, 
	233, 248, 232, 233, 249, 232, 233, 250, 
	232, 233, 251, 232, 233, 252, 232, 233, 
	253, 232, 233, 254, 232, 233, 255, 232, 
	233, 256, 232, 233, 257, 232, 233, 258, 
	232, 233, 259, 232, 233, 260, 232, 233, 
	261, 232, 233, 262, 232, 233, 263, 232, 
	233, 264, 232, 233, 265, 232, 233, 266, 
	232, 233, 267, 232, 233, 268, 232, 233, 
	269, 232, 233, 270, 232, 233, 271, 232, 
	233, 272, 232, 233, 273, 232, 233, 274, 
	232, 233, 275, 232, 233, 260, 232, 233, 
	276, 277, 232, 233, 278, 232, 233, 260, 
	262, 232, 233, 279, 232, 233, 280, 232, 
	233, 281, 232, 233, 274, 232, 233, 282, 
	232, 233, 283, 232, 233, 284, 232, 285, 
	233, 271, 232, 271, 233, 232, 233, 286, 
	287, 232, 233, 288, 232, 233, 262, 232, 
	233, 289, 232, 233, 290, 232, 233, 291, 
	232, 233, 292, 232, 233, 275, 232, 233, 
	293, 232, 233, 294, 232, 233, 295, 232, 
	233, 296, 232, 233, 275, 232, 233, 297, 
	298, 299, 232, 233, 300, 232, 233, 301, 
	232, 233, 302, 232, 233, 303, 232, 233, 
	304, 232, 233, 275, 232, 233, 305, 232, 
	233, 292, 232, 233, 306, 232, 233, 307, 
	232, 233, 308, 232, 233, 309, 232, 233, 
	310, 232, 233, 311, 232, 233, 312, 232, 
	233, 313, 232, 233, 314, 232, 233, 315, 
	232, 233, 316, 232, 233, 317, 232, 233, 
	318, 232, 233, 319, 232, 233, 320, 232, 
	233, 292, 232, 233, 321, 232, 233, 322, 
	323, 232, 233, 324, 232, 233, 325, 232, 
	233, 262, 262, 232, 233, 326, 232, 233, 
	261, 232, 327, 0, 328, 0, 329, 0, 
	330, 77, 0, 77, 0, 331, 332, 0, 
	333, 0, 68, 0, 334, 335, 0, 336, 
	0, 337, 0, 228, 0, 338, 0, 339, 
	0, 340, 0, 81, 0, 341, 342, 0, 
	343, 0, 344, 0, 345, 0, 346, 0, 
	337, 0, 347, 0, 348, 0, 349, 0, 
	350, 0, 351, 352, 0, 354, 353, 356, 
	355, 356, 357, 358, 359, 360, 358, 361, 
	362, 360, 363, 364, 365, 366, 367, 368, 
	357, 355, 356, 369, 355, 356, 370, 355, 
	356, 371, 355, 356, 372, 355, 356, 373, 
	355, 356, 374, 355, 356, 375, 355, 356, 
	376, 355, 356, 377, 355, 356, 378, 355, 
	356, 379, 355, 356, 380, 355, 356, 381, 
	355, 356, 382, 355, 356, 383, 355, 356, 
	384, 355, 356, 385, 355, 356, 386, 355, 
	356, 387, 355, 356, 388, 355, 356, 389, 
	355, 356, 390, 355, 356, 391, 355, 356, 
	392, 355, 356, 393, 355, 356, 394, 355, 
	356, 395, 355, 356, 396, 355, 356, 397, 
	355, 356, 398, 355, 356, 383, 355, 356, 
	399, 400, 355, 356, 401, 355, 356, 383, 
	385, 355, 356, 402, 355, 356, 403, 404, 
	355, 356, 405, 355, 356, 397, 355, 356, 
	406, 355, 356, 396, 355, 356, 407, 355, 
	356, 408, 355, 356, 409, 355, 410, 356, 
	394, 355, 394, 356, 355, 356, 411, 412, 
	355, 356, 413, 355, 356, 385, 355, 356, 
	414, 415, 355, 356, 416, 355, 356, 417, 
	355, 356, 398, 355, 356, 418, 355, 356, 
	419, 355, 356, 417, 355, 356, 420, 421, 
	355, 356, 422, 355, 356, 423, 355, 356, 
	418, 355, 356, 424, 355, 356, 425, 355, 
	356, 426, 355, 356, 398, 355, 356, 427, 
	428, 429, 355, 356, 430, 355, 356, 431, 
	355, 356, 432, 355, 356, 433, 355, 356, 
	434, 355, 356, 398, 355, 356, 435, 355, 
	356, 417, 355, 356, 436, 355, 356, 437, 
	355, 356, 438, 355, 356, 439, 355, 356, 
	440, 355, 356, 441, 355, 356, 442, 355, 
	356, 443, 355, 356, 444, 355, 356, 445, 
	355, 356, 446, 355, 356, 447, 355, 356, 
	448, 355, 356, 449, 355, 356, 450, 355, 
	356, 417, 355, 356, 451, 355, 356, 452, 
	453, 355, 356, 454, 355, 356, 455, 355, 
	356, 385, 385, 355, 356, 456, 355, 356, 
	384, 355, 457, 0, 459, 458, 461, 460, 
	461, 462, 463, 464, 465, 466, 463, 462, 
	460, 461, 467, 460, 461, 468, 460, 461, 
	469, 460, 461, 470, 460, 461, 471, 460, 
	461, 472, 460, 461, 473, 460, 461, 474, 
	460, 461, 475, 460, 461, 476, 460, 461, 
	477, 460, 461, 478, 460, 461, 479, 460, 
	461, 480, 460, 461, 481, 460, 461, 482, 
	460, 461, 483, 460, 484, 461, 475, 460, 
	475, 461, 460, 461, 485, 460, 461, 486, 
	460, 461, 487, 460, 461, 488, 460, 461, 
	489, 460, 461, 479, 460, 490, 491, 492, 
	0, 493, 0, 494, 0, 495, 0, 496, 
	0, 497, 0, 498, 499, 0, 352, 0, 
	351, 0, 500, 0, 501, 0, 148, 0, 
	502, 0, 503, 0, 504, 0, 505, 0, 
	506, 0, 507, 0, 508, 0, 509, 0, 
	510, 0, 511, 0, 512, 0, 513, 0, 
	514, 0, 515, 0, 516, 0, 501, 0, 
	517, 0, 518, 519, 0, 520, 0, 521, 
	0, 68, 68, 0, 522, 0, 67, 0, 
	523, 524, 523, 0, 527, 526, 528, 529, 
	526, 525, 0, 531, 532, 530, 0, 531, 
	530, 527, 533, 531, 532, 533, 530, 527, 
	534, 535, 536, 537, 538, 539, 540, 541, 
	538, 542, 543, 544, 545, 546, 547, 548, 
	534, 0, 86, 549, 85, 86, 550, 85, 
	86, 551, 552, 85, 86, 553, 85, 86, 
	121, 85, 86, 554, 85, 86, 120, 85, 
	86, 555, 85, 86, 556, 85, 86, 557, 
	85, 558, 86, 118, 85, 118, 86, 85, 
	86, 559, 85, 86, 560, 561, 85, 86, 
	562, 85, 86, 563, 85, 86, 122, 85, 
	86, 564, 85, 86, 565, 85, 86, 563, 
	85, 86, 566, 567, 85, 86, 568, 85, 
	86, 569, 85, 86, 564, 85, 86, 570, 
	85, 86, 571, 85, 86, 572, 85, 86, 
	573, 85, 86, 123, 122, 85, 86, 574, 
	575, 576, 85, 86, 577, 85, 86, 578, 
	85, 86, 579, 85, 86, 580, 85, 86, 
	581, 85, 86, 582, 122, 85, 86, 122, 
	85, 86, 583, 85, 86, 563, 85, 86, 
	584, 85, 86, 585, 85, 86, 586, 85, 
	86, 587, 85, 86, 588, 85, 86, 589, 
	85, 86, 590, 85, 86, 591, 85, 86, 
	592, 85, 86, 593, 85, 86, 594, 85, 
	86, 595, 85, 86, 596, 85, 86, 597, 
	85, 86, 598, 85, 86, 563, 85, 599, 
	0, 1, 0, 600, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 83, 257, 262, 273, 411, 439, 
	446, 507, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 509, 
	30, 31, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 29, 38, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 52, 53, 53, 
	2, 54, 68, 452, 459, 464, 472, 481, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 2, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 2, 2, 3, 13, 
	15, 29, 32, 35, 37, 83, 257, 262, 
	273, 411, 439, 446, 84, 86, 85, 87, 
	88, 161, 89, 90, 91, 92, 93, 94, 
	93, 94, 94, 2, 95, 109, 110, 112, 
	126, 129, 134, 142, 147, 154, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 2, 82, 111, 109, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 127, 128, 130, 131, 
	132, 133, 135, 137, 136, 138, 139, 140, 
	141, 143, 144, 145, 146, 148, 149, 150, 
	151, 152, 153, 155, 156, 159, 157, 158, 
	160, 162, 163, 164, 165, 166, 167, 168, 
	167, 168, 168, 2, 169, 183, 184, 186, 
	200, 207, 212, 220, 225, 250, 170, 171, 
	172, 173, 174, 175, 176, 177, 178, 179, 
	180, 181, 182, 2, 82, 185, 183, 187, 
	188, 189, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 201, 203, 202, 204, 
	205, 206, 208, 209, 210, 211, 213, 215, 
	214, 216, 217, 218, 219, 221, 222, 223, 
	224, 226, 232, 234, 227, 228, 229, 230, 
	231, 233, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 246, 247, 248, 
	249, 251, 252, 255, 253, 254, 256, 258, 
	259, 260, 261, 263, 265, 264, 266, 269, 
	267, 268, 270, 271, 272, 274, 279, 275, 
	276, 277, 278, 280, 281, 282, 283, 284, 
	382, 285, 286, 285, 286, 286, 2, 287, 
	301, 302, 304, 318, 327, 332, 342, 350, 
	375, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 2, 82, 
	303, 301, 305, 306, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 317, 319, 
	321, 320, 322, 323, 325, 324, 326, 328, 
	329, 330, 331, 333, 335, 334, 336, 339, 
	337, 338, 340, 341, 343, 346, 344, 345, 
	347, 348, 349, 351, 357, 359, 352, 353, 
	354, 355, 356, 358, 360, 361, 362, 363, 
	364, 365, 366, 367, 368, 369, 370, 371, 
	372, 373, 374, 376, 377, 380, 378, 379, 
	381, 383, 384, 385, 384, 385, 385, 2, 
	386, 400, 405, 387, 388, 389, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	82, 401, 402, 403, 404, 406, 407, 408, 
	409, 410, 412, 420, 423, 413, 414, 415, 
	416, 417, 418, 419, 421, 422, 424, 425, 
	426, 427, 428, 429, 430, 431, 432, 433, 
	434, 435, 436, 437, 438, 440, 441, 444, 
	442, 443, 445, 446, 447, 448, 450, 451, 
	449, 447, 448, 449, 447, 450, 451, 3, 
	13, 15, 29, 32, 35, 37, 83, 257, 
	262, 273, 411, 439, 446, 453, 454, 455, 
	457, 456, 458, 460, 461, 462, 463, 465, 
	466, 469, 467, 468, 470, 471, 473, 476, 
	474, 475, 477, 478, 479, 480, 482, 489, 
	491, 483, 484, 485, 486, 487, 488, 490, 
	492, 493, 494, 495, 496, 497, 498, 499, 
	500, 501, 502, 503, 504, 505, 506, 508, 
	0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 31, 126, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 509;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 915 "js/lib/gherkin/lexer/sr_latn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
  
/* line 922 "js/lib/gherkin/lexer/sr_latn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1149 "js/lib/gherkin/lexer/sr_latn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1188 "js/lib/gherkin/lexer/sr_latn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_latn.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/sr_latn', [], function() {return Lexer});
}

})();
