
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/lt.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	92, 97, 104, 109, 110, 111, 112, 113, 
	114, 115, 116, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 212, 214, 
	216, 218, 220, 222, 224, 226, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 283, 285, 287, 289, 291, 293, 295, 
	297, 299, 301, 303, 305, 307, 309, 311, 
	313, 315, 318, 320, 322, 324, 326, 328, 
	330, 332, 334, 336, 338, 340, 343, 346, 
	348, 350, 352, 354, 356, 358, 360, 362, 
	364, 366, 368, 370, 372, 374, 376, 377, 
	378, 379, 380, 381, 382, 384, 386, 387, 
	388, 389, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 400, 414, 416, 418, 
	420, 422, 424, 426, 428, 430, 432, 434, 
	436, 438, 440, 442, 444, 446, 448, 450, 
	452, 454, 456, 458, 460, 462, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 498, 
	499, 500, 501, 515, 517, 519, 521, 523, 
	525, 527, 529, 531, 533, 535, 537, 539, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 582, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 635, 636, 
	637, 638, 639, 640, 641, 642, 646, 652, 
	655, 657, 663, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 720, 722, 
	724, 726, 729, 731, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 758, 759
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	68, 73, 75, 80, 83, 84, 86, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 66, 68, 73, 75, 80, 83, 
	84, 86, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 101, 116, 117, 
	111, 116, 97, 114, 97, 111, 105, 110, 
	116, 101, 107, 115, 116, 97, 115, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 68, 73, 75, 83, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	34, 35, 37, 42, 64, 66, 68, 73, 
	75, 80, 83, 84, 86, 124, 9, 13, 
	97, 118, 121, 122, 100, -59, -66, 105, 
	97, 105, 58, 10, 10, 10, 32, 35, 
	83, 124, 9, 13, 10, 97, 10, 118, 
	10, 121, 10, 98, -60, 10, -105, 10, 
	10, 58, 97, 99, 118, 121, 98, -60, 
	-105, 58, 10, 10, 10, 32, 35, 37, 
	64, 75, 80, 83, 86, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 111, 10, 110, 10, 
	116, 10, 101, 10, 107, 10, 115, 10, 
	116, 10, 97, 10, 115, 10, 58, 10, 
	97, 10, 118, 10, 121, 10, 122, 10, 
	100, -59, 10, -66, 10, 10, 105, 10, 
	97, 10, 105, 10, 97, 99, 10, 118, 
	10, 121, 10, 98, -60, 10, -105, 10, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 106, 10, 97, 117, 10, 
	105, 117, 10, 115, 10, 32, -59, 10, 
	-95, 10, 10, 97, 10, 98, 10, 108, 
	10, 111, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 97, 10, 110, 10, 116, 
	101, 110, 97, 114, 105, 106, 97, 117, 
	105, 117, 115, 32, -59, -95, 97, 98, 
	108, 111, 110, 97, 115, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 66, 68, 
	73, 75, 83, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 101, 10, 116, 
	10, 117, 10, 111, 10, 116, 10, 97, 
	10, 114, 10, 97, 10, 105, 10, 97, 
	99, 10, 118, 10, 121, 10, 98, -60, 
	10, -105, 10, 10, 58, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	106, 10, 117, 10, 115, 10, 97, 10, 
	100, 115, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 66, 68, 73, 75, 83, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 101, 10, 116, 10, 117, 10, 
	111, 10, 116, 10, 97, 10, 114, 10, 
	97, 111, 10, 105, 10, 110, 10, 116, 
	10, 101, 10, 107, 10, 115, 10, 116, 
	10, 97, 10, 115, 10, 58, 10, 97, 
	99, 10, 118, 10, 121, 10, 98, -60, 
	10, -105, 10, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 106, 10, 
	97, 117, 10, 117, 10, 115, 10, 32, 
	-59, 10, -95, 10, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 97, 
	10, 100, 97, 100, 97, 114, 105, 97, 
	110, 116, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 66, 68, 
	73, 75, 80, 83, 84, 86, 124, 9, 
	13, 10, 101, 10, 116, 10, 117, 10, 
	111, 10, 116, 10, 97, 10, 114, 10, 
	97, 10, 105, 10, 97, 99, 10, 118, 
	10, 121, 10, 98, -60, 10, -105, 10, 
	10, 58, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 106, 10, 97, 
	117, 10, 117, 10, 115, 10, 32, -59, 
	10, -95, 10, 10, 97, 10, 98, 10, 
	108, 10, 111, 10, 110, 10, 97, 10, 
	115, 10, 97, 10, 100, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 16, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 16, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	115, 120, 127, 132, 134, 136, 138, 140, 
	142, 144, 146, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 173, 
	187, 190, 193, 196, 199, 202, 205, 208, 
	211, 214, 217, 220, 223, 226, 229, 232, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 283, 286, 
	289, 292, 295, 298, 301, 304, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 334, 
	337, 340, 343, 346, 349, 352, 355, 358, 
	361, 364, 367, 370, 373, 376, 379, 382, 
	385, 388, 391, 394, 397, 400, 403, 406, 
	409, 412, 415, 418, 421, 424, 427, 430, 
	433, 436, 440, 443, 446, 449, 452, 455, 
	458, 461, 464, 467, 470, 473, 477, 481, 
	484, 487, 490, 493, 496, 499, 502, 505, 
	508, 511, 514, 517, 520, 523, 526, 528, 
	530, 532, 534, 536, 538, 541, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	564, 566, 568, 570, 572, 586, 589, 592, 
	595, 598, 601, 604, 607, 610, 613, 616, 
	619, 622, 625, 628, 631, 634, 637, 640, 
	643, 646, 649, 652, 655, 658, 662, 665, 
	668, 671, 674, 677, 680, 683, 686, 689, 
	692, 695, 698, 701, 704, 707, 710, 712, 
	714, 716, 718, 732, 735, 738, 741, 744, 
	747, 750, 753, 756, 759, 762, 765, 768, 
	771, 774, 777, 780, 783, 786, 789, 792, 
	795, 798, 802, 805, 808, 811, 814, 817, 
	820, 823, 826, 829, 832, 836, 839, 842, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 873, 876, 879, 882, 885, 888, 891, 
	894, 897, 900, 903, 906, 909, 911, 913, 
	915, 917, 919, 921, 923, 925, 929, 935, 
	939, 942, 948, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 
	1030, 1033, 1037, 1040, 1043, 1046, 1049, 1052, 
	1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1081, 1083
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 0, 57, 
	59, 60, 58, 0, 0, 0, 0, 61, 
	62, 63, 62, 62, 65, 64, 61, 2, 
	66, 7, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 68, 0, 
	68, 0, 72, 73, 0, 68, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 84, 83, 86, 85, 86, 87, 88, 
	89, 90, 88, 91, 92, 93, 94, 95, 
	96, 87, 85, 86, 97, 85, 86, 98, 
	85, 86, 99, 85, 86, 100, 85, 86, 
	101, 85, 86, 102, 85, 86, 103, 85, 
	86, 104, 85, 86, 105, 85, 86, 106, 
	85, 86, 107, 85, 86, 108, 85, 86, 
	109, 85, 86, 110, 85, 86, 111, 85, 
	113, 112, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	112, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	140, 139, 142, 141, 142, 143, 144, 145, 
	144, 143, 141, 142, 146, 141, 142, 147, 
	141, 142, 148, 141, 142, 149, 141, 150, 
	142, 141, 151, 142, 141, 142, 152, 141, 
	153, 154, 0, 155, 0, 156, 0, 157, 
	0, 158, 0, 159, 0, 160, 0, 162, 
	161, 164, 163, 164, 165, 166, 167, 166, 
	168, 169, 170, 171, 165, 163, 164, 172, 
	163, 164, 173, 163, 164, 174, 163, 164, 
	175, 163, 164, 176, 163, 164, 177, 163, 
	164, 178, 163, 164, 179, 163, 164, 180, 
	163, 164, 181, 163, 164, 182, 163, 164, 
	183, 163, 164, 184, 163, 164, 185, 163, 
	164, 186, 163, 164, 187, 163, 164, 188, 
	163, 164, 189, 163, 164, 190, 163, 164, 
	191, 163, 164, 192, 163, 164, 193, 163, 
	164, 194, 163, 164, 195, 163, 164, 196, 
	163, 164, 197, 163, 164, 198, 163, 164, 
	199, 163, 164, 200, 163, 201, 164, 163, 
	202, 164, 163, 164, 203, 163, 164, 204, 
	163, 164, 194, 163, 164, 205, 206, 163, 
	164, 207, 163, 164, 208, 163, 164, 209, 
	163, 210, 164, 163, 194, 164, 163, 164, 
	211, 163, 164, 212, 163, 164, 213, 163, 
	164, 214, 163, 164, 215, 163, 164, 216, 
	163, 164, 217, 193, 163, 164, 194, 218, 
	163, 164, 219, 163, 164, 220, 163, 221, 
	164, 163, 222, 164, 163, 164, 223, 163, 
	164, 224, 163, 164, 225, 163, 164, 226, 
	163, 164, 192, 163, 164, 227, 163, 164, 
	228, 163, 164, 229, 163, 164, 230, 163, 
	164, 231, 163, 164, 203, 163, 232, 0, 
	233, 0, 234, 0, 235, 0, 236, 0, 
	237, 0, 238, 239, 0, 137, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 250, 0, 251, 0, 252, 0, 
	254, 253, 256, 255, 256, 257, 258, 259, 
	260, 258, 261, 262, 263, 264, 265, 266, 
	257, 255, 256, 267, 255, 256, 268, 255, 
	256, 269, 255, 256, 270, 255, 256, 271, 
	255, 256, 272, 255, 256, 273, 255, 256, 
	274, 255, 256, 275, 255, 256, 276, 255, 
	256, 277, 255, 256, 278, 255, 256, 279, 
	255, 256, 280, 255, 256, 281, 255, 256, 
	282, 255, 256, 283, 255, 256, 284, 255, 
	256, 285, 255, 256, 286, 255, 256, 283, 
	255, 256, 283, 255, 256, 287, 255, 256, 
	283, 255, 256, 288, 289, 255, 256, 290, 
	255, 256, 291, 255, 256, 292, 255, 293, 
	256, 255, 294, 256, 255, 256, 281, 255, 
	256, 295, 255, 256, 296, 255, 256, 297, 
	255, 256, 298, 255, 256, 299, 255, 256, 
	300, 255, 256, 301, 255, 256, 294, 255, 
	256, 302, 255, 256, 286, 255, 303, 0, 
	304, 0, 306, 305, 308, 307, 308, 309, 
	310, 311, 312, 310, 313, 314, 315, 316, 
	317, 318, 309, 307, 308, 319, 307, 308, 
	320, 307, 308, 321, 307, 308, 322, 307, 
	308, 323, 307, 308, 324, 307, 308, 325, 
	307, 308, 326, 307, 308, 327, 307, 308, 
	328, 307, 308, 329, 307, 308, 330, 307, 
	308, 331, 307, 308, 332, 307, 308, 333, 
	307, 308, 334, 307, 308, 335, 307, 308, 
	336, 307, 308, 337, 307, 308, 338, 307, 
	308, 335, 307, 308, 335, 307, 308, 339, 
	340, 307, 308, 335, 307, 308, 341, 307, 
	308, 342, 307, 308, 343, 307, 308, 344, 
	307, 308, 345, 307, 308, 346, 307, 308, 
	347, 307, 308, 348, 307, 308, 333, 307, 
	308, 349, 350, 307, 308, 351, 307, 308, 
	352, 307, 308, 353, 307, 354, 308, 307, 
	348, 308, 307, 308, 355, 307, 308, 356, 
	307, 308, 357, 307, 308, 358, 307, 308, 
	359, 307, 308, 360, 307, 308, 361, 347, 
	307, 308, 362, 307, 308, 363, 307, 308, 
	364, 307, 365, 308, 307, 366, 308, 307, 
	308, 367, 307, 308, 368, 307, 308, 369, 
	307, 308, 370, 307, 308, 346, 307, 308, 
	371, 307, 308, 338, 307, 372, 0, 71, 
	0, 373, 0, 374, 0, 375, 0, 376, 
	0, 377, 0, 135, 0, 378, 379, 378, 
	0, 382, 381, 383, 384, 381, 380, 0, 
	386, 387, 385, 0, 386, 385, 382, 388, 
	386, 387, 388, 385, 382, 389, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 389, 0, 86, 404, 
	85, 86, 405, 85, 86, 406, 85, 86, 
	407, 85, 86, 408, 85, 86, 405, 85, 
	86, 405, 85, 86, 409, 85, 86, 405, 
	85, 86, 410, 411, 85, 86, 412, 85, 
	86, 413, 85, 86, 414, 85, 415, 86, 
	85, 416, 86, 85, 86, 111, 85, 86, 
	417, 85, 86, 418, 85, 86, 419, 85, 
	86, 420, 85, 86, 421, 85, 86, 422, 
	85, 86, 423, 424, 85, 86, 425, 85, 
	86, 426, 85, 86, 427, 85, 428, 86, 
	85, 429, 86, 85, 86, 430, 85, 86, 
	431, 85, 86, 432, 85, 86, 433, 85, 
	86, 434, 85, 86, 424, 85, 86, 416, 
	85, 86, 435, 85, 86, 408, 85, 436, 
	0, 1, 0, 437, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 41, 42, 72, 93, 293, 295, 
	301, 344, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 346, 
	30, 31, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 29, 38, 39, 40, 
	43, 44, 45, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 55, 54, 55, 55, 
	2, 56, 70, 307, 309, 313, 314, 316, 
	342, 57, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 2, 71, 
	2, 2, 3, 13, 15, 29, 32, 35, 
	37, 41, 42, 72, 93, 293, 295, 301, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 84, 85, 85, 
	2, 86, 87, 88, 89, 90, 91, 92, 
	71, 94, 166, 95, 96, 97, 98, 99, 
	100, 101, 102, 101, 102, 102, 2, 103, 
	117, 127, 137, 160, 104, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 2, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 71, 128, 129, 130, 131, 
	132, 133, 134, 135, 136, 138, 143, 139, 
	140, 141, 142, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 155, 156, 
	157, 158, 159, 161, 162, 163, 164, 165, 
	167, 168, 169, 170, 171, 172, 173, 230, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 187, 
	188, 188, 2, 189, 203, 204, 206, 210, 
	211, 213, 228, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	2, 71, 205, 203, 207, 208, 209, 212, 
	214, 220, 215, 216, 217, 218, 219, 221, 
	222, 223, 224, 225, 226, 227, 229, 231, 
	232, 233, 234, 233, 234, 234, 2, 235, 
	249, 250, 252, 256, 257, 268, 291, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 2, 71, 251, 249, 
	253, 254, 255, 258, 259, 260, 261, 262, 
	263, 264, 265, 266, 267, 269, 274, 270, 
	271, 272, 273, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 286, 287, 
	288, 289, 290, 292, 294, 296, 297, 298, 
	299, 300, 301, 302, 303, 305, 306, 304, 
	302, 303, 304, 302, 305, 306, 3, 13, 
	15, 29, 32, 35, 37, 41, 42, 72, 
	93, 293, 295, 301, 308, 70, 310, 311, 
	312, 315, 317, 323, 318, 319, 320, 321, 
	322, 324, 325, 326, 327, 328, 329, 330, 
	341, 331, 332, 333, 334, 335, 336, 337, 
	338, 339, 340, 343, 345, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	31, 126, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 69, 33, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 346;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 665 "js/lib/gherkin/lexer/lt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */
  
/* line 672 "js/lib/gherkin/lexer/lt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 899 "js/lib/gherkin/lexer/lt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 938 "js/lib/gherkin/lexer/lt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lt.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/lt', [], function() {return Lexer});
}

})();
