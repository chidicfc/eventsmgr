
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fr.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	94, 99, 106, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 141, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 163, 165, 167, 
	169, 171, 190, 192, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	206, 207, 208, 209, 210, 211, 212, 219, 
	221, 223, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 398, 399, 400, 401, 
	402, 404, 405, 406, 407, 408, 409, 410, 
	411, 412, 413, 415, 416, 417, 418, 419, 
	420, 421, 422, 423, 424, 425, 426, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	475, 477, 479, 481, 484, 486, 488, 490, 
	492, 494, 496, 498, 500, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 532, 534, 536, 538, 
	540, 542, 545, 547, 549, 551, 553, 555, 
	557, 560, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 579, 580, 581, 582, 584, 
	585, 586, 587, 588, 589, 590, 591, 592, 
	593, 594, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 710, 712, 714, 716, 718, 
	720, 722, 724, 726, 729, 731, 733, 735, 
	737, 739, 741, 743, 745, 747, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 772, 774, 777, 779, 781, 782, 783, 
	787, 793, 796, 798, 804, 823, 825, 827, 
	829, 831, 833, 836, 838, 840, 842, 844, 
	846, 848, 850, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 886, 888, 890, 892, 
	894, 897, 899, 901, 903, 905, 907, 909, 
	911, 913, 915, 918, 920, 922, 924, 926, 
	928, 930, 932, 934, 936, 938, 940, 942, 
	945, 947, 949, 950, 951
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 70, 76, 77, 80, 81, 83, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 70, 76, 
	77, 80, 81, 83, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	111, 114, 115, 111, 110, 116, 101, 120, 
	116, 101, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 69, 70, 76, 77, 
	80, 81, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 70, 76, 77, 
	80, 81, 83, 124, 9, 13, 116, 120, 
	32, 97, 110, 116, 32, 100, 111, 110, 
	110, -61, -87, 101, 109, 112, 108, 101, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 111, 10, 110, 10, 
	99, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -61, 10, -87, 10, 10, 
	58, 111, 110, 99, 116, 105, 111, 110, 
	110, 97, 108, 105, 116, -61, -87, 58, 
	10, 10, 10, 32, 35, 37, 64, 67, 
	69, 70, 80, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 101, 10, 120, 10, 116, 10, 101, 
	10, 58, 10, 120, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 101, 10, 115, 
	10, 111, 10, 110, 10, 99, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -87, 10, 10, 108, 10, 97, 
	10, 110, 10, 32, 10, 100, 10, 117, 
	10, 32, 10, 83, 115, 10, 99, -61, 
	10, -87, 10, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 111, 114, 115, 
	113, 117, 39, 101, 97, 105, 108, 97, 
	110, 32, 100, 117, 32, 83, 115, 99, 
	-61, -87, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 69, 70, 76, 77, 81, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	116, 10, 32, 97, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 110, 
	10, 110, -61, 10, -87, 10, 10, 111, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-87, 10, 10, 58, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 117, 10, 
	97, 10, 110, 10, 100, 10, 99, 111, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 105, 
	10, 116, 117, 97, 110, 100, 99, 111, 
	-61, -87, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 111, 10, 114, 10, 
	115, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 101, 10, 
	58, 10, 116, 10, 32, 97, 10, 110, 
	10, 116, 10, 32, 10, 100, 10, 111, 
	10, 110, 10, 110, -61, 10, -87, 10, 
	10, 111, 10, 110, 10, 99, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -87, 10, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 108, 10, 
	97, 10, 110, 10, 32, 10, 100, 10, 
	117, 10, 32, 10, 83, 115, 10, 99, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 117, 
	10, 97, 10, 110, 10, 100, 10, 99, 
	111, 10, 105, 10, 116, 105, 116, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 70, 76, 
	77, 80, 81, 83, 124, 9, 13, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	116, 10, 32, 97, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 110, 
	10, 110, -61, 10, -87, 10, 10, 111, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-87, 10, 10, 58, 10, 111, 10, 114, 
	10, 115, 10, 113, 10, 117, 10, 39, 
	101, 10, 97, 10, 105, 10, 108, 10, 
	97, 10, 110, 10, 32, 10, 100, 10, 
	117, 10, 32, 10, 83, 115, 10, 99, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 117, 
	10, 97, 10, 110, 10, 100, 10, 99, 
	111, 10, 105, 10, 116, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 17, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 15, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 1, 1, 2, 
	4, 3, 2, 4, 17, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	117, 122, 129, 134, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 178, 181, 184, 187, 190, 193, 
	196, 199, 202, 205, 208, 211, 214, 217, 
	220, 223, 242, 245, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	272, 274, 276, 278, 280, 282, 284, 291, 
	294, 297, 300, 303, 306, 309, 312, 315, 
	318, 321, 324, 327, 330, 333, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 366, 368, 370, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	430, 433, 436, 439, 442, 445, 448, 451, 
	454, 457, 460, 463, 466, 469, 472, 475, 
	478, 481, 484, 487, 490, 493, 496, 499, 
	502, 505, 508, 511, 514, 517, 520, 523, 
	526, 529, 532, 536, 539, 542, 545, 548, 
	551, 554, 557, 560, 562, 564, 566, 568, 
	570, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 616, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 679, 
	682, 685, 688, 691, 695, 698, 701, 704, 
	707, 710, 713, 716, 719, 722, 725, 728, 
	731, 734, 737, 740, 743, 746, 749, 752, 
	755, 758, 761, 764, 767, 770, 773, 776, 
	779, 782, 786, 789, 792, 795, 798, 801, 
	804, 808, 811, 814, 817, 820, 823, 826, 
	829, 832, 835, 837, 839, 841, 843, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 866, 883, 886, 889, 892, 895, 898, 
	901, 904, 907, 910, 913, 916, 919, 922, 
	925, 928, 931, 934, 937, 940, 943, 946, 
	949, 952, 955, 958, 961, 964, 967, 971, 
	974, 977, 980, 983, 986, 989, 992, 995, 
	998, 1001, 1004, 1007, 1010, 1013, 1016, 1019, 
	1022, 1025, 1028, 1031, 1034, 1037, 1040, 1043, 
	1046, 1049, 1052, 1055, 1059, 1062, 1065, 1068, 
	1071, 1074, 1077, 1080, 1083, 1086, 1090, 1093, 
	1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 
	1120, 1123, 1126, 1130, 1133, 1136, 1138, 1140, 
	1144, 1150, 1154, 1157, 1163, 1182, 1185, 1188, 
	1191, 1194, 1197, 1201, 1204, 1207, 1210, 1213, 
	1216, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 
	1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 
	1264, 1267, 1270, 1273, 1276, 1279, 1282, 1285, 
	1288, 1292, 1295, 1298, 1301, 1304, 1307, 1310, 
	1313, 1316, 1319, 1323, 1326, 1329, 1332, 1335, 
	1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 
	1363, 1366, 1369, 1371, 1373
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 22, 23, 21, 25, 26, 
	24, 29, 28, 30, 28, 27, 33, 32, 
	34, 32, 31, 33, 32, 35, 32, 31, 
	33, 32, 36, 32, 31, 38, 37, 37, 
	0, 2, 39, 39, 0, 41, 42, 40, 
	2, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	0, 58, 60, 61, 59, 0, 0, 0, 
	0, 62, 63, 64, 63, 63, 66, 65, 
	62, 2, 67, 7, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 81, 80, 
	83, 82, 83, 84, 85, 86, 87, 85, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	84, 82, 83, 96, 82, 83, 97, 82, 
	83, 98, 82, 83, 99, 82, 83, 100, 
	82, 83, 101, 82, 83, 102, 82, 83, 
	103, 82, 83, 104, 82, 83, 105, 82, 
	83, 106, 82, 83, 107, 82, 83, 108, 
	82, 83, 109, 82, 83, 110, 82, 112, 
	111, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	111, 0, 128, 129, 0, 57, 130, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	71, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 143, 0, 144, 0, 145, 0, 
	147, 146, 149, 148, 149, 150, 151, 152, 
	151, 150, 148, 149, 153, 148, 149, 154, 
	148, 149, 155, 148, 149, 156, 148, 149, 
	157, 148, 149, 158, 148, 149, 159, 148, 
	149, 160, 148, 149, 161, 148, 149, 162, 
	148, 149, 163, 148, 149, 164, 148, 165, 
	149, 148, 166, 149, 148, 149, 167, 148, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 0, 181, 0, 182, 0, 184, 183, 
	186, 185, 186, 187, 188, 189, 188, 190, 
	191, 192, 193, 194, 187, 185, 186, 195, 
	185, 186, 196, 185, 186, 197, 185, 186, 
	198, 185, 186, 199, 185, 186, 200, 185, 
	186, 201, 185, 186, 202, 185, 186, 203, 
	185, 186, 204, 185, 186, 205, 185, 186, 
	206, 185, 186, 207, 185, 186, 208, 185, 
	186, 209, 185, 186, 210, 185, 186, 211, 
	185, 186, 212, 185, 186, 213, 185, 186, 
	214, 185, 186, 215, 185, 186, 216, 185, 
	186, 217, 185, 186, 218, 185, 186, 219, 
	185, 186, 220, 185, 186, 221, 185, 186, 
	222, 185, 186, 215, 185, 186, 223, 185, 
	186, 224, 185, 186, 225, 185, 186, 226, 
	185, 186, 227, 185, 186, 228, 185, 186, 
	229, 185, 186, 230, 185, 186, 231, 185, 
	186, 232, 185, 186, 233, 185, 186, 234, 
	185, 235, 186, 185, 215, 186, 185, 186, 
	236, 185, 186, 237, 185, 186, 238, 185, 
	186, 239, 185, 186, 240, 185, 186, 241, 
	185, 186, 242, 185, 186, 243, 243, 185, 
	186, 244, 185, 245, 186, 185, 246, 186, 
	185, 186, 247, 185, 186, 248, 185, 186, 
	249, 185, 186, 250, 185, 186, 215, 185, 
	251, 0, 252, 0, 253, 0, 254, 0, 
	255, 0, 57, 71, 0, 256, 0, 70, 
	0, 257, 0, 258, 0, 259, 0, 260, 
	0, 261, 0, 262, 0, 263, 0, 264, 
	264, 0, 265, 0, 266, 0, 267, 0, 
	268, 0, 269, 0, 270, 0, 271, 0, 
	272, 0, 273, 0, 275, 274, 277, 276, 
	277, 278, 279, 280, 281, 279, 282, 283, 
	284, 285, 286, 287, 288, 278, 276, 277, 
	289, 276, 277, 290, 276, 277, 291, 276, 
	277, 292, 276, 277, 293, 276, 277, 294, 
	276, 277, 295, 276, 277, 296, 276, 277, 
	297, 276, 277, 298, 276, 277, 299, 276, 
	277, 300, 276, 277, 301, 276, 277, 302, 
	276, 277, 303, 276, 277, 304, 276, 277, 
	305, 276, 277, 306, 276, 277, 307, 276, 
	277, 308, 276, 277, 303, 309, 276, 277, 
	310, 276, 277, 311, 276, 277, 312, 276, 
	277, 313, 276, 277, 314, 276, 277, 315, 
	276, 277, 316, 276, 317, 277, 276, 307, 
	277, 276, 277, 318, 276, 277, 319, 276, 
	277, 320, 276, 277, 321, 276, 277, 322, 
	276, 277, 323, 276, 277, 324, 276, 277, 
	325, 276, 277, 326, 276, 277, 327, 276, 
	277, 328, 276, 277, 329, 276, 330, 277, 
	276, 331, 277, 276, 277, 303, 276, 277, 
	332, 276, 277, 333, 276, 277, 334, 276, 
	277, 335, 276, 277, 336, 276, 277, 303, 
	307, 276, 277, 337, 276, 277, 306, 276, 
	277, 338, 276, 277, 339, 276, 277, 340, 
	276, 277, 307, 276, 277, 341, 342, 276, 
	343, 277, 276, 344, 277, 276, 277, 345, 
	276, 277, 346, 276, 277, 347, 276, 277, 
	348, 276, 277, 331, 276, 277, 349, 276, 
	277, 307, 276, 350, 0, 351, 0, 352, 
	0, 71, 0, 353, 354, 0, 355, 0, 
	356, 0, 357, 0, 358, 0, 359, 0, 
	360, 0, 361, 0, 362, 0, 364, 363, 
	366, 365, 366, 367, 368, 369, 370, 368, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	379, 367, 365, 366, 380, 365, 366, 381, 
	365, 366, 382, 365, 366, 383, 365, 366, 
	384, 365, 366, 385, 365, 366, 386, 365, 
	366, 387, 365, 366, 388, 365, 366, 389, 
	365, 366, 390, 365, 366, 391, 365, 366, 
	392, 365, 366, 393, 365, 366, 394, 365, 
	366, 395, 365, 366, 396, 365, 366, 397, 
	365, 366, 398, 365, 366, 399, 365, 366, 
	400, 365, 366, 401, 365, 366, 402, 365, 
	366, 403, 365, 366, 404, 365, 366, 405, 
	365, 366, 394, 365, 366, 406, 365, 366, 
	394, 407, 365, 366, 408, 365, 366, 409, 
	365, 366, 410, 365, 366, 411, 365, 366, 
	412, 365, 366, 413, 365, 366, 414, 365, 
	415, 366, 365, 398, 366, 365, 366, 416, 
	365, 366, 417, 365, 366, 418, 365, 366, 
	419, 365, 366, 420, 365, 366, 421, 365, 
	366, 422, 365, 366, 423, 365, 366, 424, 
	365, 366, 425, 365, 366, 426, 365, 366, 
	427, 365, 428, 366, 365, 405, 366, 365, 
	366, 429, 365, 366, 430, 365, 366, 431, 
	365, 366, 432, 365, 366, 433, 365, 366, 
	394, 398, 365, 366, 434, 365, 366, 397, 
	365, 366, 435, 365, 366, 436, 365, 366, 
	437, 365, 366, 438, 365, 366, 439, 365, 
	366, 440, 365, 366, 441, 365, 366, 442, 
	442, 365, 366, 443, 365, 444, 366, 365, 
	445, 366, 365, 366, 446, 365, 366, 447, 
	365, 366, 448, 365, 366, 449, 365, 366, 
	405, 365, 366, 450, 365, 366, 451, 365, 
	366, 452, 365, 366, 398, 365, 366, 443, 
	453, 365, 366, 454, 365, 366, 398, 365, 
	455, 0, 71, 0, 456, 457, 456, 0, 
	460, 459, 461, 462, 459, 458, 0, 464, 
	465, 463, 0, 464, 463, 460, 466, 464, 
	465, 466, 463, 460, 467, 468, 469, 470, 
	471, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 481, 482, 467, 0, 83, 483, 
	82, 83, 484, 82, 83, 485, 82, 83, 
	486, 82, 83, 487, 82, 83, 110, 488, 
	82, 83, 489, 82, 83, 490, 82, 83, 
	491, 82, 83, 492, 82, 83, 493, 82, 
	83, 494, 82, 83, 495, 82, 496, 83, 
	82, 486, 83, 82, 83, 497, 82, 83, 
	498, 82, 83, 499, 82, 83, 500, 82, 
	83, 501, 82, 83, 502, 82, 83, 503, 
	82, 83, 504, 82, 83, 505, 82, 83, 
	506, 82, 83, 507, 82, 83, 508, 82, 
	509, 83, 82, 510, 83, 82, 83, 110, 
	82, 83, 511, 82, 83, 512, 82, 83, 
	513, 82, 83, 514, 82, 83, 515, 82, 
	83, 110, 486, 82, 83, 516, 82, 83, 
	485, 82, 83, 517, 82, 83, 518, 82, 
	83, 519, 82, 83, 520, 82, 83, 521, 
	82, 83, 522, 82, 83, 523, 82, 83, 
	524, 524, 82, 83, 525, 82, 526, 83, 
	82, 527, 83, 82, 83, 528, 82, 83, 
	529, 82, 83, 530, 82, 83, 531, 82, 
	83, 510, 82, 83, 532, 82, 83, 533, 
	82, 83, 534, 82, 83, 486, 82, 83, 
	525, 535, 82, 83, 536, 82, 83, 486, 
	82, 537, 0, 1, 0, 538, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 39, 66, 102, 179, 185, 187, 274, 
	278, 375, 442, 4, 5, 6, 7, 6, 
	6, 7, 6, 8, 8, 8, 9, 8, 
	8, 8, 9, 10, 11, 12, 2, 12, 
	13, 2, 14, 16, 17, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	444, 30, 31, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 37, 38, 29, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 48, 49, 49, 2, 50, 64, 
	381, 385, 396, 411, 417, 419, 435, 439, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	59, 60, 61, 62, 63, 2, 65, 2, 
	2, 3, 13, 15, 29, 32, 35, 39, 
	66, 102, 179, 185, 187, 274, 278, 375, 
	67, 77, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 85, 86, 86, 2, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 65, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 118, 119, 119, 2, 120, 134, 142, 
	149, 163, 171, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	2, 135, 136, 137, 138, 139, 140, 141, 
	65, 143, 144, 145, 146, 147, 148, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 180, 181, 182, 183, 184, 
	186, 188, 189, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 206, 205, 206, 206, 2, 
	207, 221, 222, 226, 237, 252, 258, 260, 
	264, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 2, 65, 
	223, 224, 225, 221, 227, 228, 229, 230, 
	231, 232, 233, 234, 235, 236, 238, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 253, 254, 255, 256, 
	257, 259, 261, 262, 263, 265, 272, 266, 
	267, 268, 269, 270, 271, 273, 275, 276, 
	277, 279, 373, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 288, 289, 289, 
	2, 290, 304, 305, 309, 317, 328, 342, 
	348, 350, 366, 370, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	303, 2, 65, 306, 307, 308, 304, 310, 
	311, 312, 313, 314, 315, 316, 318, 319, 
	320, 321, 322, 323, 324, 325, 326, 327, 
	329, 330, 331, 332, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 343, 344, 345, 
	346, 347, 349, 351, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 367, 368, 369, 371, 372, 374, 
	375, 376, 377, 379, 380, 378, 376, 377, 
	378, 376, 379, 380, 3, 13, 15, 29, 
	32, 35, 39, 66, 102, 179, 185, 187, 
	274, 278, 375, 382, 383, 384, 64, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 397, 398, 399, 400, 401, 402, 403, 
	404, 405, 406, 407, 408, 409, 410, 412, 
	413, 414, 415, 416, 418, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 436, 437, 438, 440, 
	441, 443, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 135, 48, 
	0, 102, 9, 5, 45, 130, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 31, 
	126, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 444;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 811 "js/lib/gherkin/lexer/fr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
  
/* line 818 "js/lib/gherkin/lexer/fr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1045 "js/lib/gherkin/lexer/fr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1084 "js/lib/gherkin/lexer/fr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/fr', [], function() {return Lexer});
}

})();
