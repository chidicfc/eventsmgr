
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cy_gb.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	90, 95, 102, 107, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 168, 170, 172, 
	174, 176, 178, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 299, 301, 303, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 329, 330, 331, 332, 
	333, 334, 335, 336, 337, 338, 339, 340, 
	341, 342, 343, 350, 352, 354, 356, 358, 
	360, 362, 363, 364, 365, 366, 367, 368, 
	369, 370, 371, 372, 373, 375, 376, 377, 
	378, 379, 380, 381, 382, 383, 384, 385, 
	386, 387, 388, 401, 403, 405, 407, 409, 
	411, 413, 415, 417, 419, 421, 423, 425, 
	427, 429, 431, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 483, 485, 487, 489, 490, 
	491, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 523, 525, 527, 529, 531, 533, 
	535, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 629, 633, 
	639, 642, 644, 650, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 741, 742
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 79, 80, 83, 89, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 79, 80, 83, 89, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 32, 110, 114, 114, 104, 
	101, 103, 101, 100, 105, 103, 32, 97, 
	119, 101, 100, 100, 58, 10, 10, 10, 
	32, 35, 37, 64, 65, 67, 69, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 114, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 79, 80, 83, 89, 
	124, 9, 13, 101, 102, 110, 100, 105, 
	114, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 79, 80, 83, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 110, 114, 10, 114, 10, 104, 10, 
	101, 10, 103, 10, 101, 10, 100, 10, 
	105, 10, 103, 10, 32, 10, 97, 10, 
	119, 10, 101, 10, 100, 10, 100, 10, 
	58, 10, 110, 10, 100, 10, 114, 10, 
	121, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	32, 58, 10, 65, 10, 109, 10, 108, 
	10, 105, 10, 110, 10, 101, 10, 108, 
	10, 108, 10, 111, 10, 108, 10, 110, 
	110, 103, 104, 114, 101, 105, 102, 102, 
	116, 105, 97, 117, 58, 10, 10, 10, 
	32, 35, 65, 124, 9, 13, 10, 114, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 110, 100, 114, 121, 99, 101, 
	110, 97, 114, 105, 111, 32, 58, 65, 
	109, 108, 105, 110, 101, 108, 108, 111, 
	108, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 79, 80, 83, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 110, 114, 10, 114, 10, 104, 10, 
	101, 10, 103, 10, 101, 10, 100, 10, 
	105, 10, 103, 10, 32, 10, 97, 10, 
	119, 10, 101, 10, 100, 10, 100, 10, 
	58, 10, 110, 10, 100, 10, 114, 10, 
	121, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	110, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 67, 79, 80, 83, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 110, 114, 10, 114, 10, 104, 10, 
	101, 10, 103, 10, 101, 10, 100, 10, 
	105, 10, 103, 10, 32, 10, 97, 10, 
	119, 10, 101, 10, 100, 10, 100, 10, 
	58, 10, 101, 10, 102, 10, 110, 10, 
	100, 10, 105, 10, 114, 10, 110, 10, 
	100, 10, 114, 10, 121, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 32, 58, 10, 65, 
	10, 109, 10, 108, 10, 105, 10, 110, 
	10, 101, 10, 108, 10, 108, 10, 111, 
	10, 108, 10, 110, 110, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 79, 80, 83, 89, 
	124, 9, 13, 10, 101, 10, 102, 10, 
	110, 10, 100, 10, 105, 10, 114, 10, 
	110, 10, 103, 10, 104, 10, 114, 10, 
	101, 10, 105, 10, 102, 10, 102, 10, 
	116, 10, 105, 10, 97, 10, 117, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 32, 58, 
	10, 65, 10, 109, 10, 108, 10, 105, 
	10, 110, 10, 101, 10, 108, 10, 108, 
	10, 111, 10, 108, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 15, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 4, 
	3, 2, 4, 15, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	113, 118, 125, 130, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 168, 179, 182, 
	185, 188, 191, 194, 197, 200, 203, 206, 
	209, 212, 215, 218, 221, 224, 227, 230, 
	233, 236, 239, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 287, 290, 293, 
	296, 299, 302, 305, 308, 311, 314, 317, 
	320, 323, 326, 329, 332, 337, 340, 343, 
	346, 349, 352, 355, 358, 361, 364, 367, 
	370, 373, 376, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 415, 
	419, 422, 425, 428, 431, 434, 437, 440, 
	443, 446, 449, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 489, 492, 495, 498, 501, 
	504, 507, 509, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 571, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 704, 
	706, 720, 723, 726, 729, 732, 735, 738, 
	741, 744, 747, 750, 753, 756, 759, 762, 
	765, 770, 773, 776, 779, 782, 785, 788, 
	791, 794, 797, 800, 803, 806, 809, 812, 
	815, 818, 821, 824, 827, 830, 833, 836, 
	839, 842, 845, 848, 851, 854, 857, 860, 
	863, 866, 870, 873, 876, 879, 882, 885, 
	888, 891, 894, 897, 900, 903, 905, 909, 
	915, 919, 922, 928, 945, 948, 951, 954, 
	957, 960, 963, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1024, 1027, 
	1030, 1033, 1036, 1039, 1042, 1045, 1048, 1051, 
	1054, 1056, 1058
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 0, 56, 58, 59, 
	57, 0, 0, 0, 0, 60, 61, 62, 
	61, 61, 64, 63, 60, 2, 65, 7, 
	65, 0, 55, 66, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 84, 83, 86, 85, 
	86, 87, 88, 89, 88, 90, 91, 92, 
	93, 87, 85, 86, 94, 85, 86, 95, 
	85, 86, 96, 85, 86, 97, 85, 86, 
	98, 85, 86, 99, 85, 86, 100, 85, 
	86, 101, 85, 86, 102, 85, 86, 103, 
	85, 86, 104, 85, 86, 105, 85, 86, 
	106, 85, 86, 107, 85, 86, 108, 85, 
	86, 109, 85, 86, 110, 85, 86, 111, 
	85, 86, 112, 85, 86, 113, 85, 115, 
	114, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 114, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 137, 136, 
	139, 138, 139, 140, 141, 142, 143, 141, 
	144, 145, 146, 147, 148, 140, 138, 139, 
	149, 138, 139, 150, 138, 139, 151, 138, 
	139, 152, 138, 139, 153, 138, 139, 154, 
	138, 139, 155, 138, 139, 156, 138, 139, 
	157, 138, 139, 158, 138, 139, 159, 138, 
	139, 160, 138, 139, 161, 138, 139, 162, 
	138, 139, 163, 138, 139, 163, 164, 165, 
	138, 139, 166, 138, 139, 167, 138, 139, 
	168, 138, 139, 169, 138, 139, 170, 138, 
	139, 171, 138, 139, 172, 138, 139, 173, 
	138, 139, 174, 138, 139, 175, 138, 139, 
	176, 138, 139, 177, 138, 139, 178, 138, 
	139, 179, 138, 139, 163, 138, 139, 180, 
	138, 139, 175, 138, 139, 181, 138, 139, 
	180, 138, 139, 182, 138, 139, 183, 138, 
	139, 184, 138, 139, 185, 138, 139, 186, 
	138, 139, 187, 138, 139, 188, 138, 139, 
	189, 163, 138, 139, 190, 138, 139, 191, 
	138, 139, 192, 138, 139, 193, 138, 139, 
	194, 138, 139, 195, 138, 139, 196, 138, 
	139, 197, 138, 139, 198, 138, 139, 179, 
	138, 139, 174, 138, 199, 0, 200, 0, 
	201, 0, 202, 0, 203, 0, 204, 0, 
	205, 0, 206, 0, 207, 0, 208, 0, 
	209, 0, 210, 0, 211, 0, 213, 212, 
	215, 214, 215, 216, 217, 218, 217, 216, 
	214, 215, 219, 214, 215, 220, 214, 215, 
	221, 214, 215, 222, 214, 215, 223, 214, 
	215, 224, 214, 225, 0, 77, 0, 226, 
	0, 225, 0, 227, 0, 228, 0, 229, 
	0, 230, 0, 231, 0, 232, 0, 233, 
	0, 234, 235, 0, 236, 0, 237, 0, 
	238, 0, 239, 0, 240, 0, 241, 0, 
	242, 0, 243, 0, 244, 0, 245, 0, 
	246, 0, 248, 247, 250, 249, 250, 251, 
	252, 253, 254, 252, 255, 256, 257, 258, 
	259, 251, 249, 250, 260, 249, 250, 261, 
	249, 250, 262, 249, 250, 263, 249, 250, 
	264, 249, 250, 265, 249, 250, 266, 249, 
	250, 267, 249, 250, 268, 249, 250, 269, 
	249, 250, 270, 249, 250, 271, 249, 250, 
	272, 249, 250, 273, 249, 250, 274, 249, 
	250, 274, 275, 276, 249, 250, 277, 249, 
	250, 278, 249, 250, 279, 249, 250, 280, 
	249, 250, 281, 249, 250, 282, 249, 250, 
	283, 249, 250, 284, 249, 250, 285, 249, 
	250, 286, 249, 250, 287, 249, 250, 288, 
	249, 250, 289, 249, 250, 290, 249, 250, 
	274, 249, 250, 291, 249, 250, 286, 249, 
	250, 292, 249, 250, 291, 249, 250, 293, 
	249, 250, 294, 249, 250, 295, 249, 250, 
	296, 249, 250, 297, 249, 250, 298, 249, 
	250, 290, 249, 250, 285, 249, 300, 299, 
	302, 301, 302, 303, 304, 305, 306, 304, 
	307, 308, 309, 310, 311, 312, 303, 301, 
	302, 313, 301, 302, 314, 301, 302, 315, 
	301, 302, 316, 301, 302, 317, 301, 302, 
	318, 301, 302, 319, 301, 302, 320, 301, 
	302, 321, 301, 302, 322, 301, 302, 323, 
	301, 302, 324, 301, 302, 325, 301, 302, 
	326, 301, 302, 327, 301, 302, 327, 328, 
	329, 301, 302, 330, 301, 302, 331, 301, 
	302, 332, 301, 302, 333, 301, 302, 334, 
	301, 302, 335, 301, 302, 336, 301, 302, 
	337, 301, 302, 338, 301, 302, 339, 301, 
	302, 340, 301, 302, 341, 301, 302, 342, 
	301, 302, 343, 301, 302, 327, 301, 302, 
	344, 301, 302, 345, 301, 302, 346, 301, 
	302, 347, 301, 302, 348, 301, 302, 343, 
	301, 302, 349, 301, 302, 339, 301, 302, 
	350, 301, 302, 349, 301, 302, 351, 301, 
	302, 352, 301, 302, 353, 301, 302, 354, 
	301, 302, 355, 301, 302, 356, 301, 302, 
	357, 301, 302, 358, 327, 301, 302, 359, 
	301, 302, 360, 301, 302, 361, 301, 302, 
	362, 301, 302, 363, 301, 302, 364, 301, 
	302, 365, 301, 302, 366, 301, 302, 367, 
	301, 302, 343, 301, 302, 338, 301, 76, 
	0, 368, 369, 368, 0, 372, 371, 373, 
	374, 371, 370, 0, 376, 377, 375, 0, 
	376, 375, 372, 378, 376, 377, 378, 375, 
	372, 379, 380, 381, 382, 383, 384, 385, 
	386, 387, 388, 389, 390, 391, 392, 379, 
	0, 86, 393, 85, 86, 394, 85, 86, 
	395, 85, 86, 396, 85, 86, 397, 85, 
	86, 112, 85, 86, 398, 85, 86, 399, 
	85, 86, 400, 85, 86, 401, 85, 86, 
	402, 85, 86, 403, 85, 86, 404, 85, 
	86, 405, 85, 86, 406, 85, 86, 407, 
	85, 86, 408, 85, 86, 112, 85, 86, 
	409, 85, 86, 410, 85, 86, 411, 85, 
	86, 412, 85, 86, 413, 85, 86, 414, 
	85, 86, 415, 85, 86, 416, 113, 85, 
	86, 417, 85, 86, 418, 85, 86, 419, 
	85, 86, 420, 85, 86, 421, 85, 86, 
	422, 85, 86, 423, 85, 86, 424, 85, 
	86, 425, 85, 86, 112, 85, 426, 0, 
	1, 0, 427, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 75, 139, 161, 163, 165, 293, 294, 
	336, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 338, 30, 
	31, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 46, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 29, 47, 48, 
	49, 50, 51, 52, 53, 52, 53, 53, 
	2, 54, 68, 300, 306, 318, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 2, 69, 70, 71, 72, 
	73, 74, 2, 2, 3, 13, 15, 29, 
	32, 35, 75, 139, 161, 163, 165, 293, 
	294, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 83, 84, 84, 2, 85, 99, 
	100, 116, 118, 120, 138, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 2, 74, 101, 111, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 99, 
	112, 113, 114, 115, 117, 119, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 153, 154, 
	154, 2, 155, 156, 157, 158, 159, 160, 
	74, 162, 164, 166, 167, 168, 169, 170, 
	171, 172, 173, 230, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 185, 186, 186, 2, 187, 201, 202, 
	218, 220, 222, 229, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 2, 74, 203, 213, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 201, 214, 
	215, 216, 217, 219, 221, 223, 224, 225, 
	226, 227, 228, 231, 232, 231, 232, 232, 
	2, 233, 247, 248, 264, 270, 272, 274, 
	292, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 246, 2, 74, 
	249, 259, 250, 251, 252, 253, 254, 255, 
	256, 257, 258, 247, 260, 261, 262, 263, 
	265, 266, 267, 268, 269, 271, 273, 275, 
	276, 277, 278, 279, 280, 281, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	294, 295, 296, 298, 299, 297, 295, 296, 
	297, 295, 298, 299, 3, 13, 15, 29, 
	32, 35, 75, 139, 161, 163, 165, 293, 
	294, 301, 302, 303, 304, 305, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	317, 319, 320, 321, 322, 323, 324, 325, 
	326, 327, 328, 329, 330, 331, 332, 333, 
	334, 335, 337, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 31, 126, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 338;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 653 "js/lib/gherkin/lexer/cy_gb.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */
  
/* line 660 "js/lib/gherkin/lexer/cy_gb.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 887 "js/lib/gherkin/lexer/cy_gb.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 926 "js/lib/gherkin/lexer/cy_gb.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/cy_gb', [], function() {return Lexer});
}

})();
