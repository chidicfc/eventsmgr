
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_au.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 64, 68, 72, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 93, 98, 105, 110, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 137, 139, 141, 143, 145, 147, 149, 
	151, 153, 155, 157, 159, 161, 163, 165, 
	167, 183, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 202, 204, 206, 208, 
	210, 212, 214, 215, 216, 217, 218, 219, 
	220, 221, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 314, 315, 316, 317, 318, 
	319, 333, 335, 337, 339, 341, 343, 345, 
	347, 349, 351, 353, 355, 357, 359, 361, 
	363, 366, 368, 370, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 392, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 449, 450, 451, 452, 453, 455, 
	456, 457, 458, 459, 460, 461, 462, 463, 
	464, 465, 466, 470, 476, 479, 481, 487, 
	503, 505, 507, 509, 511, 513, 515, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 572, 573, 574, 575, 576, 577, 
	578, 591, 593, 595, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 617, 619, 
	621, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 680, 681
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	67, 77, 78, 87, 89, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	66, 67, 77, 78, 87, 89, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 32, 10, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 97, 108, 
	99, 107, 103, 114, 111, 117, 110, 100, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 66, 67, 77, 78, 87, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 66, 67, 
	77, 78, 87, 89, 124, 9, 13, 101, 
	111, 114, 112, 116, 98, 98, 101, 114, 
	58, 10, 10, 10, 32, 35, 67, 124, 
	9, 13, 10, 114, 10, 105, 10, 107, 
	10, 101, 10, 121, 10, 58, 105, 107, 
	101, 121, 58, 10, 10, 10, 32, 35, 
	37, 64, 66, 67, 77, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 97, 108, 10, 99, 
	10, 107, 10, 103, 10, 114, 10, 111, 
	10, 117, 10, 110, 10, 100, 10, 58, 
	10, 111, 10, 107, 10, 101, 10, 115, 
	10, 111, 114, 10, 98, 10, 98, 10, 
	101, 10, 114, 10, 105, 10, 107, 10, 
	101, 10, 121, 10, 97, 10, 116, 10, 
	101, 97, 116, 101, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 66, 67, 77, 
	78, 87, 89, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 97, 108, 10, 99, 
	10, 107, 10, 103, 10, 114, 10, 111, 
	10, 117, 10, 110, 10, 100, 10, 58, 
	10, 111, 10, 107, 10, 101, 10, 115, 
	10, 101, 114, 10, 112, 10, 116, 10, 
	105, 10, 107, 10, 101, 10, 121, 10, 
	97, 10, 116, 10, 101, 10, 104, 10, 
	101, 10, 110, 10, 97, 10, 32, 10, 
	103, 107, 10, 111, 10, 116, 10, 116, 
	10, 97, 10, 110, 10, 111, 10, 119, 
	10, 32, 10, 104, 10, 111, 10, 119, 
	104, 101, 110, 97, 32, 103, 107, 111, 
	116, 116, 97, 110, 111, 119, 32, 104, 
	111, 119, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 66, 67, 
	77, 78, 87, 89, 124, 9, 13, 10, 
	108, 10, 111, 10, 107, 10, 101, 10, 
	115, 10, 58, 10, 101, 114, 10, 112, 
	10, 116, 10, 105, 10, 107, 10, 101, 
	10, 121, 10, 97, 10, 116, 10, 101, 
	10, 104, 10, 101, 10, 110, 10, 97, 
	10, 32, 10, 103, 107, 10, 111, 10, 
	116, 10, 116, 10, 97, 10, 110, 10, 
	111, 10, 119, 10, 32, 10, 104, 10, 
	111, 10, 119, 111, 107, 101, 115, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	67, 77, 78, 87, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 114, 
	10, 112, 10, 116, 10, 105, 10, 107, 
	10, 101, 10, 121, 10, 58, 10, 97, 
	10, 116, 10, 101, 10, 104, 10, 101, 
	10, 110, 10, 97, 10, 32, 10, 103, 
	107, 10, 111, 10, 116, 10, 116, 10, 
	97, 10, 110, 10, 111, 10, 119, 10, 
	32, 10, 104, 10, 111, 10, 119, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 3, 5, 3, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	14, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 8, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 14, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	11, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 68, 72, 76, 79, 
	81, 83, 85, 87, 89, 91, 93, 95, 
	97, 99, 101, 103, 105, 107, 109, 111, 
	113, 116, 121, 128, 133, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 172, 175, 178, 181, 184, 187, 190, 
	193, 196, 199, 202, 205, 208, 211, 214, 
	217, 233, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 262, 265, 268, 271, 
	274, 277, 280, 282, 284, 286, 288, 290, 
	292, 294, 304, 307, 310, 313, 316, 319, 
	322, 325, 328, 331, 334, 337, 340, 343, 
	346, 350, 353, 356, 359, 362, 365, 368, 
	371, 374, 377, 380, 383, 386, 389, 393, 
	396, 399, 402, 405, 408, 411, 414, 417, 
	420, 423, 426, 428, 430, 432, 434, 436, 
	438, 452, 455, 458, 461, 464, 467, 470, 
	473, 476, 479, 482, 485, 488, 491, 494, 
	497, 501, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 544, 
	547, 550, 553, 556, 559, 562, 565, 568, 
	571, 574, 577, 580, 583, 586, 590, 593, 
	596, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 625, 627, 629, 631, 633, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 656, 658, 662, 668, 672, 675, 681, 
	697, 700, 703, 706, 709, 712, 715, 719, 
	722, 725, 728, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 765, 768, 
	771, 774, 777, 780, 783, 786, 789, 792, 
	795, 798, 800, 802, 804, 806, 808, 810, 
	812, 825, 828, 831, 834, 837, 840, 843, 
	846, 849, 852, 855, 858, 861, 864, 867, 
	870, 874, 877, 880, 883, 886, 889, 892, 
	895, 898, 901, 904, 907, 910, 913, 916, 
	919, 923, 926, 929, 932, 935, 938, 941, 
	944, 947, 950, 953, 956, 958, 960
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 6, 11, 12, 13, 14, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 6, 11, 12, 13, 1, 
	0, 15, 0, 16, 0, 18, 19, 17, 
	21, 22, 20, 25, 24, 26, 24, 23, 
	29, 28, 30, 28, 27, 29, 28, 31, 
	28, 27, 29, 28, 32, 28, 27, 34, 
	33, 35, 33, 0, 2, 36, 36, 0, 
	34, 33, 33, 0, 38, 39, 37, 2, 
	0, 40, 0, 41, 0, 42, 0, 43, 
	0, 44, 0, 45, 0, 46, 0, 47, 
	0, 48, 0, 49, 0, 50, 0, 51, 
	0, 52, 0, 53, 0, 54, 0, 0, 
	55, 57, 58, 56, 0, 0, 0, 0, 
	59, 60, 61, 60, 60, 63, 62, 59, 
	2, 64, 7, 64, 0, 65, 66, 0, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 77, 76, 79, 78, 79, 80, 
	81, 82, 83, 81, 84, 85, 86, 83, 
	87, 88, 80, 78, 79, 89, 78, 79, 
	90, 78, 79, 91, 78, 79, 92, 78, 
	79, 93, 78, 79, 94, 78, 79, 95, 
	78, 79, 96, 78, 79, 97, 78, 79, 
	98, 78, 79, 99, 78, 79, 100, 78, 
	79, 101, 78, 79, 102, 78, 79, 103, 
	78, 105, 104, 106, 107, 108, 109, 110, 
	111, 112, 113, 109, 114, 115, 116, 104, 
	0, 117, 118, 119, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 128, 127, 130, 129, 130, 
	131, 132, 133, 132, 131, 129, 130, 134, 
	129, 130, 135, 129, 130, 136, 129, 130, 
	137, 129, 130, 138, 129, 130, 139, 129, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 146, 145, 148, 147, 148, 149, 
	150, 151, 150, 152, 153, 154, 149, 147, 
	148, 155, 147, 148, 156, 147, 148, 157, 
	147, 148, 158, 147, 148, 159, 147, 148, 
	160, 147, 148, 161, 147, 148, 162, 147, 
	148, 163, 147, 148, 164, 147, 148, 165, 
	147, 148, 166, 147, 148, 167, 147, 148, 
	168, 147, 148, 169, 170, 147, 148, 171, 
	147, 148, 172, 147, 148, 173, 147, 148, 
	174, 147, 148, 175, 147, 148, 176, 147, 
	148, 177, 147, 148, 178, 147, 148, 179, 
	147, 148, 180, 147, 148, 181, 147, 148, 
	182, 147, 148, 178, 147, 148, 183, 184, 
	147, 148, 185, 147, 148, 186, 147, 148, 
	187, 147, 148, 178, 147, 148, 188, 147, 
	148, 189, 147, 148, 190, 147, 148, 178, 
	147, 148, 191, 147, 148, 192, 147, 148, 
	178, 147, 193, 0, 194, 0, 195, 0, 
	196, 0, 198, 197, 200, 199, 200, 201, 
	202, 203, 204, 202, 205, 206, 207, 204, 
	208, 209, 201, 199, 200, 210, 199, 200, 
	211, 199, 200, 212, 199, 200, 213, 199, 
	200, 214, 199, 200, 215, 199, 200, 216, 
	199, 200, 217, 199, 200, 218, 199, 200, 
	219, 199, 200, 220, 199, 200, 221, 199, 
	200, 222, 199, 200, 223, 199, 200, 224, 
	199, 200, 225, 226, 199, 200, 227, 199, 
	200, 228, 199, 200, 229, 199, 200, 230, 
	199, 200, 231, 199, 200, 232, 199, 200, 
	233, 199, 200, 234, 199, 200, 224, 199, 
	200, 235, 199, 200, 236, 199, 200, 237, 
	199, 200, 234, 199, 200, 238, 239, 199, 
	200, 240, 199, 200, 241, 199, 200, 242, 
	199, 200, 243, 199, 200, 244, 199, 200, 
	234, 199, 200, 245, 199, 200, 246, 199, 
	200, 234, 199, 200, 247, 199, 200, 248, 
	199, 200, 241, 199, 200, 249, 199, 200, 
	250, 199, 200, 251, 252, 199, 200, 253, 
	199, 200, 254, 199, 200, 255, 199, 200, 
	241, 199, 200, 256, 199, 200, 257, 199, 
	200, 258, 199, 200, 259, 199, 200, 260, 
	199, 200, 261, 199, 200, 241, 199, 262, 
	0, 263, 0, 121, 0, 264, 0, 265, 
	0, 266, 267, 0, 268, 0, 269, 0, 
	270, 0, 121, 0, 271, 0, 272, 0, 
	273, 0, 274, 0, 275, 0, 276, 0, 
	121, 0, 277, 278, 277, 0, 281, 280, 
	282, 283, 280, 279, 0, 285, 286, 284, 
	0, 285, 284, 281, 287, 285, 286, 287, 
	284, 281, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 292, 297, 298, 299, 288, 
	0, 79, 300, 78, 79, 301, 78, 79, 
	302, 78, 79, 303, 78, 79, 304, 78, 
	79, 103, 78, 79, 305, 306, 78, 79, 
	307, 78, 79, 308, 78, 79, 309, 78, 
	79, 310, 78, 79, 311, 78, 79, 304, 
	78, 79, 312, 78, 79, 313, 78, 79, 
	304, 78, 79, 314, 78, 79, 315, 78, 
	79, 308, 78, 79, 316, 78, 79, 317, 
	78, 79, 318, 319, 78, 79, 320, 78, 
	79, 321, 78, 79, 322, 78, 79, 308, 
	78, 79, 323, 78, 79, 324, 78, 79, 
	325, 78, 79, 326, 78, 79, 327, 78, 
	79, 328, 78, 79, 308, 78, 329, 0, 
	330, 0, 331, 0, 332, 0, 333, 0, 
	335, 334, 337, 336, 337, 338, 339, 340, 
	341, 339, 342, 343, 341, 344, 345, 338, 
	336, 337, 346, 336, 337, 347, 336, 337, 
	348, 336, 337, 349, 336, 337, 350, 336, 
	337, 351, 336, 337, 352, 336, 337, 353, 
	336, 337, 354, 336, 337, 355, 336, 337, 
	356, 336, 337, 357, 336, 337, 358, 336, 
	337, 359, 336, 337, 360, 336, 337, 361, 
	362, 336, 337, 363, 336, 337, 364, 336, 
	337, 365, 336, 337, 366, 336, 337, 367, 
	336, 337, 368, 336, 337, 360, 336, 337, 
	369, 336, 337, 370, 336, 337, 368, 336, 
	337, 371, 336, 337, 372, 336, 337, 364, 
	336, 337, 373, 336, 337, 374, 336, 337, 
	375, 376, 336, 337, 377, 336, 337, 378, 
	336, 337, 379, 336, 337, 364, 336, 337, 
	380, 336, 337, 381, 336, 337, 382, 336, 
	337, 383, 336, 337, 384, 336, 337, 385, 
	336, 337, 364, 336, 386, 0, 1, 0, 
	387, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 14, 16, 30, 33, 
	36, 65, 130, 193, 196, 210, 300, 4, 
	5, 6, 7, 6, 6, 7, 6, 8, 
	8, 8, 9, 8, 8, 8, 9, 10, 
	11, 12, 2, 13, 12, 14, 2, 15, 
	17, 18, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 302, 31, 32, 
	32, 2, 15, 34, 35, 2, 34, 33, 
	35, 37, 249, 38, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 48, 47, 48, 
	48, 2, 49, 63, 216, 222, 229, 232, 
	235, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 2, 64, 
	2, 2, 3, 14, 16, 30, 33, 36, 
	65, 130, 193, 196, 210, 66, 68, 82, 
	67, 30, 69, 70, 71, 72, 73, 74, 
	75, 74, 75, 75, 2, 76, 77, 78, 
	79, 80, 81, 64, 83, 84, 85, 86, 
	87, 88, 89, 88, 89, 89, 2, 90, 
	104, 118, 127, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	2, 105, 114, 106, 107, 108, 109, 110, 
	111, 112, 113, 64, 115, 116, 117, 119, 
	123, 120, 121, 122, 124, 125, 126, 128, 
	129, 131, 132, 133, 134, 135, 136, 135, 
	136, 136, 2, 137, 151, 152, 166, 173, 
	176, 179, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 2, 
	64, 153, 162, 154, 155, 156, 157, 158, 
	159, 160, 161, 163, 164, 165, 167, 169, 
	168, 151, 170, 171, 172, 174, 175, 177, 
	178, 180, 181, 182, 186, 183, 184, 185, 
	187, 188, 189, 190, 191, 192, 194, 195, 
	197, 198, 199, 203, 200, 201, 202, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	214, 215, 213, 211, 212, 213, 211, 214, 
	215, 3, 14, 16, 30, 33, 36, 65, 
	130, 193, 196, 210, 217, 218, 219, 220, 
	221, 223, 225, 224, 63, 226, 227, 228, 
	230, 231, 233, 234, 236, 237, 238, 242, 
	239, 240, 241, 243, 244, 245, 246, 247, 
	248, 250, 251, 252, 253, 254, 255, 256, 
	255, 256, 256, 2, 257, 271, 272, 280, 
	283, 286, 258, 259, 260, 261, 262, 263, 
	264, 265, 266, 267, 268, 269, 270, 2, 
	64, 273, 275, 274, 271, 276, 277, 278, 
	279, 281, 282, 284, 285, 287, 288, 289, 
	293, 290, 291, 292, 294, 295, 296, 297, 
	298, 299, 301, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 35, 0, 0, 
	0, 7, 135, 48, 0, 102, 9, 5, 
	45, 130, 45, 0, 33, 122, 33, 33, 
	0, 11, 106, 0, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	0, 110, 23, 0, 27, 118, 27, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	31, 126, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 69, 33, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 302;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 599 "js/lib/gherkin/lexer/en_au.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */
  
/* line 606 "js/lib/gherkin/lexer/en_au.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 833 "js/lib/gherkin/lexer/en_au.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 872 "js/lib/gherkin/lexer/en_au.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_au.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/en_au', [], function() {return Lexer});
}

})();
