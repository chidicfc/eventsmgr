
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cs.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	88, 93, 100, 105, 107, 109, 112, 115, 
	118, 121, 124, 126, 127, 129, 130, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	140, 154, 156, 158, 160, 162, 164, 166, 
	168, 170, 172, 174, 176, 178, 180, 182, 
	184, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 265, 282, 
	283, 284, 285, 286, 287, 288, 289, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 310, 312, 314, 316, 318, 
	320, 322, 324, 326, 328, 330, 331, 334, 
	335, 336, 337, 338, 339, 340, 341, 342, 
	343, 344, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	416, 418, 420, 422, 424, 426, 428, 430, 
	432, 434, 436, 438, 440, 442, 444, 446, 
	449, 451, 453, 455, 457, 459, 461, 463, 
	465, 468, 470, 472, 474, 476, 478, 480, 
	482, 484, 486, 488, 490, 492, 494, 496, 
	498, 500, 502, 504, 506, 507, 508, 509, 
	510, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 520, 521, 522, 523, 537, 539, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 570, 587, 
	588, 589, 590, 591, 592, 596, 602, 605, 
	607, 613, 629, 631, 634, 636, 638, 640, 
	642, 644, 646, 648, 650, 652, 654, 656, 
	658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 703, 705, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 743, 745, 747, 749, 751, 752, 753, 
	754, 755, 756, 758, 760, 762, 764, 766, 
	769, 771, 774, 776, 778, 780, 782, 784, 
	786, 788, 790, 792, 794, 796, 798, 800, 
	802, 804, 806, 808, 810, 813, 830, 831, 
	832, 833, 834, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 855, 857, 859, 
	861, 863, 865, 867, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 898, 900, 903, 905, 907, 909, 
	911, 913, 915, 917, 919, 921, 923, 925, 
	927, 929, 931, 933, 935, 937, 938, 939
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 108, 10, 116, 10, 13, 97, 
	10, 13, 107, -61, 10, 13, -87, 10, 
	13, 10, 13, 32, 10, 13, 101, 100, 
	111, 121, -59, -66, 110, 116, 101, 120, 
	116, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 124, 9, 13, 
	-61, -95, -60, -115, 114, 116, 32, 83, 
	99, -61, -87, 110, -61, -95, -59, -103, 
	101, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 75, 80, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 116, 124, 
	9, 13, 115, 110, 111, 118, 97, 32, 
	115, -59, 97, 111, -103, -61, -83, 107, 
	108, 97, 100, 121, 58, 10, 10, 10, 
	32, 35, 80, 124, 9, 13, 10, 111, 
	-59, 10, -66, 10, 10, 97, 10, 100, 
	10, 97, 10, 118, 10, 101, 10, 107, 
	10, 58, 107, -59, 107, 122, -66, 97, 
	100, 97, 118, 101, 107, 58, 10, 10, 
	10, 32, 35, 37, 64, 75, 78, 79, 
	80, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 116, 10, 101, 
	10, 120, 10, 116, 10, 58, -61, 10, 
	-95, 10, -60, 10, -115, 10, 10, 114, 
	10, 116, 10, 32, 10, 83, 10, 99, 
	-61, 10, -87, 10, 10, 110, -61, 10, 
	-95, 10, -59, 10, -103, 10, 10, 101, 
	10, 115, 10, 110, 10, 111, 10, 118, 
	10, 97, 10, 32, 10, 115, -59, 10, 
	111, -103, 10, -61, 10, -83, 10, 10, 
	107, 10, 108, 10, 97, 10, 100, 10, 
	121, -59, 10, 122, -66, 10, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 101, 
	10, 107, 10, 97, 10, 100, -61, 10, 
	-83, 10, 10, 99, -61, 10, -87, 10, 
	10, 110, -61, 10, -95, 10, -59, 10, 
	-103, 10, 117, 100, 97, 100, -61, -83, 
	99, -61, -87, 110, -61, -95, -59, -103, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 108, 10, 32, 34, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 116, 
	124, 9, 13, 97, 107, -61, -87, 32, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 124, 9, 13, 10, 101, 10, 
	100, 111, 10, 121, -59, 10, -66, 10, 
	10, 110, 10, 116, 10, 101, 10, 120, 
	10, 116, 10, 58, -61, 10, -95, 10, 
	-60, 10, -115, 10, 10, 114, 10, 116, 
	10, 32, 10, 83, 10, 99, -61, 10, 
	-87, 10, 10, 110, -61, 10, -95, 10, 
	-59, 10, -103, 10, 10, 101, 10, 115, 
	10, 110, 10, 111, 10, 118, 10, 97, 
	10, 32, 10, 115, 10, 97, 111, 10, 
	107, -59, 10, 107, 122, -66, 10, 10, 
	97, 10, 100, 10, 97, 10, 118, 10, 
	101, 10, 107, 10, 117, 10, 100, 10, 
	97, 10, 100, -61, 10, -83, 10, 10, 
	99, -61, 10, -87, 10, 10, 110, -61, 
	10, -95, 10, -59, 10, -103, 10, 97, 
	107, -61, -87, 32, 10, 101, 10, 100, 
	10, 121, -59, 10, -66, 10, 10, 97, 
	111, 10, 107, -59, 10, 107, -66, 10, 
	10, 97, 10, 100, 10, 97, 10, 118, 
	10, 101, 10, 107, 10, 58, 10, 117, 
	10, 100, 10, 99, -61, 10, -87, 10, 
	10, 110, -61, 10, -95, 10, -59, 10, 
	-103, 10, 10, 32, 108, 10, 32, 34, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 116, 124, 9, 13, 97, 107, 
	-61, -87, 32, 10, 101, 10, 100, 10, 
	121, -59, 10, -66, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 101, 10, 
	58, 10, 115, 10, 110, 10, 111, 10, 
	118, 10, 97, 10, 32, 10, 115, 10, 
	97, 111, 10, 107, -59, 10, 107, -66, 
	10, 10, 97, 10, 100, 10, 97, 10, 
	118, 10, 101, 10, 107, 10, 117, 10, 
	100, 10, 99, -61, 10, -87, 10, 10, 
	110, -61, 10, -95, 10, -59, 10, -103, 
	10, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 2, 2, 3, 3, 3, 
	3, 3, 2, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	14, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 15, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 15, 1, 
	1, 1, 1, 1, 2, 4, 3, 2, 
	4, 14, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 3, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 15, 1, 1, 
	1, 1, 1, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	111, 116, 123, 128, 131, 134, 138, 142, 
	146, 150, 154, 157, 159, 162, 164, 166, 
	168, 170, 172, 174, 176, 178, 180, 182, 
	184, 198, 201, 204, 207, 210, 213, 216, 
	219, 222, 225, 228, 231, 234, 237, 240, 
	243, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 299, 311, 314, 
	317, 320, 323, 326, 329, 332, 335, 338, 
	341, 344, 347, 350, 353, 356, 360, 377, 
	379, 381, 383, 385, 387, 389, 391, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 424, 427, 430, 433, 436, 
	439, 442, 445, 448, 451, 454, 456, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 492, 495, 498, 501, 504, 507, 
	510, 513, 516, 519, 522, 525, 528, 531, 
	534, 537, 540, 543, 546, 549, 552, 555, 
	558, 561, 564, 567, 570, 573, 576, 579, 
	582, 585, 588, 591, 594, 597, 600, 603, 
	606, 609, 612, 615, 618, 621, 624, 627, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 659, 662, 665, 668, 671, 674, 677, 
	680, 683, 686, 689, 692, 695, 698, 701, 
	704, 707, 710, 713, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 742, 744, 746, 748, 750, 764, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 813, 830, 
	832, 834, 836, 838, 840, 844, 850, 854, 
	857, 863, 879, 882, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 931, 934, 937, 940, 943, 
	946, 949, 952, 955, 958, 961, 964, 967, 
	970, 973, 976, 979, 982, 985, 989, 992, 
	997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 
	1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 
	1045, 1048, 1051, 1054, 1057, 1060, 1062, 1064, 
	1066, 1068, 1070, 1073, 1076, 1079, 1082, 1085, 
	1089, 1092, 1096, 1099, 1102, 1105, 1108, 1111, 
	1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1141, 1144, 1147, 1150, 1154, 1171, 1173, 
	1175, 1177, 1179, 1181, 1184, 1187, 1190, 1193, 
	1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217, 
	1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 
	1268, 1271, 1275, 1278, 1282, 1285, 1288, 1291, 
	1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 
	1318, 1321, 1324, 1327, 1330, 1333, 1335, 1337
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 0, 55, 57, 58, 56, 0, 
	0, 0, 0, 59, 60, 61, 60, 60, 
	63, 62, 59, 2, 64, 7, 64, 0, 
	65, 66, 0, 0, 67, 55, 57, 58, 
	68, 56, 57, 58, 69, 56, 70, 57, 
	58, 56, 71, 57, 58, 56, 57, 58, 
	72, 56, 57, 58, 55, 73, 0, 74, 
	75, 0, 76, 0, 77, 0, 73, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	82, 0, 83, 0, 85, 84, 87, 86, 
	87, 88, 89, 90, 91, 89, 92, 93, 
	94, 95, 96, 97, 88, 86, 87, 98, 
	86, 87, 99, 86, 87, 100, 86, 87, 
	101, 86, 87, 102, 86, 87, 103, 86, 
	87, 104, 86, 87, 105, 86, 87, 106, 
	86, 87, 107, 86, 87, 108, 86, 87, 
	109, 86, 87, 110, 86, 87, 111, 86, 
	87, 112, 86, 114, 113, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 113, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 132, 0, 133, 
	0, 134, 0, 135, 0, 136, 0, 137, 
	0, 138, 0, 139, 0, 140, 0, 141, 
	0, 142, 0, 143, 0, 144, 0, 146, 
	145, 148, 147, 148, 149, 150, 151, 152, 
	150, 153, 154, 155, 156, 149, 147, 148, 
	157, 147, 148, 158, 147, 148, 159, 147, 
	148, 160, 147, 148, 161, 147, 148, 162, 
	147, 148, 163, 147, 148, 164, 147, 148, 
	165, 147, 148, 166, 147, 148, 167, 147, 
	148, 168, 147, 148, 169, 147, 148, 170, 
	147, 148, 171, 147, 148, 172, 173, 147, 
	114, 113, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 174, 126, 113, 
	0, 175, 0, 176, 0, 177, 0, 178, 
	0, 179, 0, 180, 0, 134, 0, 181, 
	182, 183, 0, 184, 0, 185, 0, 186, 
	0, 187, 0, 188, 0, 189, 0, 190, 
	0, 191, 0, 192, 0, 194, 193, 196, 
	195, 196, 197, 198, 199, 198, 197, 195, 
	196, 200, 195, 201, 196, 195, 202, 196, 
	195, 196, 203, 195, 196, 204, 195, 196, 
	205, 195, 196, 206, 195, 196, 207, 195, 
	196, 208, 195, 196, 209, 195, 73, 0, 
	210, 211, 212, 0, 213, 0, 214, 0, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	219, 0, 220, 0, 222, 221, 224, 223, 
	224, 225, 226, 227, 226, 228, 229, 230, 
	231, 232, 225, 223, 224, 233, 223, 224, 
	234, 223, 224, 235, 223, 224, 236, 223, 
	224, 237, 223, 224, 238, 223, 224, 239, 
	223, 224, 240, 223, 224, 241, 223, 224, 
	242, 223, 224, 243, 223, 224, 244, 223, 
	224, 245, 223, 224, 246, 223, 224, 247, 
	223, 224, 248, 223, 224, 249, 223, 224, 
	250, 223, 224, 251, 223, 224, 252, 223, 
	224, 253, 223, 254, 224, 223, 255, 224, 
	223, 256, 224, 223, 257, 224, 223, 224, 
	258, 223, 224, 259, 223, 224, 260, 223, 
	224, 261, 223, 224, 262, 223, 263, 224, 
	223, 264, 224, 223, 224, 265, 223, 266, 
	224, 223, 267, 224, 223, 268, 224, 223, 
	269, 224, 223, 224, 252, 223, 224, 270, 
	223, 224, 271, 223, 224, 272, 223, 224, 
	273, 223, 224, 274, 223, 224, 275, 223, 
	224, 261, 223, 276, 224, 277, 223, 278, 
	224, 223, 279, 224, 223, 280, 224, 223, 
	224, 281, 223, 224, 282, 223, 224, 283, 
	223, 224, 284, 223, 224, 252, 223, 285, 
	224, 286, 223, 287, 224, 223, 224, 288, 
	223, 224, 289, 223, 224, 290, 223, 224, 
	291, 223, 224, 292, 223, 224, 252, 223, 
	224, 293, 223, 224, 294, 223, 295, 224, 
	223, 252, 224, 223, 224, 296, 223, 297, 
	224, 223, 298, 224, 223, 224, 299, 223, 
	300, 224, 223, 301, 224, 223, 302, 224, 
	223, 252, 224, 223, 303, 0, 73, 0, 
	304, 0, 305, 0, 306, 0, 82, 0, 
	307, 0, 308, 0, 309, 0, 310, 0, 
	311, 0, 312, 0, 313, 0, 314, 0, 
	315, 0, 317, 316, 319, 318, 319, 320, 
	321, 322, 323, 321, 324, 325, 326, 327, 
	328, 329, 320, 318, 319, 330, 318, 319, 
	331, 318, 319, 332, 318, 319, 333, 318, 
	319, 334, 318, 319, 335, 318, 319, 336, 
	318, 319, 337, 318, 319, 338, 318, 319, 
	339, 318, 319, 340, 318, 319, 341, 318, 
	319, 342, 318, 319, 343, 318, 319, 344, 
	318, 319, 345, 346, 318, 114, 113, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 347, 126, 113, 0, 348, 0, 
	349, 0, 350, 0, 351, 0, 344, 0, 
	352, 353, 352, 0, 356, 355, 357, 358, 
	355, 354, 0, 360, 361, 359, 0, 360, 
	359, 356, 362, 360, 361, 362, 359, 356, 
	363, 364, 365, 366, 367, 368, 369, 370, 
	371, 372, 373, 374, 375, 363, 0, 319, 
	376, 318, 319, 377, 378, 318, 319, 379, 
	318, 380, 319, 318, 376, 319, 318, 319, 
	381, 318, 319, 382, 318, 319, 383, 318, 
	319, 384, 318, 319, 385, 318, 319, 344, 
	318, 386, 319, 318, 387, 319, 318, 388, 
	319, 318, 389, 319, 318, 319, 390, 318, 
	319, 391, 318, 319, 392, 318, 319, 393, 
	318, 319, 394, 318, 395, 319, 318, 396, 
	319, 318, 319, 397, 318, 398, 319, 318, 
	399, 319, 318, 400, 319, 318, 401, 319, 
	318, 319, 385, 318, 319, 402, 318, 319, 
	403, 318, 319, 404, 318, 319, 405, 318, 
	319, 406, 318, 319, 407, 318, 319, 393, 
	318, 319, 408, 409, 318, 319, 376, 318, 
	410, 319, 411, 412, 318, 413, 319, 318, 
	319, 414, 318, 319, 415, 318, 319, 416, 
	318, 319, 417, 318, 319, 418, 318, 319, 
	385, 318, 319, 419, 318, 319, 376, 318, 
	319, 420, 318, 319, 421, 318, 422, 319, 
	318, 385, 319, 318, 319, 423, 318, 424, 
	319, 318, 425, 319, 318, 319, 426, 318, 
	427, 319, 318, 428, 319, 318, 429, 319, 
	318, 385, 319, 318, 430, 0, 431, 0, 
	432, 0, 433, 0, 171, 0, 148, 434, 
	147, 148, 435, 147, 148, 436, 147, 437, 
	148, 147, 434, 148, 147, 148, 438, 439, 
	147, 148, 434, 147, 440, 148, 441, 147, 
	442, 148, 147, 148, 443, 147, 148, 444, 
	147, 148, 445, 147, 148, 446, 147, 148, 
	447, 147, 148, 448, 147, 148, 171, 147, 
	148, 449, 147, 148, 434, 147, 148, 450, 
	147, 451, 148, 147, 452, 148, 147, 148, 
	453, 147, 454, 148, 147, 455, 148, 147, 
	456, 148, 147, 448, 148, 147, 87, 457, 
	458, 86, 114, 113, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 459, 
	126, 113, 0, 460, 0, 461, 0, 462, 
	0, 463, 0, 112, 0, 87, 464, 86, 
	87, 465, 86, 87, 466, 86, 467, 87, 
	86, 464, 87, 86, 468, 87, 86, 469, 
	87, 86, 470, 87, 86, 471, 87, 86, 
	87, 472, 86, 87, 473, 86, 87, 474, 
	86, 87, 475, 86, 87, 476, 86, 477, 
	87, 86, 478, 87, 86, 87, 479, 86, 
	480, 87, 86, 481, 87, 86, 482, 87, 
	86, 483, 87, 86, 87, 484, 86, 87, 
	112, 86, 87, 485, 86, 87, 486, 86, 
	87, 487, 86, 87, 488, 86, 87, 489, 
	86, 87, 490, 86, 87, 475, 86, 87, 
	491, 492, 86, 87, 464, 86, 493, 87, 
	494, 86, 495, 87, 86, 87, 496, 86, 
	87, 497, 86, 87, 498, 86, 87, 499, 
	86, 87, 500, 86, 87, 484, 86, 87, 
	501, 86, 87, 464, 86, 87, 502, 86, 
	503, 87, 86, 504, 87, 86, 87, 505, 
	86, 506, 87, 86, 507, 87, 86, 508, 
	87, 86, 484, 87, 86, 509, 0, 1, 
	0, 510, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 44, 73, 111, 118, 234, 268, 421, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 423, 30, 31, 
	31, 2, 14, 33, 34, 2, 33, 32, 
	34, 36, 43, 37, 38, 39, 40, 41, 
	42, 29, 45, 48, 46, 47, 49, 50, 
	51, 52, 53, 54, 55, 56, 55, 56, 
	56, 2, 57, 71, 364, 372, 376, 394, 
	401, 413, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 2, 
	72, 2, 2, 3, 13, 15, 29, 32, 
	35, 44, 73, 111, 118, 234, 268, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 92, 93, 93, 2, 94, 
	108, 109, 339, 343, 356, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 2, 72, 110, 338, 333, 112, 
	113, 114, 115, 116, 117, 119, 141, 142, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 129, 130, 130, 2, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	140, 72, 143, 228, 230, 144, 145, 146, 
	147, 148, 149, 150, 151, 152, 153, 152, 
	153, 153, 2, 154, 168, 175, 192, 199, 
	220, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 2, 169, 
	170, 171, 172, 173, 174, 72, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 193, 194, 
	195, 196, 197, 198, 200, 208, 201, 202, 
	203, 204, 205, 206, 207, 209, 216, 210, 
	211, 212, 213, 214, 215, 217, 218, 219, 
	221, 222, 223, 224, 225, 226, 227, 229, 
	231, 232, 233, 235, 236, 237, 238, 239, 
	240, 241, 242, 243, 244, 245, 244, 245, 
	245, 2, 246, 260, 261, 275, 285, 302, 
	309, 325, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 2, 
	72, 262, 274, 263, 264, 265, 266, 267, 
	268, 269, 270, 272, 273, 271, 269, 270, 
	271, 269, 272, 273, 3, 13, 15, 29, 
	32, 35, 44, 73, 111, 118, 234, 268, 
	260, 276, 279, 277, 278, 280, 281, 282, 
	283, 284, 286, 287, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 299, 
	300, 301, 303, 304, 305, 306, 307, 308, 
	310, 311, 312, 319, 321, 313, 314, 315, 
	316, 317, 318, 320, 322, 323, 324, 326, 
	327, 328, 329, 330, 331, 332, 334, 335, 
	336, 337, 108, 340, 341, 342, 344, 345, 
	346, 354, 347, 348, 349, 350, 351, 352, 
	353, 355, 357, 358, 359, 360, 361, 362, 
	363, 365, 371, 366, 367, 368, 369, 370, 
	71, 373, 374, 375, 377, 378, 379, 380, 
	381, 382, 383, 384, 385, 386, 387, 388, 
	389, 390, 391, 392, 393, 395, 396, 397, 
	398, 399, 400, 402, 403, 404, 411, 405, 
	406, 407, 408, 409, 410, 412, 414, 415, 
	416, 417, 418, 419, 420, 422, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 135, 48, 0, 102, 9, 
	5, 45, 130, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	0, 110, 23, 0, 27, 118, 27, 51, 
	0, 0, 0, 57, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 31, 126, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 423;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 783 "js/lib/gherkin/lexer/cs.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
  
/* line 790 "js/lib/gherkin/lexer/cs.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1017 "js/lib/gherkin/lexer/cs.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1056 "js/lib/gherkin/lexer/cs.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cs.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/cs', [], function() {return Lexer});
}

})();
