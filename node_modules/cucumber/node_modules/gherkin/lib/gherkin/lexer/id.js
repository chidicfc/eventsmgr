
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */



/* line 11 "js/lib/gherkin/lexer/id.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	90, 95, 102, 107, 108, 109, 110, 111, 
	112, 113, 114, 115, 122, 124, 126, 128, 
	130, 132, 149, 151, 153, 154, 155, 156, 
	157, 158, 172, 174, 176, 178, 180, 182, 
	184, 186, 188, 190, 192, 194, 196, 198, 
	200, 202, 205, 207, 209, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 271, 272, 273, 274, 275, 
	276, 277, 278, 279, 280, 281, 292, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 
	360, 363, 365, 367, 369, 371, 373, 375, 
	376, 377, 378, 379, 380, 381, 382, 383, 
	384, 385, 386, 387, 388, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 497, 498, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 545, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 616, 617, 
	618, 622, 628, 631, 633, 639, 656, 657, 
	658
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 70, 75, 77, 83, 84, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 67, 68, 70, 75, 77, 83, 84, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 111, 110, 116, 111, 104, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 105, 10, 116, 10, 117, 
	10, 114, 10, 58, 10, 32, 34, 35, 
	37, 42, 64, 67, 68, 70, 75, 77, 
	83, 84, 124, 9, 13, 97, 101, 110, 
	115, 97, 114, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 68, 70, 75, 77, 
	83, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 97, 101, 10, 110, 10, 
	110, 10, 103, 10, 97, 10, 105, 10, 
	116, 10, 117, 10, 114, 10, 58, 10, 
	101, 10, 116, 10, 105, 10, 107, 10, 
	97, 10, 97, 10, 107, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 32, 58, 10, 107, 10, 111, 
	10, 110, 10, 115, 10, 101, 10, 112, 
	10, 97, 10, 112, 10, 105, 110, 103, 
	97, 110, 105, 116, 117, 114, 58, 10, 
	10, 10, 32, 35, 37, 64, 67, 68, 
	70, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 116, 10, 111, 
	10, 104, 10, 58, 10, 97, 10, 115, 
	10, 97, 10, 114, 10, 105, 10, 116, 
	10, 117, 10, 107, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 107, 10, 111, 10, 
	110, 10, 115, 10, 101, 10, 112, 101, 
	116, 105, 107, 97, 97, 107, 101, 110, 
	97, 114, 105, 111, 32, 58, 107, 111, 
	110, 115, 101, 112, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 68, 70, 75, 
	77, 83, 84, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 97, 101, 10, 110, 
	10, 110, 10, 103, 10, 97, 10, 105, 
	10, 116, 10, 117, 10, 114, 10, 58, 
	10, 101, 10, 116, 10, 105, 10, 107, 
	10, 97, 10, 97, 10, 107, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 97, 10, 112, 10, 105, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	68, 70, 75, 77, 83, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 97, 
	101, 10, 110, 115, 10, 97, 10, 114, 
	10, 58, 10, 110, 10, 103, 10, 97, 
	10, 110, 10, 105, 10, 116, 10, 117, 
	10, 101, 10, 116, 10, 105, 10, 107, 
	10, 97, 10, 97, 10, 107, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 32, 58, 10, 107, 10, 
	111, 10, 110, 10, 115, 10, 101, 10, 
	112, 10, 97, 10, 112, 10, 105, 97, 
	112, 105, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 67, 68, 
	70, 75, 77, 83, 84, 124, 9, 13, 
	187, 191, 0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 15, 2, 2, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	2, 4, 3, 2, 4, 15, 1, 1, 
	0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	113, 118, 125, 130, 132, 134, 136, 138, 
	140, 142, 144, 146, 153, 156, 159, 162, 
	165, 168, 185, 188, 191, 193, 195, 197, 
	199, 201, 215, 218, 221, 224, 227, 230, 
	233, 236, 239, 242, 245, 248, 251, 254, 
	257, 260, 264, 267, 270, 273, 276, 279, 
	282, 285, 288, 291, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 334, 337, 340, 343, 346, 349, 352, 
	355, 358, 361, 363, 365, 367, 369, 371, 
	373, 375, 377, 379, 381, 383, 394, 397, 
	400, 403, 406, 409, 412, 415, 418, 421, 
	424, 427, 430, 433, 436, 439, 442, 445, 
	448, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 500, 503, 506, 509, 512, 515, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 579, 
	582, 585, 588, 591, 594, 597, 600, 603, 
	606, 609, 612, 615, 618, 621, 624, 628, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 658, 661, 664, 667, 670, 673, 676, 
	679, 682, 685, 688, 691, 694, 697, 700, 
	703, 705, 707, 721, 724, 727, 730, 733, 
	736, 739, 742, 745, 748, 751, 754, 757, 
	760, 763, 766, 770, 774, 777, 780, 783, 
	786, 789, 792, 795, 798, 801, 804, 807, 
	810, 813, 816, 819, 822, 825, 828, 831, 
	834, 837, 840, 843, 847, 850, 853, 856, 
	859, 862, 865, 868, 871, 874, 876, 878, 
	880, 884, 890, 894, 897, 903, 920, 922, 
	924
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 0, 56, 58, 59, 
	57, 0, 0, 0, 0, 60, 61, 62, 
	61, 61, 64, 63, 60, 2, 65, 7, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 73, 72, 
	75, 74, 75, 76, 77, 78, 77, 76, 
	74, 75, 79, 74, 75, 80, 74, 75, 
	81, 74, 75, 82, 74, 75, 83, 74, 
	85, 84, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 95, 96, 97, 98, 84, 
	0, 99, 100, 0, 101, 102, 0, 103, 
	0, 104, 0, 105, 0, 107, 106, 109, 
	108, 109, 110, 111, 112, 113, 111, 114, 
	115, 116, 117, 118, 119, 110, 108, 109, 
	120, 108, 109, 121, 108, 109, 122, 108, 
	109, 123, 108, 109, 124, 108, 109, 125, 
	108, 109, 126, 108, 109, 127, 108, 109, 
	128, 108, 109, 129, 108, 109, 130, 108, 
	109, 131, 108, 109, 132, 108, 109, 133, 
	108, 109, 134, 108, 109, 135, 136, 108, 
	109, 137, 108, 109, 138, 108, 109, 139, 
	108, 109, 135, 108, 109, 140, 108, 109, 
	141, 108, 109, 142, 108, 109, 143, 108, 
	109, 134, 108, 109, 144, 108, 109, 145, 
	108, 109, 146, 108, 109, 147, 108, 109, 
	137, 108, 109, 146, 108, 109, 148, 108, 
	109, 149, 108, 109, 150, 108, 109, 151, 
	108, 109, 152, 108, 109, 153, 108, 109, 
	154, 108, 109, 155, 134, 108, 109, 156, 
	108, 109, 157, 108, 109, 158, 108, 109, 
	159, 108, 109, 160, 108, 109, 143, 108, 
	109, 161, 108, 109, 162, 108, 109, 137, 
	108, 163, 0, 164, 0, 165, 0, 101, 
	0, 166, 0, 167, 0, 168, 0, 169, 
	0, 170, 0, 172, 171, 174, 173, 174, 
	175, 176, 177, 176, 178, 179, 180, 181, 
	175, 173, 174, 182, 173, 174, 183, 173, 
	174, 184, 173, 174, 185, 173, 174, 186, 
	173, 174, 187, 173, 174, 188, 173, 174, 
	189, 173, 174, 190, 173, 174, 191, 173, 
	174, 192, 173, 174, 193, 173, 174, 194, 
	173, 174, 195, 173, 174, 196, 173, 174, 
	197, 173, 174, 198, 173, 174, 199, 173, 
	174, 200, 173, 174, 201, 173, 174, 202, 
	173, 174, 203, 173, 174, 204, 173, 174, 
	200, 173, 174, 205, 173, 174, 206, 173, 
	174, 204, 173, 174, 207, 173, 174, 208, 
	173, 174, 209, 173, 174, 210, 173, 174, 
	211, 173, 174, 212, 173, 174, 213, 173, 
	174, 214, 201, 173, 174, 215, 173, 174, 
	216, 173, 174, 217, 173, 174, 218, 173, 
	174, 219, 173, 174, 200, 173, 220, 0, 
	221, 0, 222, 0, 223, 0, 101, 0, 
	222, 0, 224, 0, 225, 0, 226, 0, 
	227, 0, 228, 0, 229, 0, 230, 0, 
	231, 232, 0, 233, 0, 234, 0, 235, 
	0, 236, 0, 237, 0, 238, 0, 239, 
	0, 241, 240, 243, 242, 243, 244, 245, 
	246, 247, 245, 248, 249, 250, 251, 252, 
	253, 244, 242, 243, 254, 242, 243, 255, 
	242, 243, 256, 242, 243, 257, 242, 243, 
	258, 242, 243, 259, 242, 243, 260, 242, 
	243, 261, 242, 243, 262, 242, 243, 263, 
	242, 243, 264, 242, 243, 265, 242, 243, 
	266, 242, 243, 267, 242, 243, 268, 242, 
	243, 269, 270, 242, 243, 271, 242, 243, 
	272, 242, 243, 273, 242, 243, 269, 242, 
	243, 274, 242, 243, 275, 242, 243, 276, 
	242, 243, 277, 242, 243, 268, 242, 243, 
	278, 242, 243, 279, 242, 243, 280, 242, 
	243, 281, 242, 243, 271, 242, 243, 280, 
	242, 243, 282, 242, 243, 283, 242, 243, 
	284, 242, 243, 285, 242, 243, 286, 242, 
	243, 287, 242, 243, 277, 242, 243, 288, 
	242, 243, 289, 242, 243, 271, 242, 291, 
	290, 293, 292, 293, 294, 295, 296, 297, 
	295, 298, 299, 300, 301, 302, 303, 294, 
	292, 293, 304, 292, 293, 305, 292, 293, 
	306, 292, 293, 307, 292, 293, 308, 292, 
	293, 309, 292, 293, 310, 292, 293, 311, 
	292, 293, 312, 292, 293, 313, 292, 293, 
	314, 292, 293, 315, 292, 293, 316, 292, 
	293, 317, 292, 293, 318, 292, 293, 319, 
	320, 292, 293, 321, 322, 292, 293, 323, 
	292, 293, 324, 292, 293, 318, 292, 293, 
	325, 292, 293, 326, 292, 293, 327, 292, 
	293, 321, 292, 293, 328, 292, 293, 329, 
	292, 293, 323, 292, 293, 330, 292, 293, 
	331, 292, 293, 332, 292, 293, 333, 292, 
	293, 321, 292, 293, 332, 292, 293, 334, 
	292, 293, 335, 292, 293, 336, 292, 293, 
	337, 292, 293, 338, 292, 293, 339, 292, 
	293, 340, 292, 293, 341, 318, 292, 293, 
	342, 292, 293, 343, 292, 293, 344, 292, 
	293, 345, 292, 293, 346, 292, 293, 324, 
	292, 293, 347, 292, 293, 348, 292, 293, 
	321, 292, 349, 0, 350, 0, 101, 0, 
	351, 352, 351, 0, 355, 354, 356, 357, 
	354, 353, 0, 359, 360, 358, 0, 359, 
	358, 355, 361, 359, 360, 361, 358, 355, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 375, 362, 0, 
	376, 0, 1, 0, 377, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 50, 110, 159, 164, 165, 277, 280, 
	286, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 288, 30, 
	31, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 37, 38, 39, 40, 41, 
	42, 43, 42, 43, 43, 2, 44, 45, 
	46, 47, 48, 49, 2, 2, 3, 13, 
	15, 29, 32, 35, 50, 110, 159, 164, 
	165, 277, 280, 51, 106, 29, 52, 53, 
	54, 55, 56, 57, 56, 57, 57, 2, 
	58, 72, 73, 78, 83, 88, 89, 103, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 2, 49, 74, 
	75, 72, 76, 77, 79, 80, 81, 82, 
	84, 85, 86, 87, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 104, 105, 107, 108, 109, 111, 112, 
	113, 114, 115, 116, 117, 116, 117, 117, 
	2, 118, 132, 138, 142, 145, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 2, 133, 134, 135, 136, 
	137, 49, 139, 140, 141, 143, 144, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 160, 161, 162, 163, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	224, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 181, 182, 182, 2, 183, 197, 
	198, 203, 208, 213, 214, 221, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 2, 49, 199, 200, 197, 
	201, 202, 204, 205, 206, 207, 209, 210, 
	211, 212, 215, 216, 217, 218, 219, 220, 
	222, 223, 225, 226, 225, 226, 226, 2, 
	227, 241, 242, 251, 254, 259, 260, 274, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 2, 49, 243, 
	247, 241, 244, 245, 246, 248, 249, 250, 
	252, 253, 255, 256, 257, 258, 261, 262, 
	263, 264, 265, 266, 267, 268, 269, 270, 
	271, 272, 273, 275, 276, 278, 279, 280, 
	281, 282, 284, 285, 283, 281, 282, 283, 
	281, 284, 285, 3, 13, 15, 29, 32, 
	35, 50, 110, 159, 164, 165, 277, 280, 
	287, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 81, 84, 0, 
	0, 0, 0, 21, 31, 126, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

const lexer_start = 1;
const lexer_first_final = 288;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 584 "js/lib/gherkin/lexer/id.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */
  
/* line 591 "js/lib/gherkin/lexer/id.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 818 "js/lib/gherkin/lexer/id.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 857 "js/lib/gherkin/lexer/id.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/id.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/id', [], function() {return Lexer});
}

})();
