
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */



/* line 11 "js/lib/gherkin/lexer/et.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	90, 95, 102, 107, 108, 109, 110, 111, 
	112, 113, 114, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 132, 134, 136, 
	138, 140, 142, 144, 161, 162, 163, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	185, 187, 189, 191, 193, 195, 197, 199, 
	201, 203, 205, 207, 209, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 284, 285, 
	286, 287, 288, 289, 290, 291, 292, 305, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 331, 333, 335, 337, 
	339, 341, 343, 345, 347, 349, 351, 353, 
	355, 358, 360, 362, 364, 366, 368, 370, 
	373, 375, 377, 379, 381, 383, 385, 387, 
	389, 391, 393, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 423, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 476, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	519, 521, 523, 525, 527, 529, 530, 531, 
	532, 533, 534, 535, 536, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 603, 
	605, 607, 609, 611, 613, 615, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 646, 648, 652, 658, 
	661, 663, 669, 686, 687, 688
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 69, 
	74, 75, 79, 82, 83, 84, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 69, 74, 75, 79, 82, 83, 84, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 101, 108, 100, 97, 100, 
	101, 115, 97, 117, 104, 116, 117, 109, 
	105, 100, 58, 10, 10, 10, 32, 35, 
	79, 124, 9, 13, 10, 109, 10, 97, 
	10, 100, 10, 117, 10, 115, 10, 58, 
	10, 32, 34, 35, 37, 42, 64, 69, 
	74, 75, 79, 82, 83, 84, 124, 9, 
	13, 117, 105, 32, 100, 109, 97, 100, 
	117, 115, 58, 10, 10, 10, 32, 35, 
	37, 64, 74, 79, 82, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 117, 10, 
	104, 10, 116, 10, 117, 10, 109, 10, 
	105, 10, 100, 10, 58, 10, 109, 10, 
	97, 10, 100, 10, 117, 10, 115, 10, 
	97, 10, 97, 10, 109, 10, 115, 10, 
	116, 10, 115, 10, 101, 10, 110, 10, 
	97, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 109, 10, 97, 10, 117, 10, 
	115, 10, 116, 97, 97, 109, 115, 116, 
	115, 101, 110, 97, 97, 114, 105, 117, 
	109, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 69, 74, 75, 79, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	101, 10, 108, 10, 100, 10, 97, 10, 
	100, 10, 101, 10, 115, 10, 97, 10, 
	117, 10, 105, 10, 32, 100, 10, 109, 
	10, 97, 10, 100, 10, 117, 10, 115, 
	10, 58, 10, 105, 116, 10, 105, 10, 
	115, 10, 101, 10, 110, 10, 97, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	109, 105, 116, 105, 115, 101, 110, 97, 
	97, 114, 105, 117, 109, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 69, 74, 
	75, 79, 82, 83, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	108, 10, 100, 10, 97, 10, 100, 10, 
	101, 10, 115, 10, 97, 10, 117, 10, 
	105, 10, 32, 100, 10, 109, 10, 97, 
	10, 100, 10, 117, 10, 115, 10, 58, 
	10, 97, 10, 97, 10, 109, 10, 115, 
	10, 116, 10, 115, 10, 101, 10, 110, 
	10, 97, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 109, 10, 105, 116, 10, 
	105, 10, 97, 10, 117, 10, 115, 10, 
	116, 97, 117, 115, 116, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 69, 74, 
	75, 79, 82, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 101, 10, 108, 
	10, 100, 10, 97, 10, 100, 10, 101, 
	10, 115, 10, 97, 10, 117, 10, 105, 
	10, 32, 100, 10, 109, 10, 97, 10, 
	100, 10, 117, 10, 115, 10, 58, 10, 
	97, 10, 97, 10, 109, 10, 115, 10, 
	116, 10, 115, 10, 101, 10, 110, 10, 
	97, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 109, 10, 105, 116, 10, 105, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 69, 74, 75, 79, 
	82, 83, 84, 124, 9, 13, 187, 191, 
	0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 15, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 4, 3, 
	2, 4, 15, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	113, 118, 125, 130, 132, 134, 136, 138, 
	140, 142, 144, 147, 149, 151, 153, 155, 
	157, 159, 161, 163, 165, 172, 175, 178, 
	181, 184, 187, 190, 207, 209, 211, 214, 
	216, 218, 220, 222, 224, 226, 228, 230, 
	242, 245, 248, 251, 254, 257, 260, 263, 
	266, 269, 272, 275, 278, 281, 284, 287, 
	290, 293, 296, 299, 302, 305, 308, 311, 
	314, 317, 320, 323, 326, 329, 332, 335, 
	338, 341, 344, 347, 350, 353, 356, 359, 
	362, 365, 368, 371, 374, 377, 379, 381, 
	383, 385, 387, 389, 391, 393, 395, 397, 
	399, 401, 403, 405, 407, 409, 411, 424, 
	427, 430, 433, 436, 439, 442, 445, 448, 
	451, 454, 457, 460, 463, 466, 469, 472, 
	475, 478, 481, 484, 487, 490, 493, 496, 
	499, 503, 506, 509, 512, 515, 518, 521, 
	525, 528, 531, 534, 537, 540, 543, 546, 
	549, 552, 555, 558, 560, 562, 564, 566, 
	568, 570, 572, 574, 576, 578, 580, 582, 
	584, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 638, 641, 
	644, 647, 650, 653, 656, 659, 662, 665, 
	668, 671, 674, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 708, 711, 714, 
	717, 720, 723, 726, 729, 732, 735, 738, 
	742, 745, 748, 751, 754, 757, 759, 761, 
	763, 765, 767, 769, 771, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 864, 
	867, 870, 873, 876, 879, 882, 885, 888, 
	891, 894, 897, 900, 903, 906, 909, 912, 
	915, 918, 921, 924, 928, 931, 935, 941, 
	945, 948, 954, 971, 973, 975
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 0, 56, 58, 59, 
	57, 0, 0, 0, 0, 60, 61, 62, 
	61, 61, 64, 63, 60, 2, 65, 7, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 71, 0, 72, 0, 
	72, 73, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 79, 0, 80, 
	0, 82, 81, 84, 83, 84, 85, 86, 
	87, 86, 85, 83, 84, 88, 83, 84, 
	89, 83, 84, 90, 83, 84, 91, 83, 
	84, 92, 83, 84, 93, 83, 95, 94, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 94, 0, 109, 
	0, 110, 0, 55, 72, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 118, 117, 120, 119, 120, 121, 
	122, 123, 122, 124, 125, 126, 127, 128, 
	121, 119, 120, 129, 119, 120, 130, 119, 
	120, 131, 119, 120, 132, 119, 120, 133, 
	119, 120, 134, 119, 120, 135, 119, 120, 
	136, 119, 120, 137, 119, 120, 138, 119, 
	120, 139, 119, 120, 140, 119, 120, 141, 
	119, 120, 142, 119, 120, 143, 119, 120, 
	144, 119, 120, 145, 119, 120, 146, 119, 
	120, 147, 119, 120, 148, 119, 120, 149, 
	119, 120, 150, 119, 120, 151, 119, 120, 
	152, 119, 120, 153, 119, 120, 154, 119, 
	120, 149, 119, 120, 155, 119, 120, 156, 
	119, 120, 157, 119, 120, 158, 119, 120, 
	159, 119, 120, 160, 119, 120, 161, 119, 
	120, 162, 119, 120, 163, 119, 120, 164, 
	119, 120, 165, 119, 120, 166, 119, 120, 
	167, 119, 120, 149, 119, 120, 168, 119, 
	120, 169, 119, 120, 170, 119, 120, 149, 
	119, 171, 0, 172, 0, 173, 0, 174, 
	0, 175, 0, 176, 0, 177, 0, 178, 
	0, 179, 0, 180, 0, 181, 0, 182, 
	0, 183, 0, 184, 0, 185, 0, 187, 
	186, 189, 188, 189, 190, 191, 192, 193, 
	191, 194, 195, 196, 197, 198, 190, 188, 
	189, 199, 188, 189, 200, 188, 189, 201, 
	188, 189, 202, 188, 189, 203, 188, 189, 
	204, 188, 189, 205, 188, 189, 206, 188, 
	189, 207, 188, 189, 208, 188, 189, 209, 
	188, 189, 210, 188, 189, 211, 188, 189, 
	212, 188, 189, 213, 188, 189, 214, 188, 
	189, 215, 188, 189, 216, 188, 189, 217, 
	188, 189, 218, 188, 189, 219, 188, 189, 
	220, 188, 189, 220, 188, 189, 221, 188, 
	189, 222, 188, 189, 213, 220, 188, 189, 
	223, 188, 189, 224, 188, 189, 225, 188, 
	189, 226, 188, 189, 227, 188, 189, 213, 
	188, 189, 228, 229, 188, 189, 219, 188, 
	189, 230, 188, 189, 231, 188, 189, 232, 
	188, 189, 233, 188, 189, 234, 188, 189, 
	235, 188, 189, 236, 188, 189, 237, 188, 
	189, 227, 188, 238, 239, 0, 71, 0, 
	240, 0, 241, 0, 242, 0, 243, 0, 
	244, 0, 245, 0, 246, 0, 247, 0, 
	248, 0, 249, 0, 251, 250, 253, 252, 
	253, 254, 255, 256, 257, 255, 258, 259, 
	260, 261, 262, 263, 264, 254, 252, 253, 
	265, 252, 253, 266, 252, 253, 267, 252, 
	253, 268, 252, 253, 269, 252, 253, 270, 
	252, 253, 271, 252, 253, 272, 252, 253, 
	273, 252, 253, 274, 252, 253, 275, 252, 
	253, 276, 252, 253, 277, 252, 253, 278, 
	252, 253, 279, 252, 253, 280, 252, 253, 
	281, 252, 253, 282, 252, 253, 283, 252, 
	253, 284, 252, 253, 285, 252, 253, 286, 
	252, 253, 286, 252, 253, 287, 252, 253, 
	288, 252, 253, 279, 286, 252, 253, 289, 
	252, 253, 290, 252, 253, 291, 252, 253, 
	292, 252, 253, 293, 252, 253, 279, 252, 
	253, 294, 252, 253, 295, 252, 253, 296, 
	252, 253, 297, 252, 253, 298, 252, 253, 
	299, 252, 253, 300, 252, 253, 301, 252, 
	253, 302, 252, 253, 303, 252, 253, 304, 
	252, 253, 305, 252, 253, 306, 252, 253, 
	293, 252, 253, 307, 298, 252, 253, 285, 
	252, 253, 308, 252, 253, 309, 252, 253, 
	310, 252, 253, 293, 252, 311, 0, 312, 
	0, 313, 0, 314, 0, 315, 0, 317, 
	316, 319, 318, 319, 320, 321, 322, 323, 
	321, 324, 325, 326, 327, 328, 329, 320, 
	318, 319, 330, 318, 319, 331, 318, 319, 
	332, 318, 319, 333, 318, 319, 334, 318, 
	319, 335, 318, 319, 336, 318, 319, 337, 
	318, 319, 338, 318, 319, 339, 318, 319, 
	340, 318, 319, 341, 318, 319, 342, 318, 
	319, 343, 318, 319, 344, 318, 319, 345, 
	318, 319, 346, 318, 319, 347, 318, 319, 
	348, 318, 319, 349, 318, 319, 350, 318, 
	319, 351, 318, 319, 351, 318, 319, 352, 
	318, 319, 353, 318, 319, 344, 351, 318, 
	319, 354, 318, 319, 355, 318, 319, 356, 
	318, 319, 357, 318, 319, 358, 318, 319, 
	344, 318, 319, 359, 318, 319, 360, 318, 
	319, 361, 318, 319, 362, 318, 319, 363, 
	318, 319, 364, 318, 319, 365, 318, 319, 
	366, 318, 319, 367, 318, 319, 368, 318, 
	319, 369, 318, 319, 370, 318, 319, 371, 
	318, 319, 358, 318, 319, 372, 363, 318, 
	319, 350, 318, 373, 374, 373, 0, 377, 
	376, 378, 379, 376, 375, 0, 381, 382, 
	380, 0, 381, 380, 377, 383, 381, 382, 
	383, 380, 377, 384, 385, 386, 387, 388, 
	389, 390, 391, 392, 393, 394, 395, 396, 
	397, 384, 0, 398, 0, 1, 0, 399, 
	0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 42, 60, 63, 117, 178, 245, 301, 
	307, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 309, 30, 
	31, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 37, 38, 39, 40, 41, 
	29, 43, 44, 45, 46, 47, 48, 49, 
	50, 51, 52, 51, 52, 52, 2, 53, 
	54, 55, 56, 57, 58, 59, 2, 2, 
	3, 13, 15, 29, 32, 35, 42, 60, 
	63, 117, 178, 245, 301, 61, 62, 64, 
	65, 66, 67, 68, 69, 70, 71, 70, 
	71, 71, 2, 72, 86, 94, 99, 103, 
	113, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 2, 87, 
	88, 89, 90, 91, 92, 93, 59, 95, 
	96, 97, 98, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	114, 115, 116, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 133, 134, 134, 2, 
	135, 149, 150, 157, 158, 161, 167, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 2, 59, 151, 152, 
	153, 154, 155, 156, 149, 159, 160, 162, 
	163, 164, 165, 166, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 177, 179, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 191, 192, 192, 2, 
	193, 207, 208, 215, 216, 219, 225, 239, 
	241, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 2, 59, 
	209, 210, 211, 212, 213, 214, 207, 217, 
	218, 220, 221, 222, 223, 224, 226, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 240, 242, 243, 244, 246, 
	247, 248, 249, 250, 251, 252, 251, 252, 
	252, 2, 253, 267, 268, 275, 276, 279, 
	285, 299, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 2, 
	59, 269, 270, 271, 272, 273, 274, 267, 
	277, 278, 280, 281, 282, 283, 284, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 300, 301, 302, 303, 
	305, 306, 304, 302, 303, 304, 302, 305, 
	306, 3, 13, 15, 29, 32, 35, 42, 
	60, 63, 117, 178, 245, 301, 308, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 21, 31, 126, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 99, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 309;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 609 "js/lib/gherkin/lexer/et.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */
  
/* line 616 "js/lib/gherkin/lexer/et.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 843 "js/lib/gherkin/lexer/et.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 882 "js/lib/gherkin/lexer/et.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/et.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/et', [], function() {return Lexer});
}

})();
