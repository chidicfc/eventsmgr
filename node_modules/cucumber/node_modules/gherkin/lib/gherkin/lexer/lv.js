
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */



/* line 11 "js/lib/gherkin/lexer/lv.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	92, 97, 104, 109, 110, 111, 113, 114, 
	115, 116, 117, 118, 119, 120, 131, 133, 
	135, 137, 139, 141, 143, 145, 147, 149, 
	151, 153, 155, 157, 159, 162, 164, 166, 
	168, 170, 172, 190, 191, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 362, 365, 367, 369, 371, 373, 375, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 403, 404, 405, 
	406, 407, 408, 409, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 451, 453, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	473, 475, 477, 479, 481, 483, 485, 488, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	553, 554, 569, 571, 573, 575, 577, 579, 
	581, 583, 585, 587, 589, 591, 593, 595, 
	597, 599, 601, 603, 606, 608, 610, 612, 
	614, 616, 618, 620, 622, 624, 626, 628, 
	630, 632, 634, 636, 638, 640, 642, 644, 
	646, 649, 651, 653, 655, 657, 659, 661, 
	663, 665, 668, 670, 672, 674, 676, 678, 
	680, 682, 684, 687, 689, 691, 693, 695, 
	697, 699, 701, 703, 705, 707, 709, 711, 
	713, 715, 717, 719, 721, 723, 725, 727, 
	728, 729, 730, 731, 732, 733, 734, 735, 
	736, 737, 741, 747, 750, 752, 758, 776, 
	778, 780, 782, 784, 786, 788, 790, 792, 
	794, 796, 798, 800, 802, 804, 806, 808, 
	810, 812, 814, 816, 818, 820, 823, 825, 
	827, 829, 831, 833, 835, 837, 839, 841, 
	843, 846, 848, 850, 852, 854, 856, 858, 
	860, 862, 865, 867, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 902, 903, 904, 
	905, 906, 907, 908, 909, 910, 911, 912, 
	913, 914, 915, 916, 917
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	70, 74, 75, 80, 83, 84, 85, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 66, 70, 74, 75, 80, 83, 
	84, 85, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 101, 116, -60, 
	117, -85, -60, -115, 97, 58, 10, 10, 
	10, 32, 35, 37, 64, 70, 75, 80, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -60, 
	10, 117, -85, 10, -60, 10, -115, 10, 
	10, 97, 10, 58, 10, 32, 34, 35, 
	37, 42, 64, 66, 70, 74, 75, 80, 
	83, 84, 85, 124, 9, 13, 97, 97, 
	111, 100, 110, 116, 101, 107, 115, 116, 
	115, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 66, 70, 74, 75, 83, 84, 
	85, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 101, 10, 116, -60, 10, 117, 
	-85, 10, -60, 10, -115, 10, 10, 97, 
	10, 58, 10, 110, 10, 107, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -60, 10, 
	-127, 10, 10, 116, 10, 101, 10, 97, 
	10, 97, 10, 100, 10, 99, 10, 101, 
	10, 110, -60, 10, -127, 10, 10, 114, 
	10, 105, 10, 106, 10, 115, 10, 32, 
	58, 10, 112, -60, 10, -109, 10, 10, 
	99, 10, 32, 10, 112, 10, 97, 10, 
	114, 10, 97, 10, 117, 10, 103, 10, 
	110, 97, 105, 114, 97, 117, 103, 115, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, -60, 10, 117, -85, 10, -60, 
	10, -115, 10, 10, 97, 10, 58, 10, 
	110, 10, 107, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -60, 10, -127, 10, 10, 
	116, 10, 101, 101, 109, -60, -109, 114, 
	105, 99, 105, 101, 110, -60, -127, 114, 
	105, 106, 115, 32, 58, 112, -60, -109, 
	99, 32, 112, 97, 114, 97, 117, 103, 
	97, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 66, 70, 74, 75, 83, 84, 
	85, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 101, 10, 116, -60, 10, 117, 
	-85, 10, -60, 10, -115, 10, 10, 97, 
	10, 58, 10, 110, 10, 107, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -60, 10, 
	-127, 10, 10, 116, 10, 101, 10, 97, 
	10, 97, 10, 100, 10, 99, 10, 101, 
	10, 110, -60, 10, -127, 10, 10, 114, 
	10, 105, 10, 106, 10, 115, 10, 110, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 70, 74, 75, 83, 84, 85, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	101, 10, 116, -60, 10, 117, -85, 10, 
	-60, 10, -115, 10, 10, 97, 10, 58, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -60, 10, -127, 10, 
	10, 116, 10, 101, 10, 97, 10, 97, 
	111, 10, 100, 10, 110, 10, 116, 10, 
	101, 10, 107, 10, 115, 10, 116, 10, 
	115, 10, 99, 105, 10, 101, 10, 110, 
	-60, 10, -127, 10, 10, 114, 10, 105, 
	10, 106, 10, 115, 10, 32, 58, 10, 
	112, -60, 10, -109, 10, 10, 99, 10, 
	32, 10, 112, 10, 97, 10, 114, 10, 
	97, 10, 117, 10, 103, 10, 116, 10, 
	117, -60, 10, -127, 10, 10, 99, 10, 
	105, 10, 106, 10, 97, 10, 110, 116, 
	117, -60, -127, 99, 105, 106, 97, 97, 
	110, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 66, 70, 74, 
	75, 80, 83, 84, 85, 124, 9, 13, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -60, 10, -127, 10, 
	10, 116, 10, 101, 10, 111, 10, 110, 
	10, 116, 10, 101, 10, 107, 10, 115, 
	10, 116, 10, 115, 10, 97, 105, 10, 
	114, 10, 97, 10, 117, 10, 103, 10, 
	101, 10, 109, -60, 10, -109, 10, 10, 
	114, 10, 105, 10, 99, 105, 10, 101, 
	10, 110, -60, 10, -127, 10, 10, 114, 
	10, 105, 10, 106, 10, 115, 10, 32, 
	58, 10, 112, -60, 10, -109, 10, 10, 
	99, 10, 32, 10, 112, 10, 97, 10, 
	114, 10, 97, 10, 117, 10, 103, 10, 
	116, 10, 117, -60, 10, -127, 10, 10, 
	99, 10, 105, 10, 106, 110, 107, 99, 
	105, 111, 110, 97, 108, 105, 116, -60, 
	-127, 116, 101, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 16, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 16, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	115, 120, 127, 132, 134, 136, 139, 141, 
	143, 145, 147, 149, 151, 153, 164, 167, 
	170, 173, 176, 179, 182, 185, 188, 191, 
	194, 197, 200, 203, 206, 210, 213, 216, 
	219, 222, 225, 243, 245, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 
	270, 285, 288, 291, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 340, 343, 346, 349, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 382, 385, 388, 391, 394, 397, 400, 
	403, 406, 409, 412, 415, 418, 421, 424, 
	427, 430, 433, 437, 440, 443, 446, 449, 
	452, 455, 458, 461, 464, 467, 470, 473, 
	476, 478, 480, 482, 484, 486, 488, 490, 
	492, 499, 503, 506, 509, 512, 515, 518, 
	521, 524, 527, 530, 533, 536, 539, 542, 
	545, 548, 551, 554, 557, 560, 562, 564, 
	566, 568, 570, 572, 575, 577, 579, 581, 
	583, 585, 587, 589, 591, 594, 596, 598, 
	600, 602, 604, 606, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 639, 642, 645, 
	648, 651, 654, 657, 660, 663, 666, 669, 
	672, 675, 678, 681, 684, 687, 690, 694, 
	697, 700, 703, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 733, 736, 739, 742, 
	745, 748, 751, 754, 757, 760, 763, 766, 
	769, 772, 775, 778, 781, 784, 787, 790, 
	792, 794, 809, 812, 815, 818, 821, 824, 
	827, 830, 833, 836, 839, 842, 845, 848, 
	851, 854, 857, 860, 864, 867, 870, 873, 
	876, 879, 882, 885, 888, 891, 894, 897, 
	900, 903, 906, 909, 912, 915, 918, 921, 
	924, 928, 931, 934, 937, 940, 943, 946, 
	949, 952, 956, 959, 962, 965, 968, 971, 
	974, 977, 980, 984, 987, 990, 993, 996, 
	999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 
	1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 
	1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 
	1062, 1064, 1068, 1074, 1078, 1081, 1087, 1105, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1168, 1171, 1175, 1178, 
	1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 
	1205, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 
	1230, 1233, 1237, 1240, 1243, 1246, 1249, 1252, 
	1255, 1258, 1261, 1264, 1267, 1270, 1273, 1276, 
	1279, 1282, 1285, 1288, 1291, 1293, 1295, 1297, 
	1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 
	1315, 1317, 1319, 1321, 1323
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 0, 57, 
	59, 60, 58, 0, 0, 0, 0, 61, 
	62, 63, 62, 62, 65, 64, 61, 2, 
	66, 7, 66, 0, 67, 0, 68, 0, 
	69, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 77, 76, 79, 
	78, 79, 80, 81, 82, 81, 83, 84, 
	85, 86, 80, 78, 79, 87, 78, 79, 
	88, 78, 79, 89, 78, 79, 90, 78, 
	79, 91, 78, 79, 92, 78, 79, 93, 
	78, 79, 94, 78, 79, 95, 78, 79, 
	96, 78, 79, 97, 78, 79, 98, 78, 
	79, 99, 78, 79, 100, 78, 101, 79, 
	102, 78, 103, 79, 78, 104, 79, 78, 
	105, 79, 78, 79, 106, 78, 79, 107, 
	78, 109, 108, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 108, 0, 68, 0, 124, 125, 0, 
	68, 0, 126, 0, 127, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 135, 134, 137, 136, 137, 138, 
	139, 140, 141, 139, 142, 143, 144, 145, 
	146, 145, 147, 138, 136, 137, 148, 136, 
	137, 149, 136, 137, 150, 136, 137, 151, 
	136, 137, 152, 136, 137, 153, 136, 137, 
	154, 136, 137, 155, 136, 137, 156, 136, 
	137, 157, 136, 137, 158, 136, 137, 159, 
	136, 137, 160, 136, 137, 161, 136, 137, 
	162, 136, 137, 163, 136, 137, 164, 136, 
	165, 137, 166, 136, 167, 137, 136, 168, 
	137, 136, 169, 137, 136, 137, 170, 136, 
	137, 162, 136, 137, 171, 136, 137, 172, 
	136, 137, 173, 136, 137, 174, 136, 137, 
	175, 136, 137, 176, 136, 137, 177, 136, 
	137, 178, 136, 137, 179, 136, 137, 180, 
	136, 181, 137, 136, 182, 137, 136, 137, 
	183, 136, 137, 170, 136, 137, 164, 136, 
	137, 184, 136, 137, 164, 136, 137, 185, 
	136, 137, 186, 136, 137, 187, 136, 188, 
	137, 136, 189, 137, 136, 137, 190, 136, 
	137, 191, 136, 137, 192, 136, 137, 193, 
	136, 137, 194, 162, 136, 137, 195, 136, 
	196, 137, 136, 197, 137, 136, 137, 198, 
	136, 137, 199, 136, 137, 200, 136, 137, 
	201, 136, 137, 202, 136, 137, 203, 136, 
	137, 204, 136, 137, 169, 136, 137, 164, 
	136, 205, 206, 0, 207, 0, 208, 0, 
	209, 0, 210, 0, 211, 0, 212, 0, 
	214, 213, 216, 215, 216, 217, 218, 219, 
	218, 217, 215, 220, 216, 221, 215, 222, 
	216, 215, 223, 216, 215, 224, 216, 215, 
	216, 225, 215, 216, 226, 215, 216, 227, 
	215, 216, 228, 215, 216, 229, 215, 216, 
	230, 215, 216, 231, 215, 216, 232, 215, 
	216, 233, 215, 216, 234, 215, 216, 235, 
	215, 216, 236, 215, 237, 216, 215, 238, 
	216, 215, 216, 239, 215, 216, 225, 215, 
	240, 0, 241, 0, 242, 0, 243, 0, 
	244, 0, 211, 0, 245, 246, 0, 247, 
	0, 248, 0, 249, 0, 250, 0, 251, 
	0, 252, 0, 253, 0, 254, 0, 255, 
	256, 0, 257, 0, 258, 0, 259, 0, 
	260, 0, 261, 0, 262, 0, 263, 0, 
	264, 0, 265, 0, 266, 0, 267, 0, 
	268, 0, 269, 0, 271, 270, 273, 272, 
	273, 274, 275, 276, 277, 275, 278, 279, 
	280, 281, 282, 281, 283, 274, 272, 273, 
	284, 272, 273, 285, 272, 273, 286, 272, 
	273, 287, 272, 273, 288, 272, 273, 289, 
	272, 273, 290, 272, 273, 291, 272, 273, 
	292, 272, 273, 293, 272, 273, 294, 272, 
	273, 295, 272, 273, 296, 272, 273, 297, 
	272, 273, 298, 272, 273, 299, 272, 273, 
	300, 272, 301, 273, 302, 272, 303, 273, 
	272, 304, 273, 272, 305, 273, 272, 273, 
	306, 272, 273, 298, 272, 273, 307, 272, 
	273, 308, 272, 273, 309, 272, 273, 310, 
	272, 273, 311, 272, 273, 312, 272, 273, 
	313, 272, 273, 314, 272, 273, 315, 272, 
	273, 316, 272, 317, 273, 272, 318, 273, 
	272, 273, 319, 272, 273, 306, 272, 273, 
	300, 272, 273, 320, 272, 273, 300, 272, 
	273, 321, 272, 273, 322, 272, 273, 323, 
	272, 324, 273, 272, 325, 273, 272, 273, 
	326, 272, 273, 327, 272, 273, 328, 272, 
	273, 306, 272, 273, 300, 272, 330, 329, 
	332, 331, 332, 333, 334, 335, 336, 334, 
	337, 338, 339, 340, 341, 342, 343, 333, 
	331, 332, 344, 331, 332, 345, 331, 332, 
	346, 331, 332, 347, 331, 332, 348, 331, 
	332, 349, 331, 332, 350, 331, 332, 351, 
	331, 332, 352, 331, 332, 353, 331, 332, 
	354, 331, 332, 355, 331, 332, 356, 331, 
	332, 357, 331, 332, 358, 331, 332, 359, 
	331, 332, 360, 331, 361, 332, 362, 331, 
	363, 332, 331, 364, 332, 331, 365, 332, 
	331, 332, 366, 331, 332, 358, 331, 332, 
	367, 331, 332, 368, 331, 332, 369, 331, 
	332, 370, 331, 332, 371, 331, 332, 372, 
	331, 332, 373, 331, 332, 374, 331, 332, 
	375, 331, 332, 376, 331, 377, 332, 331, 
	378, 332, 331, 332, 379, 331, 332, 366, 
	331, 332, 360, 331, 332, 380, 381, 331, 
	332, 360, 331, 332, 382, 331, 332, 383, 
	331, 332, 384, 331, 332, 385, 331, 332, 
	386, 331, 332, 387, 331, 332, 366, 331, 
	332, 388, 389, 331, 332, 390, 331, 332, 
	391, 331, 392, 332, 331, 393, 332, 331, 
	332, 394, 331, 332, 395, 331, 332, 396, 
	331, 332, 397, 331, 332, 398, 358, 331, 
	332, 399, 331, 400, 332, 331, 401, 332, 
	331, 332, 402, 331, 332, 403, 331, 332, 
	404, 331, 332, 405, 331, 332, 406, 331, 
	332, 407, 331, 332, 408, 331, 332, 365, 
	331, 332, 409, 331, 332, 410, 331, 411, 
	332, 331, 412, 332, 331, 332, 413, 331, 
	332, 414, 331, 332, 365, 331, 332, 380, 
	331, 332, 360, 331, 415, 0, 416, 0, 
	417, 0, 418, 0, 419, 0, 420, 0, 
	421, 0, 132, 0, 124, 0, 68, 0, 
	422, 423, 422, 0, 426, 425, 427, 428, 
	425, 424, 0, 430, 431, 429, 0, 430, 
	429, 426, 432, 430, 431, 432, 429, 426, 
	433, 434, 435, 436, 437, 438, 439, 440, 
	441, 442, 443, 444, 445, 446, 447, 433, 
	0, 79, 448, 78, 79, 449, 78, 79, 
	450, 78, 79, 451, 78, 79, 452, 78, 
	79, 453, 78, 79, 454, 78, 79, 455, 
	78, 79, 456, 78, 79, 457, 78, 458, 
	79, 78, 459, 79, 78, 79, 460, 78, 
	79, 106, 78, 79, 461, 78, 79, 462, 
	78, 79, 463, 78, 79, 464, 78, 79, 
	465, 78, 79, 466, 78, 79, 467, 78, 
	79, 106, 78, 79, 468, 469, 78, 79, 
	470, 78, 79, 471, 78, 79, 472, 78, 
	79, 467, 78, 79, 473, 78, 79, 474, 
	78, 475, 79, 78, 476, 79, 78, 79, 
	477, 78, 79, 106, 78, 79, 478, 479, 
	78, 79, 480, 78, 79, 481, 78, 482, 
	79, 78, 483, 79, 78, 79, 484, 78, 
	79, 485, 78, 79, 486, 78, 79, 487, 
	78, 79, 488, 107, 78, 79, 489, 78, 
	490, 79, 78, 491, 79, 78, 79, 492, 
	78, 79, 493, 78, 79, 494, 78, 79, 
	495, 78, 79, 496, 78, 79, 497, 78, 
	79, 498, 78, 79, 105, 78, 79, 499, 
	78, 79, 500, 78, 501, 79, 78, 502, 
	79, 78, 79, 503, 78, 79, 504, 78, 
	79, 105, 78, 505, 0, 506, 0, 507, 
	0, 508, 0, 509, 0, 510, 0, 511, 
	0, 512, 0, 513, 0, 514, 0, 515, 
	0, 516, 0, 517, 0, 74, 0, 518, 
	0, 1, 0, 519, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 67, 68, 143, 179, 343, 344, 
	345, 426, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 428, 
	30, 31, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 29, 38, 412, 39, 
	40, 41, 42, 43, 44, 45, 44, 45, 
	45, 2, 46, 60, 365, 373, 384, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 57, 58, 59, 2, 61, 351, 62, 
	63, 64, 65, 66, 2, 2, 3, 13, 
	15, 29, 32, 35, 37, 67, 68, 143, 
	179, 343, 344, 345, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	79, 80, 80, 2, 81, 95, 96, 98, 
	118, 119, 121, 142, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 2, 66, 97, 95, 99, 104, 100, 
	101, 102, 103, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	120, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 144, 173, 145, 
	146, 147, 148, 149, 150, 151, 152, 151, 
	152, 152, 2, 153, 154, 159, 155, 156, 
	157, 158, 66, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 171, 172, 
	174, 175, 176, 177, 178, 180, 335, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	255, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	203, 204, 204, 2, 205, 219, 220, 222, 
	242, 243, 245, 254, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 2, 66, 221, 219, 223, 228, 224, 
	225, 226, 227, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	244, 246, 247, 248, 249, 250, 251, 252, 
	253, 256, 257, 256, 257, 257, 2, 258, 
	272, 273, 275, 295, 296, 305, 333, 334, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 2, 66, 274, 
	272, 276, 281, 277, 278, 279, 280, 282, 
	283, 284, 285, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 297, 298, 299, 300, 
	301, 302, 303, 304, 306, 326, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	317, 318, 319, 320, 321, 322, 323, 324, 
	325, 327, 328, 329, 330, 331, 332, 336, 
	337, 338, 339, 340, 341, 342, 345, 346, 
	347, 349, 350, 348, 346, 347, 348, 346, 
	349, 350, 3, 13, 15, 29, 32, 35, 
	37, 67, 68, 143, 179, 343, 344, 345, 
	352, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 366, 367, 368, 
	369, 370, 371, 372, 374, 378, 375, 376, 
	377, 379, 380, 381, 382, 383, 385, 405, 
	386, 387, 388, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 404, 406, 407, 408, 409, 410, 
	411, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 422, 423, 424, 425, 427, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 13, 31, 126, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 0, 93, 90, 41, 96, 90, 96, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 428;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 785 "js/lib/gherkin/lexer/lv.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */
  
/* line 792 "js/lib/gherkin/lexer/lv.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1019 "js/lib/gherkin/lexer/lv.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1058 "js/lib/gherkin/lexer/lv.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/lv', [], function() {return Lexer});
}

})();
