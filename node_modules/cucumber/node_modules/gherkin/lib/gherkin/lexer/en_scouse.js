
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_scouse.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	94, 99, 106, 111, 112, 113, 114, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 234, 236, 
	238, 240, 242, 244, 246, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	319, 321, 323, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 373, 375, 377, 379, 381, 
	383, 385, 387, 389, 391, 393, 395, 397, 
	399, 401, 403, 405, 407, 409, 411, 413, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 484, 
	486, 488, 490, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 570, 572, 574, 576, 578, 580, 582, 
	584, 586, 588, 590, 592, 594, 596, 598, 
	600, 602, 604, 606, 608, 610, 612, 615, 
	617, 619, 621, 623, 625, 627, 629, 631, 
	633, 635, 637, 639, 641, 643, 645, 647, 
	649, 651, 654, 656, 658, 660, 662, 664, 
	666, 668, 670, 672, 674, 676, 678, 680, 
	682, 684, 686, 688, 690, 692, 694, 696, 
	697, 698, 699, 700, 701, 702, 703, 704, 
	705, 706, 707, 708, 709, 710, 726, 728, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 825, 
	827, 829, 831, 833, 835, 837, 839, 841, 
	843, 845, 847, 849, 851, 853, 855, 857, 
	859, 861, 863, 865, 868, 870, 872, 874, 
	876, 878, 880, 882, 884, 886, 888, 890, 
	892, 894, 896, 898, 900, 902, 904, 906, 
	908, 909, 910, 911, 912, 913, 914, 915, 
	916, 917, 918, 920, 921, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	944, 950, 953, 955, 961, 980, 982, 984, 
	986, 989, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 
	1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 
	1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 
	1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 
	1067, 1069, 1072, 1074, 1076, 1078, 1080, 1082, 
	1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 
	1100, 1102, 1104, 1106, 1108, 1111, 1113, 1115, 
	1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 
	1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 
	1149, 1151, 1152, 1153
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 70, 71, 84, 87, 89, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 69, 70, 
	71, 84, 87, 89, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 110, 
	117, 104, 101, 105, 117, 110, 32, 121, 
	111, 117, 115, 101, 32, 103, 111, 116, 
	116, 97, 115, 32, 105, 115, 32, 119, 
	104, 97, 116, 32, 119, 101, 110, 116, 
	32, 100, 111, 119, 110, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 66, 
	68, 70, 71, 84, 87, 89, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 68, 
	69, 70, 71, 84, 87, 89, 124, 9, 
	13, 120, 97, 109, 112, 108, 101, 115, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 58, 
	101, 97, 116, 117, 114, 101, 58, 10, 
	10, 10, 32, 35, 37, 64, 68, 69, 
	70, 84, 87, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 105, 10, 115, 10, 32, 10, 
	105, 10, 115, 10, 32, 10, 119, 10, 
	104, 10, 97, 10, 116, 10, 32, 10, 
	119, 10, 101, 10, 110, 10, 116, 10, 
	32, 10, 100, 10, 111, 10, 119, 10, 
	110, 10, 58, 10, 120, 10, 97, 10, 
	109, 10, 112, 10, 108, 10, 101, 10, 
	115, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 104, 10, 
	101, 10, 32, 10, 116, 10, 104, 10, 
	105, 10, 110, 10, 103, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 105, 10, 
	116, 10, 32, 10, 105, 10, 104, 10, 
	97, 10, 114, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 97, 10, 110, 105, 
	118, 117, 104, 101, 32, 116, 104, 105, 
	110, 103, 32, 111, 102, 32, 105, 116, 
	32, 105, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	71, 84, 87, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 110, 10, 117, 
	10, 104, 10, 101, 105, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 115, 10, 32, 10, 105, 10, 115, 
	10, 32, 10, 119, 10, 104, 10, 97, 
	10, 116, 10, 32, 10, 119, 10, 101, 
	10, 110, 10, 116, 10, 32, 10, 100, 
	10, 111, 10, 119, 10, 110, 10, 58, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 105, 10, 118, 
	10, 117, 10, 104, 10, 101, 10, 32, 
	10, 116, 10, 104, 10, 105, 10, 110, 
	10, 103, 10, 32, 10, 111, 10, 102, 
	10, 32, 10, 105, 10, 116, 10, 32, 
	10, 105, 10, 115, 10, 104, 117, 10, 
	97, 10, 114, 10, 114, 10, 105, 10, 
	109, 10, 101, 10, 97, 10, 110, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 107, 10, 110, 10, 111, 10, 
	119, 10, 32, 10, 108, 119, 10, 105, 
	10, 107, 10, 101, 10, 32, 10, 119, 
	10, 104, 10, 101, 10, 104, 10, 101, 
	10, 110, 10, 32, 10, 121, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 103, 10, 111, 10, 116, 104, 117, 
	97, 114, 114, 105, 109, 101, 97, 110, 
	32, 105, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 68, 70, 
	71, 84, 87, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 110, 10, 117, 
	10, 104, 10, 101, 117, 10, 110, 10, 
	32, 10, 121, 10, 111, 10, 117, 10, 
	115, 10, 101, 10, 32, 10, 103, 10, 
	111, 10, 116, 10, 116, 10, 97, 10, 
	101, 10, 97, 10, 116, 10, 117, 10, 
	114, 10, 101, 10, 58, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	107, 10, 110, 10, 111, 10, 119, 10, 
	32, 10, 108, 119, 10, 105, 10, 107, 
	10, 101, 10, 32, 10, 119, 10, 104, 
	10, 101, 10, 104, 10, 101, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 111, 117, 115, 101, 
	32, 107, 110, 111, 119, 32, 108, 119, 
	105, 107, 101, 32, 119, 104, 101, 104, 
	101, 110, 32, 121, 111, 117, 115, 101, 
	32, 103, 111, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 69, 70, 71, 84, 87, 
	89, 124, 9, 13, 10, 110, 10, 117, 
	10, 104, 10, 101, 117, 10, 110, 10, 
	32, 10, 121, 10, 111, 10, 117, 10, 
	115, 10, 101, 10, 32, 10, 103, 10, 
	111, 10, 116, 10, 116, 10, 97, 10, 
	101, 10, 97, 10, 116, 10, 117, 10, 
	114, 10, 101, 10, 58, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 104, 117, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 107, 10, 110, 10, 111, 
	10, 119, 10, 32, 10, 108, 119, 10, 
	105, 10, 107, 10, 101, 10, 32, 10, 
	119, 10, 104, 10, 101, 10, 104, 10, 
	101, 10, 110, 10, 32, 10, 121, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 103, 10, 111, 10, 116, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	4, 3, 2, 4, 17, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	117, 122, 129, 134, 136, 138, 140, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 230, 233, 236, 239, 242, 
	245, 248, 251, 254, 257, 260, 263, 266, 
	269, 272, 275, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 321, 324, 
	327, 330, 333, 336, 339, 342, 344, 346, 
	348, 350, 352, 354, 356, 358, 360, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 498, 501, 504, 507, 510, 513, 516, 
	519, 522, 525, 528, 531, 534, 537, 540, 
	543, 546, 549, 552, 555, 558, 561, 564, 
	567, 570, 573, 576, 579, 582, 585, 588, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	653, 656, 659, 662, 665, 668, 671, 674, 
	677, 680, 683, 686, 689, 692, 695, 698, 
	701, 704, 707, 712, 715, 718, 721, 724, 
	727, 730, 733, 736, 739, 742, 745, 748, 
	751, 754, 757, 760, 763, 766, 769, 772, 
	775, 778, 781, 784, 787, 790, 793, 796, 
	799, 802, 805, 808, 811, 814, 817, 820, 
	823, 826, 829, 832, 835, 838, 841, 844, 
	847, 850, 853, 856, 859, 862, 865, 868, 
	871, 874, 877, 880, 883, 886, 889, 893, 
	896, 899, 902, 905, 908, 911, 914, 917, 
	920, 923, 926, 929, 932, 935, 938, 941, 
	944, 947, 951, 954, 957, 960, 963, 966, 
	969, 972, 975, 978, 981, 984, 987, 990, 
	993, 996, 999, 1002, 1005, 1008, 1011, 1014, 
	1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1042, 1058, 1061, 
	1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 
	1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109, 
	1112, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 
	1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 
	1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 
	1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 
	1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 
	1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 
	1257, 1260, 1263, 1266, 1270, 1273, 1276, 1279, 
	1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 
	1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327, 
	1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 
	1346, 1348, 1350, 1353, 1355, 1357, 1359, 1361, 
	1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 
	1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 
	1397, 1403, 1407, 1410, 1416, 1435, 1438, 1441, 
	1444, 1448, 1451, 1454, 1457, 1460, 1463, 1466, 
	1469, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 
	1493, 1496, 1499, 1502, 1505, 1508, 1511, 1514, 
	1517, 1520, 1523, 1526, 1529, 1532, 1535, 1538, 
	1541, 1544, 1547, 1550, 1553, 1556, 1559, 1562, 
	1565, 1568, 1572, 1575, 1578, 1581, 1584, 1587, 
	1590, 1593, 1596, 1599, 1602, 1605, 1608, 1611, 
	1614, 1617, 1620, 1623, 1626, 1630, 1633, 1636, 
	1639, 1642, 1645, 1648, 1651, 1654, 1657, 1660, 
	1663, 1666, 1669, 1672, 1675, 1678, 1681, 1684, 
	1687, 1690, 1692, 1694
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 22, 23, 21, 25, 26, 
	24, 29, 28, 30, 28, 27, 33, 32, 
	34, 32, 31, 33, 32, 35, 32, 31, 
	33, 32, 36, 32, 31, 38, 37, 37, 
	0, 2, 39, 39, 0, 41, 42, 40, 
	2, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	0, 58, 60, 61, 59, 0, 0, 0, 
	0, 62, 63, 64, 63, 63, 66, 65, 
	62, 2, 67, 7, 67, 0, 68, 0, 
	69, 0, 68, 0, 70, 71, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	68, 0, 85, 0, 86, 0, 87, 0, 
	88, 0, 89, 0, 90, 0, 91, 0, 
	92, 0, 93, 0, 94, 0, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 106, 105, 108, 107, 108, 109, 
	110, 111, 112, 110, 113, 114, 115, 116, 
	117, 118, 119, 120, 109, 107, 108, 121, 
	107, 108, 122, 107, 108, 123, 107, 108, 
	124, 107, 108, 125, 107, 108, 126, 107, 
	108, 127, 107, 108, 128, 107, 108, 129, 
	107, 108, 130, 107, 108, 131, 107, 108, 
	132, 107, 108, 133, 107, 108, 134, 107, 
	108, 135, 107, 137, 136, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 136, 0, 153, 0, 
	154, 0, 155, 0, 156, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 162, 161, 
	164, 163, 164, 165, 166, 167, 166, 165, 
	163, 164, 168, 163, 164, 169, 163, 164, 
	170, 163, 164, 171, 163, 164, 172, 163, 
	164, 173, 163, 164, 174, 163, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 0, 181, 0, 183, 182, 185, 184, 
	185, 186, 187, 188, 187, 189, 190, 191, 
	192, 193, 186, 184, 185, 194, 184, 185, 
	195, 184, 185, 196, 184, 185, 197, 184, 
	185, 198, 184, 185, 199, 184, 185, 200, 
	184, 185, 201, 184, 185, 202, 184, 185, 
	203, 184, 185, 204, 184, 185, 205, 184, 
	185, 206, 184, 185, 207, 184, 185, 208, 
	184, 185, 209, 184, 185, 210, 184, 185, 
	211, 184, 185, 212, 184, 185, 213, 184, 
	185, 214, 184, 185, 215, 184, 185, 216, 
	184, 185, 217, 184, 185, 218, 184, 185, 
	219, 184, 185, 220, 184, 185, 221, 184, 
	185, 222, 184, 185, 223, 184, 185, 224, 
	184, 185, 225, 184, 185, 226, 184, 185, 
	227, 184, 185, 228, 184, 185, 229, 184, 
	185, 230, 184, 185, 231, 184, 185, 232, 
	184, 185, 233, 184, 185, 234, 184, 185, 
	227, 184, 185, 235, 184, 185, 236, 184, 
	185, 237, 184, 185, 238, 184, 185, 239, 
	184, 185, 227, 184, 185, 240, 184, 185, 
	241, 184, 185, 242, 184, 185, 243, 184, 
	185, 244, 184, 185, 245, 184, 185, 246, 
	184, 185, 247, 184, 185, 248, 184, 185, 
	249, 184, 185, 250, 184, 185, 251, 184, 
	185, 252, 184, 185, 253, 184, 185, 254, 
	184, 185, 234, 184, 185, 255, 184, 185, 
	256, 184, 185, 257, 184, 185, 258, 184, 
	185, 259, 184, 185, 260, 184, 185, 261, 
	184, 185, 262, 184, 185, 253, 184, 263, 
	0, 264, 0, 72, 0, 265, 0, 266, 
	0, 267, 0, 268, 0, 269, 0, 270, 
	0, 271, 0, 272, 0, 273, 0, 274, 
	0, 275, 0, 276, 0, 277, 0, 278, 
	0, 279, 0, 280, 0, 281, 0, 282, 
	0, 284, 283, 286, 285, 286, 287, 288, 
	289, 290, 288, 291, 292, 293, 294, 295, 
	296, 297, 298, 287, 285, 286, 299, 285, 
	286, 300, 285, 286, 301, 285, 286, 302, 
	285, 286, 303, 285, 286, 304, 285, 286, 
	305, 285, 286, 306, 285, 286, 307, 285, 
	286, 308, 285, 286, 309, 285, 286, 310, 
	285, 286, 311, 285, 286, 312, 285, 286, 
	313, 285, 286, 314, 285, 286, 315, 285, 
	286, 314, 285, 286, 316, 317, 318, 285, 
	286, 319, 285, 286, 320, 285, 286, 321, 
	285, 286, 322, 285, 286, 323, 285, 286, 
	324, 285, 286, 325, 285, 286, 326, 285, 
	286, 327, 285, 286, 328, 285, 286, 329, 
	285, 286, 330, 285, 286, 314, 285, 286, 
	331, 285, 286, 332, 285, 286, 333, 285, 
	286, 334, 285, 286, 335, 285, 286, 336, 
	285, 286, 337, 285, 286, 338, 285, 286, 
	339, 285, 286, 340, 285, 286, 341, 285, 
	286, 342, 285, 286, 343, 285, 286, 344, 
	285, 286, 345, 285, 286, 346, 285, 286, 
	347, 285, 286, 348, 285, 286, 349, 285, 
	286, 313, 285, 286, 350, 285, 286, 351, 
	285, 286, 352, 285, 286, 353, 285, 286, 
	354, 285, 286, 349, 285, 286, 355, 285, 
	286, 356, 285, 286, 318, 285, 286, 357, 
	285, 286, 358, 285, 286, 359, 285, 286, 
	360, 285, 286, 361, 285, 286, 362, 285, 
	286, 363, 285, 286, 364, 285, 286, 365, 
	285, 286, 366, 285, 286, 367, 285, 286, 
	368, 285, 286, 369, 285, 286, 370, 285, 
	286, 371, 285, 286, 372, 285, 286, 349, 
	285, 286, 373, 318, 285, 286, 374, 285, 
	286, 375, 285, 286, 376, 285, 286, 377, 
	285, 286, 378, 285, 286, 379, 285, 286, 
	380, 285, 286, 370, 285, 286, 381, 285, 
	286, 382, 285, 286, 383, 285, 286, 384, 
	285, 286, 385, 285, 286, 386, 285, 286, 
	387, 285, 286, 388, 285, 286, 389, 285, 
	286, 390, 285, 286, 391, 392, 285, 286, 
	393, 285, 286, 394, 285, 286, 395, 285, 
	286, 396, 285, 286, 397, 285, 286, 398, 
	285, 286, 318, 285, 286, 399, 285, 286, 
	400, 285, 286, 401, 285, 286, 402, 285, 
	286, 403, 285, 286, 404, 285, 286, 405, 
	285, 286, 406, 285, 286, 407, 285, 286, 
	408, 285, 286, 409, 285, 286, 410, 285, 
	286, 314, 285, 411, 72, 0, 412, 0, 
	413, 0, 414, 0, 415, 0, 416, 0, 
	417, 0, 418, 0, 419, 0, 420, 0, 
	421, 0, 422, 0, 423, 0, 425, 424, 
	427, 426, 427, 428, 429, 430, 431, 429, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	428, 426, 427, 440, 426, 427, 441, 426, 
	427, 442, 426, 427, 443, 426, 427, 444, 
	426, 427, 445, 426, 427, 446, 426, 427, 
	447, 426, 427, 448, 426, 427, 449, 426, 
	427, 450, 426, 427, 451, 426, 427, 452, 
	426, 427, 453, 426, 427, 454, 426, 427, 
	455, 426, 427, 456, 426, 427, 455, 426, 
	427, 457, 458, 426, 427, 459, 426, 427, 
	460, 426, 427, 461, 426, 427, 462, 426, 
	427, 463, 426, 427, 464, 426, 427, 465, 
	426, 427, 466, 426, 427, 467, 426, 427, 
	468, 426, 427, 469, 426, 427, 470, 426, 
	427, 455, 426, 427, 471, 426, 427, 472, 
	426, 427, 473, 426, 427, 474, 426, 427, 
	475, 426, 427, 476, 426, 427, 454, 426, 
	427, 477, 426, 427, 478, 426, 427, 458, 
	426, 427, 479, 426, 427, 480, 426, 427, 
	481, 426, 427, 482, 426, 427, 483, 426, 
	427, 484, 426, 427, 485, 426, 427, 486, 
	426, 427, 487, 426, 427, 488, 426, 427, 
	489, 426, 427, 490, 426, 427, 491, 426, 
	427, 492, 426, 427, 493, 426, 427, 494, 
	426, 427, 476, 426, 427, 495, 426, 427, 
	496, 426, 427, 497, 426, 427, 498, 426, 
	427, 499, 426, 427, 500, 426, 427, 501, 
	426, 427, 502, 426, 427, 503, 426, 427, 
	504, 426, 427, 505, 506, 426, 427, 507, 
	426, 427, 508, 426, 427, 509, 426, 427, 
	510, 426, 427, 511, 426, 427, 512, 426, 
	427, 458, 426, 427, 513, 426, 427, 514, 
	426, 427, 515, 426, 427, 516, 426, 427, 
	517, 426, 427, 518, 426, 427, 519, 426, 
	427, 520, 426, 427, 521, 426, 427, 522, 
	426, 427, 523, 426, 427, 524, 426, 427, 
	455, 426, 525, 0, 526, 0, 527, 0, 
	528, 0, 529, 0, 530, 0, 531, 0, 
	532, 0, 533, 0, 534, 0, 535, 536, 
	0, 537, 0, 538, 0, 539, 0, 540, 
	0, 541, 0, 542, 0, 72, 0, 543, 
	0, 544, 0, 545, 0, 546, 0, 547, 
	0, 548, 0, 549, 0, 550, 0, 551, 
	0, 552, 0, 553, 0, 554, 0, 68, 
	0, 555, 556, 555, 0, 559, 558, 560, 
	561, 558, 557, 0, 563, 564, 562, 0, 
	563, 562, 559, 565, 563, 564, 565, 562, 
	559, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 575, 576, 577, 578, 579, 580, 
	581, 566, 0, 108, 582, 107, 108, 583, 
	107, 108, 582, 107, 108, 584, 585, 107, 
	108, 586, 107, 108, 587, 107, 108, 588, 
	107, 108, 589, 107, 108, 590, 107, 108, 
	591, 107, 108, 592, 107, 108, 593, 107, 
	108, 594, 107, 108, 595, 107, 108, 596, 
	107, 108, 597, 107, 108, 582, 107, 108, 
	598, 107, 108, 599, 107, 108, 600, 107, 
	108, 601, 107, 108, 602, 107, 108, 603, 
	107, 108, 135, 107, 108, 604, 107, 108, 
	605, 107, 108, 585, 107, 108, 606, 107, 
	108, 607, 107, 108, 608, 107, 108, 609, 
	107, 108, 610, 107, 108, 611, 107, 108, 
	612, 107, 108, 613, 107, 108, 614, 107, 
	108, 615, 107, 108, 616, 107, 108, 617, 
	107, 108, 618, 107, 108, 619, 107, 108, 
	620, 107, 108, 621, 107, 108, 603, 107, 
	108, 622, 585, 107, 108, 623, 107, 108, 
	624, 107, 108, 625, 107, 108, 626, 107, 
	108, 627, 107, 108, 628, 107, 108, 629, 
	107, 108, 619, 107, 108, 630, 107, 108, 
	631, 107, 108, 632, 107, 108, 633, 107, 
	108, 634, 107, 108, 635, 107, 108, 636, 
	107, 108, 637, 107, 108, 638, 107, 108, 
	639, 107, 108, 640, 641, 107, 108, 642, 
	107, 108, 643, 107, 108, 644, 107, 108, 
	645, 107, 108, 646, 107, 108, 647, 107, 
	108, 585, 107, 108, 648, 107, 108, 649, 
	107, 108, 650, 107, 108, 651, 107, 108, 
	652, 107, 108, 653, 107, 108, 654, 107, 
	108, 655, 107, 108, 656, 107, 108, 657, 
	107, 108, 658, 107, 108, 659, 107, 108, 
	582, 107, 660, 0, 1, 0, 661, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 36, 38, 91, 109, 192, 195, 334, 
	440, 471, 561, 4, 5, 6, 7, 6, 
	6, 7, 6, 8, 8, 8, 9, 8, 
	8, 8, 9, 10, 11, 12, 2, 12, 
	13, 2, 14, 16, 17, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	563, 30, 31, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 29, 37, 39, 52, 
	35, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 53, 54, 55, 
	56, 57, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 73, 74, 74, 2, 75, 
	89, 477, 478, 480, 494, 501, 504, 521, 
	530, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 2, 90, 
	2, 2, 3, 13, 15, 29, 32, 35, 
	36, 38, 91, 109, 192, 195, 334, 440, 
	471, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 100, 101, 101, 2, 102, 
	103, 104, 105, 106, 107, 108, 90, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	117, 118, 118, 2, 119, 133, 154, 161, 
	167, 183, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 2, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 90, 155, 156, 157, 
	158, 159, 160, 162, 163, 164, 165, 166, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 184, 
	185, 186, 187, 188, 189, 190, 191, 193, 
	194, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 214, 215, 215, 
	2, 216, 230, 231, 232, 234, 268, 274, 
	277, 294, 303, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	2, 90, 230, 233, 235, 248, 231, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 263, 264, 265, 266, 267, 269, 270, 
	271, 272, 273, 275, 276, 278, 279, 280, 
	281, 282, 283, 284, 285, 286, 287, 288, 
	289, 290, 291, 292, 293, 295, 296, 297, 
	298, 299, 300, 301, 302, 304, 305, 306, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	321, 315, 316, 317, 318, 319, 320, 322, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 335, 336, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 347, 
	348, 349, 348, 349, 349, 2, 350, 364, 
	365, 366, 368, 382, 389, 392, 391, 409, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 2, 90, 364, 
	367, 369, 365, 370, 371, 372, 373, 374, 
	375, 376, 377, 378, 379, 380, 381, 383, 
	384, 385, 386, 387, 388, 390, 391, 393, 
	394, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 404, 405, 406, 407, 408, 410, 
	411, 412, 413, 414, 415, 416, 417, 418, 
	419, 420, 427, 421, 422, 423, 424, 425, 
	426, 428, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 441, 442, 443, 
	444, 445, 446, 447, 448, 449, 450, 451, 
	458, 452, 453, 454, 455, 456, 457, 459, 
	460, 461, 462, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 475, 476, 
	474, 472, 473, 474, 472, 475, 476, 3, 
	13, 15, 29, 32, 35, 36, 38, 91, 
	109, 192, 195, 334, 440, 471, 89, 479, 
	481, 477, 482, 483, 484, 485, 486, 487, 
	488, 489, 490, 491, 492, 493, 495, 496, 
	497, 498, 499, 500, 502, 503, 505, 506, 
	507, 508, 509, 510, 511, 512, 513, 514, 
	515, 516, 517, 518, 519, 520, 522, 523, 
	524, 525, 526, 527, 528, 529, 531, 532, 
	533, 534, 535, 536, 537, 538, 539, 540, 
	541, 548, 542, 543, 544, 545, 546, 547, 
	549, 550, 551, 552, 553, 554, 555, 556, 
	557, 558, 559, 560, 562, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 135, 48, 
	0, 102, 9, 5, 45, 130, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	31, 126, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 563;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 982 "js/lib/gherkin/lexer/en_scouse.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
  
/* line 989 "js/lib/gherkin/lexer/en_scouse.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1216 "js/lib/gherkin/lexer/en_scouse.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1255 "js/lib/gherkin/lexer/en_scouse.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/en_scouse', [], function() {return Lexer});
}

})();
