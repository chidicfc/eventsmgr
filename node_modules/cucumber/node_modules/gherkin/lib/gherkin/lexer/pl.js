
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pl.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	94, 99, 106, 111, 112, 113, 114, 115, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 194, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 223, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 282, 284, 286, 289, 291, 293, 295, 
	297, 299, 301, 303, 305, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 344, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	379, 381, 383, 385, 387, 389, 391, 393, 
	395, 397, 399, 401, 402, 403, 404, 405, 
	406, 407, 408, 409, 410, 411, 412, 413, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 520, 523, 525, 527, 529, 531, 533, 
	535, 537, 539, 541, 543, 545, 547, 549, 
	551, 553, 555, 557, 559, 561, 563, 565, 
	567, 568, 569, 570, 571, 572, 573, 574, 
	575, 576, 577, 578, 579, 580, 581, 582, 
	593, 595, 597, 599, 601, 603, 605, 607, 
	609, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 637, 639, 
	641, 644, 646, 648, 650, 652, 654, 656, 
	658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 714, 716, 718, 720, 
	722, 724, 726, 728, 730, 732, 734, 736, 
	738, 739, 740, 741, 742, 744, 745, 746, 
	747, 748, 749, 750, 751, 752, 753, 754, 
	755, 771, 773, 775, 777, 779, 781, 783, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 812, 814, 816, 
	818, 820, 822, 824, 826, 828, 830, 832, 
	834, 837, 839, 841, 843, 845, 847, 849, 
	851, 853, 855, 857, 859, 861, 863, 865, 
	867, 869, 871, 873, 875, 877, 879, 881, 
	883, 885, 887, 889, 892, 894, 896, 898, 
	900, 902, 904, 906, 908, 910, 912, 914, 
	916, 918, 920, 922, 924, 926, 928, 930, 
	932, 934, 935, 936, 937, 938, 942, 948, 
	951, 953, 959, 978, 979, 980
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 80, 83, 87, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	80, 83, 87, 90, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 108, 
	101, 101, -59, -101, -68, 108, 105, 101, 
	97, 106, -60, -123, 99, 114, 97, 122, 
	114, 122, 121, 107, -59, -126, 97, 100, 
	121, 58, 10, 10, 10, 32, 35, 87, 
	124, 9, 13, -59, 10, -126, 10, 10, 
	97, -59, 10, -101, 10, 10, 99, 10, 
	105, 10, 119, 10, 111, -59, 10, -101, 
	10, -60, 10, -121, 10, 10, 58, 10, 
	32, 34, 35, 37, 42, 64, 65, 73, 
	74, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 99, 122, 101, 110, 97, 114, 
	105, 117, 115, 122, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 73, 74, 
	77, 79, 83, 87, 90, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 108, 10, 
	101, 10, 101, -59, 10, -101, -68, 10, 
	10, 108, 10, 105, 10, 101, 10, 97, 
	10, 106, -60, 10, -123, 10, 10, 99, 
	10, 114, 10, 97, 10, 122, 10, 99, 
	122, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 117, 10, 115, 10, 
	122, 10, 58, 10, 97, 10, 98, 10, 
	108, 10, 111, 10, 110, 10, 32, 10, 
	115, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	115, 10, 122, 10, 97, -59, 10, 116, 
	-126, 10, 10, 97, -59, 10, -101, 10, 
	10, 99, 10, 105, 10, 119, 10, 111, 
	-59, 10, -101, 10, -60, 10, -121, 10, 
	10, 101, 10, 100, 10, 121, 10, 97, 
	-59, 10, 107, -126, 10, 10, 111, -59, 
	10, -68, 10, 10, 101, 10, 110, 10, 
	105, -59, 10, -126, 10, 10, 97, 10, 
	100, 97, 98, 108, 111, 110, 32, 115, 
	99, 101, 110, 97, 114, 105, 117, 115, 
	122, 97, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 10, 101, 10, 
	101, -59, 10, -101, -68, 10, 10, 108, 
	10, 105, 10, 101, 10, 97, 10, 106, 
	-60, 10, -123, 10, 10, 99, 10, 114, 
	10, 97, 10, 122, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 58, 
	-59, 10, 116, -126, 10, 10, 97, -59, 
	10, -101, 10, 10, 99, 10, 105, 10, 
	119, 10, 111, -59, 10, -101, 10, -60, 
	10, -121, 10, 10, 101, 10, 100, 10, 
	121, 10, 97, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, -59, 116, -126, 
	97, -59, -101, 99, 105, 119, 111, -59, 
	-101, -60, -121, 58, 10, 10, 10, 32, 
	35, 37, 64, 80, 83, 87, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 114, 10, 
	122, 10, 121, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, 10, 121, 10, 
	58, 10, 99, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, -59, 10, 
	-126, 10, 10, 97, -59, 10, -101, 10, 
	10, 99, 10, 105, 10, 119, 10, 111, 
	-59, 10, -101, 10, -60, 10, -121, 10, 
	10, 97, -59, 10, -126, 10, 10, 111, 
	-59, 10, -68, 10, 10, 101, 10, 110, 
	10, 105, 101, 100, 121, 97, -59, 107, 
	-126, 111, -59, -68, 101, 110, 105, 97, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 73, 74, 77, 79, 83, 87, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 101, 10, 101, -59, 
	10, -101, -68, 10, 10, 108, 10, 105, 
	10, 101, 10, 97, 10, 106, -60, 10, 
	-123, 10, 10, 99, 10, 114, 10, 97, 
	10, 122, 10, 99, 122, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 115, 10, 122, 10, 58, 10, 
	97, 10, 98, 10, 108, 10, 111, 10, 
	110, 10, 32, 10, 115, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 117, 10, 115, 10, 122, 10, 
	97, -59, 10, 116, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 10, 101, 10, 100, 
	10, 121, 10, 97, 10, 107, -59, 10, 
	-126, 10, 10, 97, 10, 100, -59, -126, 
	97, 100, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 65, 73, 
	74, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 17, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 17, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	117, 122, 129, 134, 136, 138, 140, 142, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	198, 201, 204, 207, 210, 213, 216, 219, 
	222, 225, 228, 231, 234, 237, 240, 259, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 300, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 348, 351, 354, 357, 
	361, 364, 367, 370, 373, 376, 379, 382, 
	385, 388, 391, 394, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 449, 452, 455, 
	458, 461, 464, 467, 470, 473, 476, 480, 
	483, 486, 489, 492, 495, 498, 501, 504, 
	507, 510, 513, 516, 519, 522, 525, 528, 
	532, 535, 538, 541, 544, 547, 550, 553, 
	556, 559, 562, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 749, 752, 755, 758, 761, 764, 
	767, 770, 773, 776, 779, 782, 785, 788, 
	791, 794, 797, 800, 803, 806, 809, 812, 
	815, 817, 819, 821, 823, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	856, 859, 862, 865, 868, 871, 874, 877, 
	880, 883, 886, 889, 892, 895, 898, 901, 
	904, 907, 910, 913, 916, 919, 922, 925, 
	928, 932, 935, 938, 941, 944, 947, 950, 
	953, 956, 959, 962, 965, 968, 971, 974, 
	977, 980, 983, 986, 989, 992, 995, 998, 
	1001, 1004, 1007, 1010, 1013, 1016, 1019, 1022, 
	1025, 1028, 1031, 1034, 1037, 1040, 1043, 1046, 
	1049, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 
	1073, 1075, 1077, 1079, 1081, 1084, 1086, 1088, 
	1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 
	1106, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1183, 1186, 1189, 
	1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 
	1216, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 
	1241, 1244, 1247, 1250, 1253, 1256, 1259, 1262, 
	1265, 1268, 1271, 1274, 1277, 1280, 1283, 1286, 
	1289, 1292, 1295, 1298, 1302, 1305, 1308, 1311, 
	1314, 1317, 1320, 1323, 1326, 1329, 1332, 1335, 
	1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 
	1362, 1365, 1367, 1369, 1371, 1373, 1377, 1383, 
	1387, 1390, 1396, 1415, 1417, 1419
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 6, 9, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	0, 57, 59, 60, 58, 0, 0, 0, 
	0, 61, 62, 63, 62, 62, 65, 64, 
	61, 2, 66, 7, 66, 0, 67, 0, 
	68, 0, 69, 0, 70, 0, 71, 72, 
	0, 73, 0, 68, 0, 71, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 68, 
	0, 78, 0, 79, 0, 68, 0, 80, 
	0, 81, 0, 82, 0, 83, 0, 84, 
	0, 85, 0, 86, 0, 87, 0, 88, 
	0, 89, 0, 91, 90, 93, 92, 93, 
	94, 95, 96, 95, 94, 92, 97, 93, 
	92, 98, 93, 92, 93, 99, 92, 100, 
	93, 92, 101, 93, 92, 93, 102, 92, 
	93, 103, 92, 93, 104, 92, 93, 105, 
	92, 106, 93, 92, 107, 93, 92, 108, 
	93, 92, 109, 93, 92, 93, 110, 92, 
	112, 111, 113, 114, 115, 116, 117, 118, 
	116, 119, 120, 121, 122, 123, 124, 125, 
	126, 111, 0, 127, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 133, 0, 
	134, 0, 135, 0, 136, 0, 137, 0, 
	139, 138, 141, 140, 141, 142, 143, 144, 
	145, 143, 146, 145, 147, 148, 149, 150, 
	151, 152, 142, 140, 141, 153, 140, 141, 
	154, 140, 141, 155, 140, 141, 156, 140, 
	141, 157, 140, 141, 158, 140, 141, 159, 
	140, 141, 160, 140, 141, 161, 140, 141, 
	162, 140, 141, 163, 140, 141, 164, 140, 
	141, 165, 140, 141, 166, 140, 141, 167, 
	140, 141, 168, 140, 141, 169, 140, 141, 
	170, 140, 171, 141, 140, 172, 173, 141, 
	140, 141, 174, 140, 141, 169, 140, 141, 
	172, 140, 141, 175, 140, 141, 176, 140, 
	177, 141, 140, 178, 141, 140, 141, 169, 
	140, 141, 179, 140, 141, 180, 140, 141, 
	169, 140, 141, 181, 182, 140, 141, 183, 
	140, 141, 184, 140, 141, 185, 140, 141, 
	186, 140, 141, 187, 140, 141, 188, 140, 
	141, 189, 140, 141, 190, 140, 141, 167, 
	140, 141, 191, 140, 141, 192, 140, 141, 
	193, 140, 141, 194, 140, 141, 195, 140, 
	141, 196, 140, 141, 197, 140, 141, 198, 
	140, 141, 199, 140, 141, 200, 140, 141, 
	201, 140, 141, 202, 140, 141, 203, 140, 
	141, 204, 140, 141, 205, 140, 141, 206, 
	140, 141, 190, 140, 207, 141, 208, 140, 
	209, 141, 140, 141, 210, 140, 211, 141, 
	140, 212, 141, 140, 141, 213, 140, 141, 
	214, 140, 141, 215, 140, 141, 216, 140, 
	217, 141, 140, 218, 141, 140, 219, 141, 
	140, 190, 141, 140, 141, 220, 140, 141, 
	221, 140, 141, 169, 140, 141, 222, 140, 
	223, 141, 224, 140, 225, 141, 140, 141, 
	226, 140, 227, 141, 140, 228, 141, 140, 
	141, 229, 140, 141, 230, 140, 141, 206, 
	140, 231, 141, 140, 232, 141, 140, 141, 
	233, 140, 141, 234, 140, 235, 0, 236, 
	0, 237, 0, 238, 0, 239, 0, 240, 
	0, 241, 0, 242, 0, 243, 0, 244, 
	0, 245, 0, 246, 0, 247, 0, 248, 
	0, 249, 0, 250, 0, 251, 0, 252, 
	0, 254, 253, 256, 255, 256, 257, 258, 
	259, 260, 258, 261, 260, 262, 263, 264, 
	265, 266, 267, 257, 255, 256, 268, 255, 
	256, 269, 255, 256, 270, 255, 256, 271, 
	255, 256, 272, 255, 256, 273, 255, 256, 
	274, 255, 256, 275, 255, 256, 276, 255, 
	256, 277, 255, 256, 278, 255, 256, 279, 
	255, 256, 280, 255, 256, 281, 255, 256, 
	282, 255, 256, 283, 255, 256, 284, 255, 
	256, 285, 255, 286, 256, 255, 287, 288, 
	256, 255, 256, 289, 255, 256, 284, 255, 
	256, 287, 255, 256, 290, 255, 256, 291, 
	255, 292, 256, 255, 293, 256, 255, 256, 
	284, 255, 256, 294, 255, 256, 295, 255, 
	256, 284, 255, 256, 296, 255, 256, 297, 
	255, 256, 298, 255, 256, 299, 255, 256, 
	300, 255, 256, 301, 255, 256, 302, 255, 
	256, 303, 255, 256, 304, 255, 256, 282, 
	255, 305, 256, 306, 255, 307, 256, 255, 
	256, 308, 255, 309, 256, 255, 310, 256, 
	255, 256, 311, 255, 256, 312, 255, 256, 
	313, 255, 256, 314, 255, 315, 256, 255, 
	316, 256, 255, 317, 256, 255, 304, 256, 
	255, 256, 318, 255, 256, 319, 255, 256, 
	284, 255, 256, 320, 255, 256, 321, 255, 
	322, 256, 255, 323, 256, 255, 256, 324, 
	255, 256, 325, 255, 326, 327, 0, 328, 
	0, 329, 0, 330, 0, 331, 0, 332, 
	0, 333, 0, 334, 0, 335, 0, 336, 
	0, 337, 0, 338, 0, 339, 0, 340, 
	0, 342, 341, 344, 343, 344, 345, 346, 
	347, 346, 348, 349, 350, 351, 345, 343, 
	344, 352, 343, 344, 353, 343, 344, 354, 
	343, 344, 355, 343, 344, 356, 343, 344, 
	357, 343, 344, 358, 343, 344, 359, 343, 
	344, 360, 343, 344, 361, 343, 344, 362, 
	343, 344, 363, 343, 344, 364, 343, 344, 
	365, 343, 344, 366, 343, 344, 367, 343, 
	344, 368, 343, 344, 369, 343, 370, 344, 
	343, 371, 344, 343, 344, 372, 343, 344, 
	373, 343, 344, 374, 343, 344, 375, 343, 
	344, 376, 377, 343, 344, 378, 343, 344, 
	379, 343, 344, 380, 343, 344, 381, 343, 
	344, 382, 343, 344, 383, 343, 344, 384, 
	343, 344, 374, 343, 344, 385, 343, 344, 
	386, 343, 344, 387, 343, 344, 388, 343, 
	344, 389, 343, 344, 390, 343, 344, 391, 
	343, 344, 392, 343, 344, 393, 343, 344, 
	394, 343, 344, 395, 343, 344, 396, 343, 
	344, 397, 343, 344, 398, 343, 344, 399, 
	343, 344, 400, 343, 344, 374, 343, 401, 
	344, 343, 402, 344, 343, 344, 403, 343, 
	404, 344, 343, 405, 344, 343, 344, 406, 
	343, 344, 407, 343, 344, 408, 343, 344, 
	409, 343, 410, 344, 343, 411, 344, 343, 
	412, 344, 343, 374, 344, 343, 344, 413, 
	343, 414, 344, 343, 415, 344, 343, 344, 
	416, 343, 417, 344, 343, 418, 344, 343, 
	344, 419, 343, 344, 420, 343, 344, 400, 
	343, 421, 0, 422, 0, 68, 0, 423, 
	0, 424, 425, 0, 426, 0, 427, 0, 
	428, 0, 429, 0, 430, 0, 431, 0, 
	432, 0, 433, 0, 434, 0, 436, 435, 
	438, 437, 438, 439, 440, 441, 442, 440, 
	443, 442, 444, 445, 446, 447, 448, 449, 
	439, 437, 438, 450, 437, 438, 451, 437, 
	438, 452, 437, 438, 453, 437, 438, 454, 
	437, 438, 455, 437, 438, 456, 437, 438, 
	457, 437, 438, 458, 437, 438, 459, 437, 
	438, 460, 437, 438, 461, 437, 438, 462, 
	437, 438, 463, 437, 438, 464, 437, 438, 
	465, 437, 438, 466, 437, 438, 467, 437, 
	468, 438, 437, 469, 470, 438, 437, 438, 
	471, 437, 438, 466, 437, 438, 469, 437, 
	438, 472, 437, 438, 473, 437, 474, 438, 
	437, 475, 438, 437, 438, 466, 437, 438, 
	476, 437, 438, 477, 437, 438, 466, 437, 
	438, 478, 479, 437, 438, 480, 437, 438, 
	481, 437, 438, 482, 437, 438, 483, 437, 
	438, 484, 437, 438, 485, 437, 438, 486, 
	437, 438, 487, 437, 438, 464, 437, 438, 
	488, 437, 438, 489, 437, 438, 490, 437, 
	438, 491, 437, 438, 492, 437, 438, 493, 
	437, 438, 494, 437, 438, 495, 437, 438, 
	496, 437, 438, 497, 437, 438, 498, 437, 
	438, 499, 437, 438, 500, 437, 438, 501, 
	437, 438, 502, 437, 438, 503, 437, 438, 
	487, 437, 504, 438, 505, 437, 506, 438, 
	437, 438, 507, 437, 508, 438, 437, 509, 
	438, 437, 438, 510, 437, 438, 511, 437, 
	438, 512, 437, 438, 513, 437, 514, 438, 
	437, 515, 438, 437, 516, 438, 437, 487, 
	438, 437, 438, 517, 437, 438, 518, 437, 
	438, 466, 437, 438, 519, 437, 438, 520, 
	437, 521, 438, 437, 522, 438, 437, 438, 
	523, 437, 438, 524, 437, 525, 0, 526, 
	0, 527, 0, 528, 0, 529, 530, 529, 
	0, 533, 532, 534, 535, 532, 531, 0, 
	537, 538, 536, 0, 537, 536, 533, 539, 
	537, 538, 539, 536, 533, 540, 541, 542, 
	543, 544, 545, 546, 544, 547, 548, 549, 
	550, 551, 552, 553, 554, 540, 0, 555, 
	0, 1, 0, 556, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 43, 48, 51, 79, 263, 355, 
	453, 459, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 461, 
	30, 31, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 29, 38, 39, 40, 
	42, 41, 44, 45, 46, 47, 49, 50, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 62, 63, 63, 2, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 2, 
	2, 3, 13, 15, 29, 32, 35, 37, 
	43, 48, 51, 79, 263, 355, 453, 80, 
	179, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 90, 91, 91, 2, 
	92, 106, 107, 109, 115, 120, 123, 150, 
	166, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 2, 78, 
	108, 106, 110, 111, 112, 114, 113, 116, 
	117, 118, 119, 121, 122, 124, 133, 125, 
	126, 127, 128, 129, 130, 131, 132, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 151, 
	163, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 164, 165, 167, 168, 
	175, 169, 170, 171, 172, 173, 174, 176, 
	177, 178, 115, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 198, 
	199, 199, 2, 200, 214, 215, 217, 223, 
	228, 231, 241, 257, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 2, 78, 216, 214, 218, 219, 220, 
	222, 221, 224, 225, 226, 227, 229, 230, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 242, 254, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 252, 253, 255, 256, 
	258, 259, 260, 261, 262, 223, 264, 352, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 278, 
	279, 279, 2, 280, 294, 304, 330, 343, 
	281, 282, 283, 284, 285, 286, 287, 288, 
	289, 290, 291, 292, 293, 2, 295, 296, 
	297, 298, 299, 300, 301, 302, 303, 78, 
	305, 313, 306, 307, 308, 309, 310, 311, 
	312, 314, 315, 316, 317, 318, 319, 320, 
	321, 322, 323, 324, 325, 326, 327, 328, 
	329, 331, 332, 333, 334, 335, 336, 337, 
	338, 339, 340, 341, 342, 344, 345, 346, 
	347, 348, 349, 350, 351, 353, 354, 356, 
	357, 449, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 368, 367, 368, 368, 
	2, 369, 383, 384, 386, 392, 397, 400, 
	427, 443, 370, 371, 372, 373, 374, 375, 
	376, 377, 378, 379, 380, 381, 382, 2, 
	78, 385, 383, 387, 388, 389, 391, 390, 
	393, 394, 395, 396, 398, 399, 401, 410, 
	402, 403, 404, 405, 406, 407, 408, 409, 
	411, 412, 413, 414, 415, 416, 417, 418, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	428, 440, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 441, 442, 444, 
	445, 446, 447, 448, 392, 450, 451, 452, 
	43, 453, 454, 455, 457, 458, 456, 454, 
	455, 456, 454, 457, 458, 3, 13, 15, 
	29, 32, 35, 37, 43, 48, 51, 79, 
	263, 355, 453, 460, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 31, 
	126, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 461;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 835 "js/lib/gherkin/lexer/pl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
  
/* line 842 "js/lib/gherkin/lexer/pl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1069 "js/lib/gherkin/lexer/pl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1108 "js/lib/gherkin/lexer/pl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/pl', [], function() {return Lexer});
}

})();
