
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/vi.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	90, 95, 102, 107, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 136, 138, 140, 142, 144, 146, 
	148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 205, 207, 209, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 282, 284, 286, 289, 291, 293, 295, 
	297, 299, 301, 303, 305, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 326, 328, 
	330, 332, 334, 336, 338, 340, 342, 344, 
	346, 349, 351, 353, 355, 358, 360, 362, 
	364, 366, 368, 370, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 392, 394, 
	397, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 423, 424, 425, 
	427, 428, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 440, 441, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	473, 475, 477, 479, 481, 483, 485, 487, 
	489, 491, 493, 495, 497, 499, 502, 504, 
	506, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	539, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 583, 584, 
	585, 586, 587, 588, 589, 590, 591, 592, 
	593, 594, 595, 596, 597, 598, 599, 601, 
	603, 604, 605, 606, 607, 608, 609, 610, 
	611, 612, 613, 614, 615, 616, 617, 618, 
	619, 620, 621, 622, 623, 624, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 681, 683, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 705, 707, 710, 712, 714, 716, 718, 
	720, 722, 724, 726, 728, 730, 732, 734, 
	736, 738, 741, 743, 745, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 772, 774, 776, 778, 780, 782, 784, 
	785, 786, 787, 788, 792, 798, 801, 803, 
	809, 826, 828, 830, 832, 834, 836, 838, 
	840, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 868, 870, 872, 
	874, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 905, 
	907, 909, 911, 913, 916, 919, 921, 923, 
	925, 927, 929, 931, 933, 935, 937, 939, 
	940, 941, 942, 943, 944, 945
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	67, 68, 75, 78, 84, 86, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 66, 67, 68, 75, 78, 84, 86, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, -31, 105, -69, -111, 105, 
	32, 99, -31, -70, -93, 110, 104, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 67, 75, 78, 84, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	34, 35, 37, 42, 64, 66, 67, 68, 
	75, 78, 84, 86, 124, 9, 13, 104, 
	111, -31, -69, -81, 32, 108, 105, -31, 
	-69, -121, 117, 58, 10, 10, 10, 32, 
	35, 84, 124, 9, 13, -61, 10, -83, 
	10, 10, 110, 10, 104, 10, 32, 10, 
	110, -60, 10, -125, 10, 10, 110, 10, 
	103, 10, 58, -31, 104, -69, -117, 99, 
	104, 32, 98, -31, -70, -93, 110, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 67, 75, 78, 84, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, -31, 10, 
	105, -69, 10, -111, 10, 10, 105, 10, 
	32, 10, 99, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 104, 10, 58, -31, 
	10, -70, 10, -65, 10, 10, 116, 10, 
	104, 10, 111, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 105, 117, 10, 110, 10, 
	103, 10, 32, 10, 107, 116, -31, 10, 
	-61, 10, -84, 10, 10, 110, 10, 104, 
	10, 32, 10, 104, 10, 117, -31, 10, 
	-69, 10, -111, 10, 10, 110, 10, 103, 
	10, 104, -58, 10, -80, 10, 10, 110, 
	10, 103, -61, 10, 104, -84, -83, 10, 
	10, 110, 10, 104, 10, 32, 10, 110, 
	-60, 10, -125, 10, -61, 10, -84, 10, 
	-61, 10, -96, 10, 105, 117, 110, 103, 
	32, 107, 116, -31, -69, -117, 99, 104, 
	32, 98, -31, -70, -93, 110, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 66, 
	67, 75, 78, 84, 86, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 105, -31, 
	10, -70, 10, -65, 10, 10, 116, 10, 
	104, 10, 111, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 58, 10, 105, 10, 104, 
	-58, 10, -80, 10, 10, 110, 10, 103, 
	-61, 10, 104, -84, -83, 10, 10, 110, 
	10, 104, 10, 32, 10, 104, 10, 117, 
	-31, 10, -69, 10, -111, 10, 10, 110, 
	10, 103, 10, 110, 10, 104, 10, 32, 
	10, 110, -60, 10, -125, 10, -61, 10, 
	-84, 10, -61, 10, -96, 10, -61, -84, 
	110, 104, 32, 104, 117, -31, -69, -111, 
	110, 103, 104, -58, -80, 110, 103, -61, 
	104, -84, -83, 110, 104, 32, 104, 117, 
	-31, -69, -111, 110, 103, 110, 104, 32, 
	110, -60, -125, 110, 103, 58, 10, 10, 
	10, 32, 35, 37, 64, 66, 68, 75, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -31, 
	10, -69, 10, -111, 10, 10, 105, 10, 
	32, 10, 99, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 104, 10, 58, -31, 
	10, -69, 10, -81, 10, 10, 32, 10, 
	108, 10, 105, -31, 10, -69, 10, -121, 
	10, 10, 117, -31, 10, 104, -69, 10, 
	-117, 10, 10, 99, 10, 104, 10, 32, 
	10, 98, -31, 10, -70, 10, -93, 10, 
	10, 110, 10, 117, 10, 110, 10, 103, 
	10, 32, 10, 107, 116, -31, 10, -61, 
	10, -84, 10, 10, 110, 10, 104, 10, 
	32, 10, 104, 10, 117, -31, 10, -69, 
	10, -111, 10, 10, 110, 10, 103, -61, 
	10, -84, -83, 10, 10, 110, 10, 104, 
	10, 32, 10, 110, -60, 10, -125, 10, 
	-61, -84, -61, -96, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	66, 67, 68, 75, 78, 84, 86, 124, 
	9, 13, 10, 105, -31, 10, -70, 10, 
	-65, 10, 10, 116, 10, 104, 10, 111, 
	-31, 10, 104, -69, 10, -117, 10, 10, 
	99, 10, 104, 10, 32, 10, 98, -31, 
	10, -70, 10, -93, 10, 10, 110, 10, 
	58, 10, 105, 117, 10, 110, 10, 103, 
	10, 32, 10, 107, 116, -31, 10, -61, 
	10, -84, 10, 10, 110, 10, 104, 10, 
	32, 10, 104, 10, 117, -31, 10, -69, 
	10, -111, 10, 10, 110, 10, 103, 10, 
	104, -58, 10, -80, 10, 10, 110, 10, 
	103, -61, 10, 104, -84, -83, 10, 10, 
	110, 10, 104, 10, 32, 10, 110, -60, 
	10, -125, 10, -61, 10, -84, 10, -61, 
	10, -96, 10, -31, -70, -65, 116, 187, 
	191, 0
];

const _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 15, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	113, 118, 125, 130, 133, 135, 137, 139, 
	141, 143, 145, 147, 149, 151, 153, 155, 
	157, 159, 173, 176, 179, 182, 185, 188, 
	191, 194, 197, 200, 203, 206, 209, 212, 
	215, 218, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	263, 265, 272, 275, 278, 281, 284, 287, 
	290, 293, 296, 299, 302, 305, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 348, 351, 354, 357, 
	360, 363, 366, 369, 372, 375, 378, 381, 
	384, 387, 390, 393, 397, 400, 403, 406, 
	409, 412, 415, 418, 421, 424, 427, 430, 
	433, 436, 439, 442, 445, 448, 452, 455, 
	458, 461, 464, 467, 470, 473, 476, 479, 
	482, 486, 489, 492, 495, 499, 502, 505, 
	508, 511, 514, 517, 520, 523, 526, 529, 
	532, 535, 538, 541, 544, 547, 550, 553, 
	557, 561, 564, 567, 570, 573, 576, 579, 
	582, 585, 588, 591, 594, 596, 598, 600, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 645, 
	648, 651, 654, 657, 660, 663, 666, 669, 
	672, 675, 678, 681, 684, 687, 690, 693, 
	696, 699, 702, 705, 708, 711, 715, 718, 
	721, 724, 727, 730, 733, 736, 739, 742, 
	745, 748, 751, 754, 757, 760, 763, 766, 
	770, 774, 777, 780, 783, 786, 789, 792, 
	795, 798, 801, 804, 807, 810, 813, 816, 
	819, 822, 825, 828, 831, 834, 836, 838, 
	840, 842, 844, 846, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 866, 868, 871, 
	874, 876, 878, 880, 882, 884, 886, 888, 
	890, 892, 894, 896, 898, 900, 902, 904, 
	906, 908, 910, 912, 914, 916, 927, 930, 
	933, 936, 939, 942, 945, 948, 951, 954, 
	957, 960, 963, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1039, 1042, 1045, 1048, 1051, 
	1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 
	1078, 1081, 1085, 1088, 1091, 1094, 1097, 1100, 
	1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 
	1127, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 
	1151, 1153, 1155, 1157, 1161, 1167, 1171, 1174, 
	1180, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 
	1218, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1259, 1262, 1265, 
	1268, 1272, 1275, 1278, 1281, 1284, 1287, 1290, 
	1293, 1296, 1299, 1302, 1305, 1308, 1311, 1314, 
	1317, 1320, 1323, 1326, 1330, 1334, 1337, 1340, 
	1343, 1346, 1349, 1352, 1355, 1358, 1361, 1364, 
	1366, 1368, 1370, 1372, 1374, 1376
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 0, 56, 58, 59, 
	57, 0, 0, 0, 0, 60, 61, 62, 
	61, 61, 64, 63, 60, 2, 65, 7, 
	65, 0, 66, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 76, 0, 77, 
	0, 78, 0, 80, 79, 82, 81, 82, 
	83, 84, 85, 86, 84, 87, 88, 89, 
	90, 91, 92, 83, 81, 82, 93, 81, 
	82, 94, 81, 82, 95, 81, 82, 96, 
	81, 82, 97, 81, 82, 98, 81, 82, 
	99, 81, 82, 100, 81, 82, 101, 81, 
	82, 102, 81, 82, 103, 81, 82, 104, 
	81, 82, 105, 81, 82, 106, 81, 82, 
	107, 81, 109, 108, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 108, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 132, 0, 133, 
	0, 134, 0, 135, 0, 137, 136, 139, 
	138, 139, 140, 141, 142, 141, 140, 138, 
	143, 139, 138, 144, 139, 138, 139, 145, 
	138, 139, 146, 138, 139, 147, 138, 139, 
	148, 138, 149, 139, 138, 150, 139, 138, 
	139, 151, 138, 139, 152, 138, 139, 153, 
	138, 154, 155, 0, 156, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 161, 0, 
	162, 0, 163, 0, 164, 0, 165, 0, 
	166, 0, 168, 167, 170, 169, 170, 171, 
	172, 173, 174, 172, 175, 176, 177, 178, 
	179, 180, 171, 169, 170, 181, 169, 170, 
	182, 169, 170, 183, 169, 170, 184, 169, 
	170, 185, 169, 170, 186, 169, 170, 187, 
	169, 170, 188, 169, 170, 189, 169, 170, 
	190, 169, 170, 191, 169, 170, 192, 169, 
	170, 193, 169, 170, 194, 169, 170, 195, 
	169, 196, 170, 197, 169, 198, 170, 169, 
	199, 170, 169, 170, 200, 169, 170, 201, 
	169, 170, 202, 169, 203, 170, 169, 204, 
	170, 169, 205, 170, 169, 170, 206, 169, 
	170, 207, 169, 170, 195, 169, 208, 170, 
	169, 209, 170, 169, 210, 170, 169, 170, 
	211, 169, 170, 212, 169, 170, 211, 169, 
	213, 170, 214, 169, 215, 170, 169, 216, 
	170, 169, 170, 217, 169, 170, 218, 169, 
	170, 219, 169, 170, 220, 169, 221, 170, 
	169, 222, 170, 169, 223, 170, 169, 170, 
	207, 169, 170, 211, 224, 169, 170, 225, 
	169, 170, 226, 169, 170, 227, 169, 170, 
	228, 229, 169, 213, 170, 169, 230, 170, 
	169, 231, 170, 169, 170, 232, 169, 170, 
	233, 169, 170, 234, 169, 170, 235, 169, 
	170, 236, 169, 237, 170, 169, 238, 170, 
	169, 239, 170, 169, 170, 240, 169, 170, 
	207, 169, 170, 241, 169, 242, 170, 169, 
	243, 170, 169, 170, 244, 169, 170, 211, 
	169, 245, 170, 246, 169, 231, 247, 170, 
	169, 170, 248, 169, 170, 249, 169, 170, 
	250, 169, 170, 251, 169, 252, 170, 169, 
	239, 170, 169, 253, 170, 169, 211, 170, 
	169, 254, 170, 169, 211, 170, 169, 124, 
	255, 0, 256, 0, 257, 0, 258, 0, 
	259, 260, 0, 261, 0, 262, 0, 263, 
	0, 264, 0, 265, 0, 266, 0, 267, 
	0, 268, 0, 269, 0, 270, 0, 271, 
	0, 272, 0, 274, 273, 276, 275, 276, 
	277, 278, 279, 280, 278, 281, 282, 283, 
	284, 285, 286, 277, 275, 276, 287, 275, 
	276, 288, 275, 276, 289, 275, 276, 290, 
	275, 276, 291, 275, 276, 292, 275, 276, 
	293, 275, 276, 294, 275, 276, 295, 275, 
	276, 296, 275, 276, 297, 275, 276, 298, 
	275, 276, 299, 275, 276, 300, 275, 276, 
	301, 275, 276, 302, 275, 303, 276, 275, 
	304, 276, 275, 305, 276, 275, 276, 306, 
	275, 276, 307, 275, 276, 306, 275, 308, 
	276, 309, 275, 310, 276, 275, 311, 276, 
	275, 276, 312, 275, 276, 313, 275, 276, 
	314, 275, 276, 315, 275, 316, 276, 275, 
	317, 276, 275, 318, 276, 275, 276, 319, 
	275, 276, 301, 275, 276, 306, 275, 276, 
	320, 275, 321, 276, 275, 322, 276, 275, 
	276, 323, 275, 276, 306, 275, 324, 276, 
	325, 275, 326, 327, 276, 275, 276, 328, 
	275, 276, 329, 275, 276, 330, 275, 276, 
	331, 275, 276, 332, 275, 333, 276, 275, 
	334, 276, 275, 335, 276, 275, 276, 336, 
	275, 276, 319, 275, 276, 337, 275, 276, 
	338, 275, 276, 339, 275, 276, 340, 275, 
	341, 276, 275, 335, 276, 275, 342, 276, 
	275, 306, 276, 275, 343, 276, 275, 306, 
	276, 275, 344, 0, 345, 0, 346, 0, 
	347, 0, 348, 0, 349, 0, 350, 0, 
	351, 0, 352, 0, 353, 0, 354, 0, 
	271, 0, 355, 0, 356, 0, 357, 0, 
	358, 0, 124, 0, 359, 360, 0, 361, 
	362, 0, 363, 0, 364, 0, 365, 0, 
	366, 0, 367, 0, 368, 0, 369, 0, 
	370, 0, 371, 0, 165, 0, 372, 0, 
	373, 0, 374, 0, 375, 0, 376, 0, 
	377, 0, 378, 0, 379, 0, 380, 0, 
	382, 381, 384, 383, 384, 385, 386, 387, 
	386, 388, 389, 390, 391, 385, 383, 384, 
	392, 383, 384, 393, 383, 384, 394, 383, 
	384, 395, 383, 384, 396, 383, 384, 397, 
	383, 384, 398, 383, 384, 399, 383, 384, 
	400, 383, 384, 401, 383, 384, 402, 383, 
	384, 403, 383, 384, 404, 383, 384, 405, 
	383, 406, 384, 383, 407, 384, 383, 408, 
	384, 383, 384, 409, 383, 384, 410, 383, 
	384, 411, 383, 412, 384, 383, 413, 384, 
	383, 414, 384, 383, 384, 415, 383, 384, 
	416, 383, 384, 417, 383, 418, 384, 383, 
	419, 384, 383, 420, 384, 383, 384, 421, 
	383, 384, 422, 383, 384, 423, 383, 424, 
	384, 383, 425, 384, 383, 426, 384, 383, 
	384, 416, 383, 427, 384, 428, 383, 429, 
	384, 383, 430, 384, 383, 384, 431, 383, 
	384, 432, 383, 384, 433, 383, 384, 434, 
	383, 435, 384, 383, 436, 384, 383, 437, 
	384, 383, 384, 416, 383, 384, 438, 383, 
	384, 439, 383, 384, 440, 383, 384, 441, 
	383, 384, 442, 443, 383, 427, 384, 383, 
	444, 384, 383, 445, 384, 383, 384, 446, 
	383, 384, 447, 383, 384, 448, 383, 384, 
	449, 383, 384, 450, 383, 451, 384, 383, 
	452, 384, 383, 453, 384, 383, 384, 454, 
	383, 384, 416, 383, 455, 384, 383, 445, 
	456, 384, 383, 384, 457, 383, 384, 458, 
	383, 384, 459, 383, 384, 460, 383, 461, 
	384, 383, 453, 384, 383, 462, 0, 124, 
	0, 463, 0, 124, 0, 464, 465, 464, 
	0, 468, 467, 469, 470, 467, 466, 0, 
	472, 473, 471, 0, 472, 471, 468, 474, 
	472, 473, 474, 471, 468, 475, 476, 477, 
	478, 479, 480, 481, 482, 483, 484, 485, 
	486, 487, 488, 475, 0, 82, 489, 81, 
	490, 82, 81, 491, 82, 81, 492, 82, 
	81, 82, 493, 81, 82, 494, 81, 82, 
	493, 81, 495, 82, 496, 81, 497, 82, 
	81, 498, 82, 81, 82, 499, 81, 82, 
	500, 81, 82, 501, 81, 82, 502, 81, 
	503, 82, 81, 504, 82, 81, 505, 82, 
	81, 82, 506, 81, 82, 107, 81, 82, 
	493, 507, 81, 82, 508, 81, 82, 509, 
	81, 82, 510, 81, 82, 511, 512, 81, 
	495, 82, 81, 513, 82, 81, 514, 82, 
	81, 82, 515, 81, 82, 516, 81, 82, 
	517, 81, 82, 518, 81, 82, 519, 81, 
	520, 82, 81, 521, 82, 81, 522, 82, 
	81, 82, 523, 81, 82, 506, 81, 82, 
	524, 81, 525, 82, 81, 526, 82, 81, 
	82, 527, 81, 82, 493, 81, 528, 82, 
	529, 81, 514, 530, 82, 81, 82, 531, 
	81, 82, 532, 81, 82, 533, 81, 82, 
	534, 81, 535, 82, 81, 522, 82, 81, 
	536, 82, 81, 493, 82, 81, 537, 82, 
	81, 493, 82, 81, 538, 0, 539, 0, 
	540, 0, 124, 0, 541, 0, 1, 0, 
	542, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 68, 93, 281, 286, 385, 387, 
	451, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 453, 30, 
	31, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 447, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 48, 49, 49, 2, 50, 64, 393, 
	398, 400, 430, 435, 445, 51, 52, 53, 
	54, 55, 56, 57, 58, 59, 60, 61, 
	62, 63, 2, 65, 2, 2, 3, 13, 
	15, 29, 32, 35, 66, 68, 93, 281, 
	286, 385, 387, 67, 29, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 80, 81, 81, 2, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 65, 94, 187, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 106, 107, 107, 2, 108, 122, 123, 
	139, 141, 170, 175, 185, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 2, 65, 124, 135, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	136, 137, 138, 122, 140, 142, 152, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 171, 172, 173, 174, 176, 183, 177, 
	178, 179, 180, 181, 182, 184, 186, 188, 
	189, 190, 191, 192, 269, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 205, 206, 206, 2, 207, 
	221, 222, 227, 229, 242, 247, 267, 208, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 220, 2, 65, 223, 224, 
	225, 226, 221, 228, 230, 241, 231, 232, 
	233, 234, 235, 236, 237, 238, 239, 240, 
	243, 244, 245, 246, 248, 265, 249, 259, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 260, 261, 262, 263, 264, 266, 268, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 282, 283, 284, 285, 287, 
	383, 288, 298, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 299, 300, 301, 302, 
	303, 304, 305, 306, 307, 308, 309, 308, 
	309, 309, 2, 310, 324, 336, 346, 375, 
	311, 312, 313, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 2, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 65, 337, 338, 339, 340, 341, 342, 
	343, 344, 345, 347, 357, 348, 349, 350, 
	351, 352, 353, 354, 355, 356, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 376, 
	377, 378, 379, 380, 381, 382, 384, 386, 
	387, 388, 389, 391, 392, 390, 388, 389, 
	390, 388, 391, 392, 3, 13, 15, 29, 
	32, 35, 66, 68, 93, 281, 286, 385, 
	387, 394, 395, 396, 397, 64, 399, 401, 
	412, 402, 403, 404, 405, 406, 407, 408, 
	409, 410, 411, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 423, 424, 425, 
	426, 427, 428, 429, 431, 432, 433, 434, 
	436, 443, 437, 438, 439, 440, 441, 442, 
	444, 446, 448, 449, 450, 452, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 31, 126, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 81, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 75, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 453;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 817 "js/lib/gherkin/lexer/vi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
  
/* line 824 "js/lib/gherkin/lexer/vi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1051 "js/lib/gherkin/lexer/vi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1090 "js/lib/gherkin/lexer/vi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/vi.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/vi', [], function() {return Lexer});
}

})();
