
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hr.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
];

const _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	92, 97, 104, 109, 110, 111, 113, 114, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 139, 141, 143, 145, 147, 149, 151, 
	153, 155, 157, 159, 161, 163, 165, 167, 
	169, 187, 188, 189, 190, 192, 193, 194, 
	195, 196, 197, 198, 199, 200, 212, 214, 
	216, 218, 220, 222, 224, 226, 228, 230, 
	232, 234, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 283, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 307, 309, 311, 313, 
	315, 317, 319, 322, 324, 326, 328, 329, 
	330, 331, 332, 333, 334, 335, 337, 338, 
	339, 340, 341, 342, 343, 344, 345, 346, 
	361, 363, 365, 367, 369, 371, 373, 375, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 398, 400, 403, 405, 407, 409, 
	411, 413, 415, 417, 419, 421, 424, 426, 
	428, 430, 432, 435, 437, 439, 441, 443, 
	445, 447, 449, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	480, 481, 482, 483, 484, 485, 486, 487, 
	488, 489, 497, 499, 501, 503, 506, 508, 
	510, 512, 514, 516, 518, 520, 522, 524, 
	526, 528, 530, 532, 533, 534, 535, 536, 
	537, 538, 540, 541, 542, 558, 560, 562, 
	564, 566, 568, 570, 572, 574, 576, 578, 
	580, 582, 584, 586, 588, 590, 592, 595, 
	597, 600, 602, 604, 606, 608, 610, 612, 
	614, 616, 618, 621, 623, 625, 627, 629, 
	632, 634, 636, 638, 640, 642, 644, 646, 
	648, 650, 652, 654, 657, 659, 661, 663, 
	665, 667, 669, 671, 673, 675, 677, 679, 
	681, 685, 686, 687, 688, 689, 690, 691, 
	692, 695, 699, 705, 708, 710, 716, 734, 
	736, 738, 740, 742, 745, 747, 749, 751, 
	754, 756, 758, 760, 762, 764, 766, 769, 
	771, 773, 775, 777, 779, 781, 783, 785, 
	787, 789, 791, 793, 795, 797, 799, 801, 
	803, 805, 809, 810, 811
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 75, 77, 79, 80, 83, 90, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 73, 75, 77, 79, 80, 
	83, 90, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 108, 105, 97, 
	111, 100, 32, 97, 110, 99, 101, 112, 
	116, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 73, 75, 77, 79, 83, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	65, 73, 75, 77, 79, 80, 83, 90, 
	124, 9, 13, 111, 103, 117, -60, 99, 
	-121, 110, 111, 115, 116, 58, 10, 10, 
	10, 32, 35, 37, 64, 75, 77, 79, 
	80, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 99, 10, 101, 
	10, 112, 10, 116, 10, 58, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 110, 10, 111, 10, 115, 10, 
	115, 10, 111, 10, 98, 10, 105, 10, 
	110, 10, 97, 10, 111, 114, 10, 122, 
	10, 97, 10, 100, 10, 105, 10, 109, 
	10, 106, 10, 101, 10, 114, 10, 105, 
	10, 99, 107, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 106, 10, 
	58, 105, 10, 105, 10, 99, 110, 115, 
	100, 97, 111, 98, 105, 110, 97, 111, 
	114, 122, 97, 100, 105, 110, 97, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 73, 75, 77, 79, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 97, 111, 10, 100, 
	10, 32, 97, 10, 110, 10, 99, 10, 
	101, 10, 112, 10, 116, 10, 58, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 10, 111, 10, 115, 
	10, 110, 115, 10, 100, 10, 97, 10, 
	111, 10, 98, 10, 105, 10, 110, 10, 
	97, 10, 99, 107, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 106, 
	10, 105, 10, 99, 10, 97, 10, 100, 
	10, 97, 10, 110, 10, 32, 105, 111, 
	105, 109, 106, 101, 114, 105, 58, 10, 
	10, 10, 32, 35, 77, 79, 124, 9, 
	13, 10, 111, 10, 103, 10, 117, -60, 
	10, 99, -121, 10, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 115, 
	10, 111, 10, 98, 10, 105, 10, 110, 
	10, 97, 99, 107, 101, 110, 97, 114, 
	105, 106, 58, 105, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 73, 75, 77, 
	79, 80, 83, 90, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 108, 10, 105, 
	10, 97, 111, 10, 100, 10, 32, 97, 
	10, 110, 10, 99, 10, 101, 10, 112, 
	10, 116, 10, 58, 10, 111, 10, 103, 
	10, 117, -60, 10, 99, -121, 10, 10, 
	110, 10, 111, 10, 115, 10, 110, 115, 
	10, 100, 10, 97, 10, 111, 10, 98, 
	10, 105, 10, 110, 10, 97, 10, 111, 
	10, 122, 10, 97, 10, 100, 10, 99, 
	107, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 105, 10, 
	99, 10, 97, 10, 100, 10, 97, 10, 
	110, 10, 32, 105, 111, 105, 99, 97, 
	97, 100, 97, 110, 32, 105, 111, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 73, 75, 77, 79, 
	80, 83, 90, 124, 9, 13, 10, 108, 
	10, 105, 10, 97, 10, 100, 10, 32, 
	97, 10, 111, 10, 103, 10, 117, -60, 
	10, 99, -121, 10, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 110, 
	115, 10, 100, 10, 97, 10, 111, 10, 
	98, 10, 105, 10, 110, 10, 97, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 97, 10, 
	100, 10, 97, 10, 110, 10, 32, 105, 
	111, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	3, 5, 3, 1, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	16, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 6, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	3, 2, 4, 3, 2, 4, 16, 2, 
	2, 2, 2, 3, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	115, 120, 127, 132, 134, 136, 139, 141, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 175, 178, 181, 184, 187, 190, 193, 
	196, 199, 202, 205, 208, 211, 214, 217, 
	220, 238, 240, 242, 244, 247, 249, 251, 
	253, 255, 257, 259, 261, 263, 275, 278, 
	281, 284, 287, 290, 293, 296, 299, 302, 
	305, 308, 311, 314, 317, 320, 323, 326, 
	329, 332, 335, 338, 341, 344, 347, 351, 
	354, 357, 360, 363, 366, 369, 372, 375, 
	378, 381, 385, 388, 391, 394, 397, 400, 
	403, 406, 409, 412, 416, 419, 422, 425, 
	428, 431, 434, 438, 441, 444, 447, 449, 
	451, 453, 455, 457, 459, 461, 464, 466, 
	468, 470, 472, 474, 476, 478, 480, 482, 
	497, 500, 503, 506, 509, 512, 515, 518, 
	521, 524, 527, 530, 533, 536, 539, 542, 
	545, 548, 552, 555, 559, 562, 565, 568, 
	571, 574, 577, 580, 583, 586, 590, 593, 
	596, 599, 602, 606, 609, 612, 615, 618, 
	621, 624, 627, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 698, 701, 704, 707, 711, 714, 
	717, 720, 723, 726, 729, 732, 735, 738, 
	741, 744, 747, 750, 752, 754, 756, 758, 
	760, 762, 765, 767, 769, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 840, 
	843, 847, 850, 853, 856, 859, 862, 865, 
	868, 871, 874, 878, 881, 884, 887, 890, 
	894, 897, 900, 903, 906, 909, 912, 915, 
	918, 921, 924, 927, 931, 934, 937, 940, 
	943, 946, 949, 952, 955, 958, 961, 964, 
	967, 972, 974, 976, 978, 980, 982, 984, 
	986, 990, 994, 1000, 1004, 1007, 1013, 1031, 
	1034, 1037, 1040, 1043, 1047, 1050, 1053, 1056, 
	1060, 1063, 1066, 1069, 1072, 1075, 1078, 1082, 
	1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106, 
	1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 
	1133, 1136, 1141, 1143, 1145
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 6, 9, 10, 11, 12, 
	13, 14, 15, 1, 0, 17, 0, 18, 
	0, 20, 21, 19, 23, 24, 22, 27, 
	26, 28, 26, 25, 31, 30, 32, 30, 
	29, 31, 30, 33, 30, 29, 31, 30, 
	34, 30, 29, 36, 35, 35, 0, 2, 
	37, 37, 0, 39, 40, 38, 2, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 0, 56, 
	58, 59, 57, 0, 0, 0, 0, 60, 
	61, 62, 61, 61, 64, 63, 60, 2, 
	65, 7, 65, 0, 66, 0, 67, 0, 
	68, 69, 0, 70, 0, 55, 67, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 78, 77, 80, 79, 
	80, 81, 82, 83, 84, 82, 85, 84, 
	86, 87, 88, 89, 90, 81, 79, 80, 
	91, 79, 80, 92, 79, 80, 93, 79, 
	80, 94, 79, 80, 95, 79, 80, 96, 
	79, 80, 97, 79, 80, 98, 79, 80, 
	99, 79, 80, 100, 79, 80, 101, 79, 
	80, 102, 79, 80, 103, 79, 80, 104, 
	79, 80, 105, 79, 107, 106, 108, 109, 
	110, 111, 112, 113, 111, 114, 115, 116, 
	117, 118, 119, 120, 106, 0, 121, 0, 
	122, 0, 123, 0, 124, 125, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 132, 131, 134, 133, 134, 
	135, 136, 137, 136, 138, 139, 140, 141, 
	142, 135, 133, 134, 143, 133, 134, 144, 
	133, 134, 145, 133, 134, 146, 133, 134, 
	147, 133, 134, 148, 133, 134, 149, 133, 
	134, 150, 133, 134, 151, 133, 134, 152, 
	133, 134, 153, 133, 134, 154, 133, 134, 
	155, 133, 134, 156, 133, 134, 157, 133, 
	134, 158, 133, 134, 159, 133, 134, 160, 
	133, 134, 161, 133, 134, 162, 133, 134, 
	163, 133, 134, 164, 133, 134, 165, 133, 
	134, 166, 133, 167, 134, 168, 133, 168, 
	134, 133, 134, 169, 133, 134, 170, 133, 
	134, 161, 133, 134, 171, 133, 134, 172, 
	133, 134, 173, 133, 134, 174, 133, 134, 
	175, 133, 134, 162, 133, 134, 176, 177, 
	133, 134, 178, 133, 134, 179, 133, 134, 
	173, 133, 134, 180, 133, 134, 181, 133, 
	134, 182, 133, 134, 183, 133, 134, 184, 
	133, 134, 162, 133, 134, 185, 186, 133, 
	134, 187, 133, 134, 188, 133, 134, 189, 
	133, 134, 190, 133, 134, 191, 133, 134, 
	192, 133, 134, 163, 162, 133, 134, 193, 
	133, 134, 175, 133, 194, 195, 0, 196, 
	0, 67, 0, 197, 0, 198, 0, 199, 
	0, 200, 0, 129, 0, 201, 202, 0, 
	203, 0, 204, 0, 205, 0, 206, 0, 
	207, 0, 208, 0, 209, 0, 211, 210, 
	213, 212, 213, 214, 215, 216, 217, 215, 
	218, 217, 219, 220, 221, 222, 223, 214, 
	212, 213, 224, 212, 213, 225, 212, 213, 
	226, 212, 213, 227, 212, 213, 228, 212, 
	213, 229, 212, 213, 230, 212, 213, 231, 
	212, 213, 232, 212, 213, 233, 212, 213, 
	234, 212, 213, 235, 212, 213, 236, 212, 
	213, 237, 212, 213, 238, 212, 213, 239, 
	212, 213, 240, 212, 213, 241, 242, 212, 
	213, 243, 212, 213, 238, 240, 212, 213, 
	244, 212, 213, 245, 212, 213, 246, 212, 
	213, 247, 212, 213, 248, 212, 213, 238, 
	212, 213, 249, 212, 213, 250, 212, 213, 
	251, 212, 252, 213, 253, 212, 253, 213, 
	212, 213, 254, 212, 213, 255, 212, 213, 
	247, 212, 213, 256, 257, 212, 213, 258, 
	212, 213, 240, 212, 213, 259, 212, 213, 
	260, 212, 213, 261, 212, 213, 262, 212, 
	213, 248, 212, 213, 263, 264, 212, 213, 
	265, 212, 213, 266, 212, 213, 267, 212, 
	213, 268, 212, 213, 269, 212, 213, 248, 
	212, 213, 270, 212, 213, 262, 212, 213, 
	271, 212, 213, 272, 212, 213, 273, 212, 
	213, 274, 212, 213, 238, 240, 240, 212, 
	275, 0, 276, 0, 277, 0, 278, 0, 
	279, 0, 280, 0, 281, 0, 283, 282, 
	285, 284, 285, 286, 287, 288, 289, 287, 
	286, 284, 285, 290, 284, 285, 291, 284, 
	285, 292, 284, 293, 285, 294, 284, 294, 
	285, 284, 285, 295, 284, 285, 296, 284, 
	285, 297, 284, 285, 298, 284, 285, 299, 
	284, 285, 300, 284, 285, 301, 284, 285, 
	302, 284, 285, 303, 284, 285, 304, 284, 
	285, 298, 284, 305, 306, 0, 307, 0, 
	308, 0, 309, 0, 310, 0, 311, 0, 
	312, 0, 313, 280, 0, 315, 314, 317, 
	316, 317, 318, 319, 320, 321, 319, 322, 
	321, 323, 324, 325, 326, 327, 328, 318, 
	316, 317, 329, 316, 317, 330, 316, 317, 
	331, 316, 317, 332, 316, 317, 333, 316, 
	317, 334, 316, 317, 335, 316, 317, 336, 
	316, 317, 337, 316, 317, 338, 316, 317, 
	339, 316, 317, 340, 316, 317, 341, 316, 
	317, 342, 316, 317, 343, 316, 317, 344, 
	316, 317, 345, 316, 317, 346, 347, 316, 
	317, 348, 316, 317, 343, 345, 316, 317, 
	349, 316, 317, 350, 316, 317, 351, 316, 
	317, 352, 316, 317, 353, 316, 317, 343, 
	316, 317, 354, 316, 317, 355, 316, 317, 
	356, 316, 357, 317, 358, 316, 358, 317, 
	316, 317, 359, 316, 317, 360, 316, 317, 
	352, 316, 317, 361, 362, 316, 317, 363, 
	316, 317, 345, 316, 317, 364, 316, 317, 
	365, 316, 317, 366, 316, 317, 367, 316, 
	317, 353, 316, 317, 368, 316, 317, 369, 
	316, 317, 370, 316, 317, 365, 316, 317, 
	371, 372, 316, 317, 373, 316, 317, 374, 
	316, 317, 375, 316, 317, 376, 316, 317, 
	377, 316, 317, 353, 316, 317, 378, 316, 
	317, 367, 316, 317, 379, 316, 317, 380, 
	316, 317, 381, 316, 317, 382, 316, 317, 
	343, 345, 345, 316, 383, 0, 384, 0, 
	75, 0, 385, 0, 386, 0, 387, 0, 
	388, 0, 55, 67, 67, 0, 389, 390, 
	389, 0, 393, 392, 394, 395, 392, 391, 
	0, 397, 398, 396, 0, 397, 396, 393, 
	399, 397, 398, 399, 396, 393, 400, 401, 
	402, 403, 404, 405, 406, 404, 407, 408, 
	409, 410, 411, 412, 413, 400, 0, 80, 
	414, 79, 80, 415, 79, 80, 416, 79, 
	80, 417, 79, 80, 105, 415, 79, 80, 
	418, 79, 80, 419, 79, 80, 420, 79, 
	421, 80, 422, 79, 422, 80, 79, 80, 
	423, 79, 80, 424, 79, 80, 425, 79, 
	80, 426, 79, 80, 105, 79, 80, 427, 
	428, 79, 80, 429, 79, 80, 415, 79, 
	80, 430, 79, 80, 431, 79, 80, 432, 
	79, 80, 433, 79, 80, 426, 79, 80, 
	434, 79, 80, 435, 79, 80, 436, 79, 
	80, 437, 79, 80, 438, 79, 80, 439, 
	79, 80, 426, 79, 80, 440, 79, 80, 
	441, 79, 80, 442, 79, 80, 443, 79, 
	80, 105, 415, 415, 79, 444, 0, 1, 
	0, 445, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 65, 133, 141, 234, 308, 313, 
	354, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 356, 30, 
	31, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 29, 38, 40, 39, 41, 
	42, 43, 44, 45, 46, 47, 48, 47, 
	48, 48, 2, 49, 63, 319, 321, 324, 
	334, 342, 349, 50, 51, 52, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	2, 64, 2, 2, 3, 13, 15, 29, 
	32, 35, 37, 65, 133, 141, 234, 308, 
	313, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 76, 77, 77, 
	2, 78, 92, 99, 107, 113, 123, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 2, 93, 94, 95, 
	96, 97, 98, 64, 100, 101, 102, 103, 
	104, 105, 106, 108, 109, 110, 111, 112, 
	114, 117, 115, 116, 118, 119, 120, 121, 
	122, 124, 131, 125, 126, 127, 128, 129, 
	130, 132, 134, 136, 135, 137, 138, 139, 
	140, 142, 208, 143, 144, 145, 146, 147, 
	148, 149, 150, 151, 150, 151, 151, 2, 
	152, 166, 167, 169, 178, 186, 194, 203, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 2, 64, 168, 
	166, 170, 172, 171, 173, 174, 175, 176, 
	177, 179, 180, 181, 182, 183, 184, 185, 
	187, 189, 188, 190, 191, 192, 193, 195, 
	201, 196, 197, 198, 199, 200, 202, 204, 
	205, 206, 207, 209, 210, 211, 212, 213, 
	214, 215, 216, 217, 216, 217, 217, 2, 
	218, 228, 219, 220, 221, 222, 223, 224, 
	225, 226, 227, 64, 229, 230, 231, 232, 
	233, 235, 305, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 243, 244, 244, 2, 
	245, 259, 260, 262, 271, 279, 287, 291, 
	300, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 2, 64, 
	261, 259, 263, 265, 264, 266, 267, 268, 
	269, 270, 272, 273, 274, 275, 276, 277, 
	278, 280, 282, 281, 283, 284, 285, 286, 
	288, 289, 290, 292, 298, 293, 294, 295, 
	296, 297, 299, 301, 302, 303, 304, 306, 
	307, 309, 310, 311, 312, 313, 314, 315, 
	317, 318, 316, 314, 315, 316, 314, 317, 
	318, 3, 13, 15, 29, 32, 35, 37, 
	65, 133, 141, 234, 308, 313, 320, 63, 
	322, 323, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 335, 337, 336, 338, 339, 
	340, 341, 343, 344, 345, 346, 347, 348, 
	350, 351, 352, 353, 355, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 19, 31, 126, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 356;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 687 "js/lib/gherkin/lexer/hr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
  
/* line 694 "js/lib/gherkin/lexer/hr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 921 "js/lib/gherkin/lexer/hr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 960 "js/lib/gherkin/lexer/hr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hr.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined' && define.amd) {
  define('gherkin/lexer/hr', [], function() {return Lexer});
}

})();
